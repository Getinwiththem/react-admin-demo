{"version":3,"sources":["../../../node_modules/graphql/jsutils/isInvalid.mjs","../../../node_modules/graphql/jsutils/keyValMap.mjs","../../../node_modules/graphql/type/definition.mjs","../../../node_modules/graphql/utilities/valueFromASTUntyped.mjs","../../../node_modules/graphql/type/scalars.mjs","../../../node_modules/graphql/type/directives.mjs","../../../node_modules/graphql/jsutils/objectValues.mjs","../../../node_modules/iterall/index.mjs","../../../node_modules/graphql/jsutils/isNullish.mjs","../../../node_modules/graphql/utilities/astFromValue.mjs","../../../node_modules/graphql/type/introspection.mjs","../../../node_modules/graphql/jsutils/find.mjs","../../../node_modules/graphql/type/schema.mjs","../../../node_modules/graphql/type/validate.mjs","../../../node_modules/graphql/utilities/typeFromAST.mjs","../../../node_modules/graphql/utilities/TypeInfo.mjs","../../../node_modules/graphql/jsutils/keyMap.mjs","../../../node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.mjs","../../../node_modules/graphql/validation/ValidationContext.mjs","../../../node_modules/graphql/utilities/coerceValue.mjs","../../../node_modules/graphql/utilities/valueFromAST.mjs","../../../node_modules/graphql/execution/values.mjs","../../../node_modules/graphql/execution/execute.mjs","../../../node_modules/graphql/jsutils/memoize3.mjs","../../../node_modules/graphql/utilities/introspectionQuery.mjs","../../../node_modules/graphql/utilities/buildASTSchema.mjs","../../../node_modules/graphql/utilities/lexicographicSortSchema.mjs","../../../node_modules/graphql/index.mjs","../../../node_modules/graphql/language/lexer.mjs","../../../node_modules/graphql/language/location.mjs","../../../node_modules/graphql/jsutils/instanceOf.mjs","../../../node_modules/graphql/error/printError.mjs","../../../node_modules/graphql/language/source.mjs","../../../node_modules/graphql/error/locatedError.mjs","../../../node_modules/graphql-ast-types-browser/lib/definitions/index.js","../../../node_modules/graphql/language/blockStringValue.mjs","../../../node_modules/graphql-ast-types-browser/lib/index.js","../../../node_modules/graphql-tag/src/index.js","../../../node_modules/apollo-utilities/lib/util/environment.js","../../../node_modules/apollo-utilities/lib/storeUtils.js","../../../node_modules/apollo-utilities/lib/fragments.js","../../../node_modules/apollo-cache/lib/utils.js","../../../node_modules/apollo-cache/lib/cache.js","../../../node_modules/apollo-utilities/lib/util/warnOnce.js","../../../node_modules/apollo-cache-inmemory/lib/fragmentMatcher.js","../../../node_modules/apollo-cache-inmemory/lib/objectCache.js","../../../node_modules/apollo-cache-inmemory/lib/writeToStore.js","../../../node_modules/apollo-cache-inmemory/node_modules/graphql-anywhere/lib/graphql.js","../../../node_modules/apollo-cache-inmemory/node_modules/graphql-anywhere/lib/index.js","../../../node_modules/apollo-cache-inmemory/lib/readFromStore.js","../../../node_modules/apollo-cache-inmemory/lib/recordingCache.js","../../../node_modules/apollo-cache-inmemory/lib/inMemoryCache.js","../../../node_modules/apollo-cache-inmemory/lib/index.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/core/networkStatus.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/util/Observable.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/errors/ApolloError.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/core/types.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/core/ObservableQuery.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/scheduler/scheduler.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/data/mutations.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/data/queries.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/core/QueryManager.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/data/store.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/ApolloClient.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/index.js","../../../node_modules/apollo-link-dedup/lib/dedupLink.js","../../../node_modules/apollo-link-dedup/lib/index.js","../../../node_modules/graphql-ast-types-browser/lib/definitions/init.js","../../../node_modules/graphql-ast-types-browser/lib/definitions/graphql.js","../../../node_modules/pluralize/pluralize.js","../../../node_modules/apollo-client-preset/lib/index.js","../../../node_modules/zen-observable/index.js","../../../node_modules/zen-observable/lib/Observable.js","../../../node_modules/apollo-utilities/lib/getFromAST.js","../../../node_modules/fast-json-stable-stringify/index.js","../../../node_modules/apollo-utilities/lib/util/assign.js","../../../node_modules/apollo-client-preset/node_modules/apollo-client/version.js","../../../packages/ra-data-graphql/node_modules/apollo-client/version.js","../../../node_modules/apollo-link-http-common/lib/index.js","../../../node_modules/apollo-link-http/lib/httpLink.js","../../../node_modules/apollo-link-http/lib/index.js","../../../node_modules/apollo-utilities/lib/util/isEqual.js","../../../node_modules/apollo-utilities/lib/util/maybeDeepFreeze.js","../../../node_modules/apollo-utilities/lib/util/errorHandling.js","../../../node_modules/apollo-utilities/lib/directives.js","../../../packages/ra-data-graphql/node_modules/apollo-client/core/types.js","../../../packages/ra-data-graphql/node_modules/apollo-client/core/networkStatus.js","../../../packages/ra-data-graphql/node_modules/apollo-client/util/Observable.js","../../../packages/ra-data-graphql/node_modules/apollo-client/errors/ApolloError.js","../../../packages/ra-data-graphql/node_modules/apollo-client/core/ObservableQuery.js","../../../packages/ra-data-graphql/node_modules/apollo-client/scheduler/scheduler.js","../../../packages/ra-data-graphql/node_modules/apollo-client/data/mutations.js","../../../packages/ra-data-graphql/node_modules/apollo-client/data/queries.js","../../../packages/ra-data-graphql/node_modules/apollo-client/core/QueryManager.js","../../../packages/ra-data-graphql/node_modules/apollo-client/data/store.js","../../../packages/ra-data-graphql/node_modules/apollo-client/ApolloClient.js","../../../node_modules/apollo-utilities/lib/util/cloneDeep.js","../../../node_modules/apollo-utilities/lib/transform.js","../../../node_modules/graphql/error/syntaxError.mjs","../../../node_modules/graphql/error/formatError.mjs","../../../node_modules/graphql/error/index.mjs","../../../node_modules/graphql/language/kinds.mjs","../../../node_modules/graphql/language/printer.mjs","../../../node_modules/graphql/jsutils/invariant.mjs","../../../node_modules/graphql/language/visitor.mjs","../../../node_modules/graphql/error/GraphQLError.mjs","../../../node_modules/graphql/language/parser.mjs","../../../node_modules/zen-observable-ts/lib/index.js","../../../node_modules/zen-observable-ts/lib/zenObservable.js","../../../node_modules/apollo-link/lib/linkUtils.js","../../../node_modules/apollo-link/lib/link.js","../../../node_modules/apollo-link/lib/index.js","../../../node_modules/graphql/language/directiveLocation.mjs"],"names":["isInvalid","value","undefined","keyValMap","list","keyFn","valFn","reduce","map","item","Object","create","_typeof","Symbol","iterator","obj","constructor","prototype","_extends","assign","target","i","arguments","length","source","key","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","isType","type","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","instanceOf","definition_GraphQLScalarType","definition_GraphQLObjectType","definition_GraphQLInterfaceType","definition_GraphQLUnionType","definition_GraphQLEnumType","definition_GraphQLInputObjectType","GraphQLList","GraphQLNonNull","isInputType","isWrappingType","ofType","isOutputType","isCompositeType","isAbstractType","this","invariant","String","listProto","assertNullableType","toString","toJSON","inspect","nonNullProto","isNullableType","getNullableType","definition_getNamedType","unwrappedType","resolveThunk","thunk","GraphQLScalarType","config","name","description","astNode","_scalarConfig","serialize","parseValue","parseLiteral","serializer","parser","valueNode","variables","valueFromASTUntyped","kind","kinds","NULL","INT","parseInt","FLOAT","parseFloat","STRING","ENUM","BOOLEAN","LIST","values","node","OBJECT","fields","field","VARIABLE","variableName","Error","GraphQLObjectType","extensionASTNodes","isTypeOf","_typeConfig","getFields","_fields","defineFieldMap","getInterfaces","_interfaces","interfacesThunk","interfaces","Array","isArray","defineInterfaces","fieldsThunk","fieldMap","isPlainObj","resultFieldMap","keys","forEach","fieldName","fieldConfig","resolver","isDeprecated","Boolean","deprecationReason","resolve","argsConfig","args","argName","arg","defaultValue","GraphQLInterfaceType","resolveType","GraphQLUnionType","getTypes","_types","unionType","typesThunk","types","defineTypes","GraphQLEnumType","_enumConfig","getValues","_values","valueMap","valueName","getValue","_getNameLookup","enumValue","_getValueLookup","get","_variables","_valueLookup","lookup","Map","set","_nameLookup","GraphQLInputObjectType","_defineFieldMap","_this","MAX_INT","MIN_INT","coerceInt","num","Number","int","Math","floor","GraphQLInt","ast","coerceFloat","GraphQLFloat","coerceString","GraphQLString","GraphQLBoolean","GraphQLID","specifiedScalarTypes","isDirective","directive","directives_GraphQLDirective","GraphQLDirective","directives_classCallCheck","locations","GraphQLIncludeDirective","directiveLocation","FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","if","GraphQLSkipDirective","DEFAULT_DEPRECATION_REASON","GraphQLDeprecatedDirective","FIELD_DEFINITION","ENUM_VALUE","reason","specifiedDirectives","jsutils_objectValues","SYMBOL","SYMBOL_ITERATOR","$$iterator","isArrayLike","isCollection","getIteratorMethod","isIterable","getIterator","iterable","method","ArrayLikeIterator","_o","_i","collection","callback","thisArg","step","next","done","SYMBOL_ASYNC_ITERATOR","asyncIterator","$$asyncIterator","AsyncFromSyncIterator","isNullish","Promise","then","astFromValue_typeof","astFromValue","astValue","itemType","valuesNodes","itemNode","push","fieldNodes","fieldValue","OBJECT_FIELD","NAME","serialized","stringNum","integerStringRegExp","test","__Schema","isIntrospection","__Type","schema","getTypeMap","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType","directives","__Directive","getDirectives","__DirectiveLocation","__InputValue","onOperation","d","indexOf","QUERY","MUTATION","SUBSCRIPTION","onFragment","FRAGMENT_DEFINITION","onField","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","INPUT_OBJECT","INPUT_FIELD_DEFINITION","__TypeKind","TypeKind","NON_NULL","__Field","includeDeprecated","_ref","filter","possibleTypes","context","_ref2","getPossibleTypes","enumValues","__EnumValue","_ref3","inputFields","inputVal","printer","SchemaMetaFieldDef","_ref4","TypeMetaFieldDef","_ref5","_ref6","getType","TypeNameMetaFieldDef","_ref7","parentType","introspectionTypes","find","predicate","schema_typeof","GraphQLSchema","schema_classCallCheck","assumeValid","__validationErrors","allowedLegacyNames","__allowedLegacyNames","_queryType","query","_mutationType","mutation","_subscriptionType","subscription","_directives","initialTypes","concat","typeMap","typeMapReducer","typeMapDirectiveReducer","_typeMap","_implementations","typeName","iface","impls","abstractType","isPossibleType","possibleType","possibleTypeMap","_possibleTypeMap","getDirective","reducedMap","fieldArgTypes","_map","SchemaValidationContext","validate_classCallCheck","_errors","reportError","message","nodes","_nodes","addError","GraphQLError","error","getErrors","typeFromAST","typeNode","innerType","LIST_TYPE","NON_NULL_TYPE","NAMED_TYPE","TypeInfo_TypeInfo","TypeInfo","getFieldDefFn","initialType","TypeInfo_classCallCheck","_schema","_typeStack","_parentTypeStack","_inputTypeStack","_fieldDefStack","_directive","_argument","_enumValue","_getFieldDef","getFieldDef","getParentType","getInputType","getParentInputType","getArgument","getEnumValue","enter","SELECTION_SET","namedType","fieldDef","fieldType","DIRECTIVE","OPERATION_DEFINITION","operation","typeConditionAST","typeCondition","outputType","VARIABLE_DEFINITION","inputType","ARGUMENT","argDef","argType","fieldOrDirective","listType","objectType","inputFieldType","inputField","enumType","leave","pop","fieldNode","keyMap","PairSet","OverlappingFieldsCanBeMerged_classCallCheck","_data","has","a","b","areMutuallyExclusive","first","result","add","_pairSetAdd","data","ValidationContext","typeInfo","ValidationContext_classCallCheck","_ast","_typeInfo","_fragmentSpreads","_recursivelyReferencedFragments","_variableUsages","_recursiveVariableUsages","getSchema","getDocument","getFragment","fragments","_fragments","definitions","frags","statement","getFragmentSpreads","spreads","setsToVisit","selections","selection","selectionSet","getRecursivelyReferencedFragments","collectedNames","nodesToVisit","_node","fragName","fragment","getVariableUsages","usages","newUsages","language_visitor","VariableDefinition","Variable","variable","getRecursiveVariableUsages","apply","valueFromAST","coercedValues","itemNodes","isMissingVariable","itemValue","coercedValue","coercedObj","_error","getArgumentValues","def","variableValues","argDefs","argNodes","argNodeMap","argumentNode","graphql_error","getDirectiveValues","directiveDef","directiveNode","collectFields","exeContext","runtimeType","visitedFragmentNames","shouldIncludeNode","alias","doesFragmentConditionMatch","skip","include","typeConditionNode","conditionalType","fn","cache0","memoize3","returnType","subFieldNodes","getIntrospectionQuery","options","descriptions","introspectionQuery","ASTDefinitionBuilder","typeDefinitionsMap","buildASTSchema_classCallCheck","_typeDefinitionsMap","_options","_resolveType","_cache","buildTypes","buildType","defNode","_makeSchemaDef","_buildWrappedType","buildWrappedType","inputTypeNode","getNamedTypeNode","buildDirective","getDescription","_makeInputValues","buildField","getDeprecationReason","OBJECT_TYPE_DEFINITION","_makeTypeDef","INTERFACE_TYPE_DEFINITION","_makeInterfaceDef","ENUM_TYPE_DEFINITION","_makeEnumDef","UNION_TYPE_DEFINITION","_makeUnionDef","SCALAR_TYPE_DEFINITION","_makeScalarDef","INPUT_OBJECT_TYPE_DEFINITION","_makeInputObjectDef","_this2","_makeFieldDefMap","_this3","_this4","_this5","_this6","_this7","deprecated","commentDescriptions","rawValue","loc","comments","token","startToken","prev","lexer","COMMENT","line","reverse","join","getLeadingCommentBlock","blockStringValue","__webpack_require__","__webpack_exports__","createLexer","TokenKind","getTokenDesc","_error__WEBPACK_IMPORTED_MODULE_0__","_blockStringValue__WEBPACK_IMPORTED_MODULE_1__","startOfFileToken","Tok","SOF","lastToken","lineStart","advance","advanceLexer","lookahead","EOF","readToken","freeze","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","BLOCK_STRING","charCodeAt","slice","start","end","column","printCharCode","code","isNaN","JSON","stringify","fromCharCode","toUpperCase","body","bodyLength","pos","startPosition","position","positionAfterWhitespace","col","readComment","readName","firstCode","isFloat","readDigits","readNumber","chunkStart","readBlockString","charCode","c","char2hex","readString","unexpectedCharacterMessage","getLocation","lineRegexp","match","exec","index","process","printError","_language_location__WEBPACK_IMPORTED_MODULE_0__","printedLocations","highlightSourceAtLocation","location","lineOffset","locationOffset","columnOffset","getColumnOffset","contextLine","contextColumn","prevLineNum","lineNum","nextLineNum","padLen","lines","split","whitespace","lpad","len","str","Source","_jsutils_invariant__WEBPACK_IMPORTED_MODULE_0__","locatedError","_GraphQLError__WEBPACK_IMPORTED_MODULE_0__","originalError","path","positions","defineProperty","exports","default","_ref$fields","_ref$aliases","aliases","_ref$builder","builder","optional","BUILDER_KEYS","NODE_FIELDS","ALIAS_KEYS","chain","assertEach","assertOneOf","_len3","vals","_key3","val","assertNodeType","_len4","_key4","every","t","is","assertNodeOrValueType","_len5","_key5","assertValueType","assertArrayOf","cb","_len","fns","_key","_len2","_key2","it","rawString","commonIndent","indent","leadingWhitespace","isBlank","shift","opts","shallowEqual","validate","actual","expected","_require","registerType","_isType","TYPES","nodeType","targetType","FLIPPED_ALIAS_KEYS","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","err","return","acc","_loop","_type","toLowerCase","parse","normalize","string","replace","trim","docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","parseDocument","doc","cacheKey","parsed","stripLoc","removeLocAtThisLevel","docType","endToken","valueType","astFragmentMap","fragmentDefinition","fragmentName","sourceKey","substring","console","warn","processFragments","gql","literals","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","module","isEnv","env","isProduction","isDevelopment","isTest","valueToObjectRepresentation","storeKeyNameFromField","getStoreKeyName","argumentsObjectFromField","resultKeyNameFromField","isField","isInlineFragment","isIdValue","toIdValue","isJsonValue","fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_0__","fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_0___default","n","__assign","s","p","argObj","isIntValue","isFloatValue","isBooleanValue","isStringValue","isObjectValue","nestedArgObj_1","isVariable","variableValue","isListValue","listValue","nestedArgArrayObj","isEnumValue","isNullValue","directivesObj","_a","KNOWN_DIRECTIVES","filterKeys","sort","queryArgs_1","filteredArgs_1","completeFieldName","stringifiedArgs","argObj_1","idObject","idConfig","generated","id","typename","jsonObject","getFragmentQueryDocument","document","actualFragmentName","definition","selectionSetFromObj","nestedSelSet","justTypenameQuery","variableDefinitions","cache_ApolloCache","ApolloCache","transformDocument","transformForLink","readQuery","optimistic","read","readFragment","rootId","writeQuery","write","dataId","writeFragment","writeData","typenameResult","e","__typename","dataToWrite","queryFromPojo","haveWarned","fragmentMatcher_haveWarned","fragmentMatcher_HeuristicFragmentMatcher","HeuristicFragmentMatcher","ensureReady","canBypassInit","idValue","store","msg","environment","warnOnceInDevelopment","returnPartialData","IntrospectionFragmentMatcher","introspectionQueryResultData","possibleTypesMap","parseIntrospectionResult","isReady","bind","implementingTypes","introspectionResultData","__schema","implementingType","ObjectCache","toObject","delete","clear","newData","defaultNormalizedCacheFactory","seed","__extends","extendStatics","setPrototypeOf","__proto__","__","writeToStore_assign","WriteError","_super","enhanceErrorWithDocument","enhancedError","stack","writeQueryToStore","_b","storeFactory","_c","dataIdFromObject","_d","fragmentMap","fragmentMatcherFunction","queryDefinition","getFromAST","util_assign","writeSelectionSetToStore","processedData","writeResultToStore","operationDefinition","included","lib_directives","storeUtils","resultFieldKey","storeValue","storeObject","storeFieldName","shouldMerge","generatedKey","generatedId","processArrayValue","itemDataId","semanticId","isDataProcessed","valueDataId","isGeneratedId","escapedId","hadTypename","hasTypename","typenameChanged","json","newStoreObj","mergeWithGenerated","realKey","cache","real","realValue","writeFieldToStore","some","matches","fakeContext","self","hasMissingField","cacheRedirects","executeSelectionSet","rootValue","execContext","contextValue","fieldResult","info","isLeaf","resultKey","executeSubSelectedArray","executeField","merge","fragmentMatcher","fragmentResult","resultMapper","hasOwn","dest","src","srcVal","lib","execOptions","mainDefinition","readFromStore_assign","ID_KEY","readQueryFromStore","diffQueryAgainstStore","readFromStore_readStoreResolver","assertIdValue","objId","storeKeyName","getCacheKey","storeObj","previousResult","isEqual","addPreviousResultToIdValues","idToPreviousResult_1","itemPreviousResult","readFromStore_resultMapper","complete","resultFields","currentResultKeys_1","areNestedArrayItemsStrictlyEqual","enumerable","configurable","writable","recordingCache_assign","RecordingCache","recordedData","record","transaction","startingState","inMemoryCache_extends","inMemoryCache_assign","defaultConfig","defaultDataIdFromObject","addTypename","_id","inMemoryCache_InMemoryCache","InMemoryCache","watches","typenameDocumentCache","WeakMap","silenceBroadcast","customResolvers","cacheResolvers","restore","extract","patches","opt","broadcastWatches","diff","watch","evict","reset","removeOptimistic","toPerform","change","recordOptimisticTransaction","performTransaction","alreadySilenced","patch","recordingCache","dataCache","transform","NetworkStatus","isNetworkRequestInFlight","networkStatus","Observable_Observable","Observable","es","ApolloError_extends","FetchType","generateErrorMessage","graphQLErrors","graphQLError","errorMessage","networkError","ApolloError","extraInfo","ObservableQuery_extends","ObservableQuery_ObservableQuery","ObservableQuery","scheduler","shouldSubscribe","observer","onSubscribe","isCurrentlyPolling","isTornDown","queryId","queryManager","generateQueryId","observers","subscriptionHandles","that","reject","obs","removeQuery","setTimeout","unsubscribe","subscribe","currentResult","lastError","lastResult","loading","policy","queryStoreValue","queryStore","errorPolicy","getCurrentQueryResult","partial","queryLoading","fetchPolicy","ready","errors","stale","getLastResult","getLastError","resetLastResults","refetch","isNetworkFetchPolicy","combinedOptions","fetchQuery","maybeDeepFreeze","fetchMore","fetchMoreOptions","updateQuery","qid","normal","fetchMoreResult","subscribeToMore","startGraphQLSubscription","previous","subscriptionData","onError","splice","setOptions","oldOptions","pollInterval","startPolling","stopPolling","tryFetch","setVariables","fetchResults","newVariables","mapFn","getQueryWithPreviousResult","newResult","errorHandling","dataStore","markUpdateQueryResult","broadcastQueries","stopPollingQuery","startPollingQuery","_subscription","_observer","setUpQuery","tearDownQuery","addObservableQuery","_error2","startQuery","queryListenerForObserver","sub","removeObservableQuery","stopQuery","scheduler_assign","scheduler_QueryScheduler","QueryScheduler","ssrMode","inFlightQueries","registeredQueries","intervalQueries","pollingTimers","checkInFlight","fetchType","catch","listener","addQueryListener","addQueryOnInterval","fetchQueriesOnInterval","interval","queryOptions","pollingOptions","poll","clearInterval","setInterval","registerPollingQuery","MutationStore","getStore","mutationId","initMutation","mutationString","markMutationError","markMutationResult","queries_assign","queries_QueryStore","QueryStore","initQuery","previousQuery","isSetVariables","previousVariables","storePreviousVariables","isPoll","isRefetch","metadata","fetchMoreForQueryId","markQueryResult","markQueryError","markQueryResultClient","observableQueryIds","res","QueryManager_assign","defaultQueryInfo","listeners","invalidated","lastRequestId","observableQuery","subscriptions","QueryManager_QueryManager","QueryManager","link","queryDeduplication","onBroadcast","mutationStore","idCounter","queries","fetchQueryPromises","queryIdsByName","deduplicator","from","apollo_link_dedup_lib","mutate","optimisticResponse","updateQueriesByName","updateQueries","refetchQueries","updateWithProxyFn","update","getCache","setQuery","generateUpdateQueriesInfo","ret","queryName","updater","markMutationInit","storeResult","buildOperationForLink","markMutationComplete","refetchQuery","refetchQueryByName","needToFetch","shouldFetch","requestId","generateRequestId","cancel","updateQueryWatch","invalidate","networkResult","fetchRequest","getQuery","removeFetchQueryPromise","previouslyHadError","shouldNotifyIfLoading","networkStatusChanged","errorStatusChanged","notifyOnNetworkStatusChange","apolloError_1","isMissing","document_1","readResult","resultFromStore","watchQuery","defaultValues","transformedOptions","addFetchQueryPromise","stopQueryInStore","queryDef","clearStore","resetIds","resetStore","reFetchObservableQueries","getObservableQueryPromises","includeStandby","observableQueryPromises","all","transformedDoc","handler","markSubscriptionResult","x","queryIdOrObservable","foundObserveableQuery","errorsFromStore","forceFetch","refetchedQueries","newInfo","extraContext","operationName","store_DataStore","DataStore","initialCache","ignoreErrors","writeWithErrors","optimistic_1","orig","cacheWrites_1","currentQueryResult","nextQueryResult","mutationResult","queryVariables","update_1","ApolloClient_assign","hasSuggestedDevtools","supportedDirectives","forward","apollo_client_ApolloClient","ApolloClient","defaultOptions","resetStoreCallbacks","ssrForceFetchDelay","connectToDevTools","disableNetworkFetches","defaultConnectToDevTools","window","__APOLLO_CLIENT__","top","__APOLLO_DEVTOOLS_GLOBAL_HOOK__","navigator","userAgent","debug","version","initQueryManager","initProxy","__actionHookForDevTools","devToolsHookCb","__requestRaw","payload","action","state","mutations","dataWithOptimisticResults","onResetStore","serializedState","proxy","dedupLink_DedupLink","DedupLink","inFlightRequestObservables","subscribers","request","getContext","toKey","cleanup","subscription_1","singleObserver_1","sharedObserver","_slicedToArray","arr","_arr","_n","_e","_s","sliceIterator","_index2","_interopRequireDefault","__esModule","params","_index","operationTypes","pluralRules","singularRules","uncountables","irregularPlurals","irregularSingles","sanitizeRule","rule","RegExp","restoreCase","word","charAt","substr","sanitizeWord","rules","replaceWord","replaceMap","keepMap","checkWord","bool","pluralize","count","inclusive","pluralized","singular","plural","isPlural","isSingular","addPluralRule","replacement","addSingularRule","addUncountableRule","addIrregularRule","single","__export","m","apollo_link_http_1","HttpLink","apollo_cache_inmemory_1","graphql_tag_1","DefaultClient","uri","_createClass","defineProperties","props","descriptor","protoProps","staticProps","hasSymbols","hasSymbol","getSymbol","getMethod","getSpecies","ctor","isObservable","hostReportError","log","enqueue","cleanupSubscription","_cleanup","closeSubscription","_queue","_state","notifySubscription","onNotify","queue","flushSubscription","observable","Subscription","subscriber","subscriptionObserver","SubscriptionObserver","_subscriber","C","hasSeed","hasValue","sources","startNext","v","outer","inner","completeIfDone","closed","items","symbol","configurabe","getMutationDefinition","checkDocument","getOperationDefinition","getOperationDefinitionOrDie","getOperationName","getFragmentDefinitions","getQueryDefinition","getMainDefinition","createFragmentMap","getDefaultValues","_util_assign__WEBPACK_IMPORTED_MODULE_0__","_storeUtils__WEBPACK_IMPORTED_MODULE_1__","mutationDef","operations","queryDoc","symTable","defaultValueObj","cmp","f","cycles","aobj","bobj","seen","isFinite","out","seenIndex","fallbackHttpConfig","http","includeQuery","includeExtensions","headers","accept","content-type","throwServerError","response","statusCode","status","serializeFetchParameter","label","parseError","__rest","getOwnPropertySymbols","httpLink_createHttpLink","linkOptions","fetcher","fetch","useGETForQueries","requestOptions","library","checkFetcher","linkConfig","fetchOptions","credentials","controller","chosenURI","fallbackURI","contextURI","selectURI","contextConfig","fallbackConfig","configs","extensions","lib_selectHttpOptionsAndBody","signal","AbortController","createSignalIfSupported","_controller","queryParams","addQueryParam","encodeURIComponent","serializedVariables","serializedExtensions","preFragment","fragmentStart","queryParamsPrefix","newURI","rewriteURIForGET","setContext","text","bodyText","op","abort","Date","getTime","_environment__WEBPACK_IMPORTED_MODULE_0__","deepFreeze","o","getOwnPropertyNames","prop","isFrozen","tryFunctionOrLogError","graphQLResultHasError","getDirectiveInfoFromField","shouldInclude","hasDirectives","_storeUtils__WEBPACK_IMPORTED_MODULE_0__","directiveObj_1","directiveArguments","directiveName","ifArgument","ifValue","evaledValue","getDirectiveNames","flattenSelections","selectionNode","selected","names","ApolloClient_ApolloClient","cloneDeep","nextValue","addTypenameToDocument","removeConnectionDirectiveFromDocument","TYPENAME_FIELD","isNotEmpty","getDirectiveMatcher","dir","removeDirectivesFromDocument","docClone","removeDirectivesFromSelectionSet","agressiveRemove","remove","directiveMatcher","shouldKeep","isRoot","addTypenameToSelectionSet","lastIndexOf","connectionRemoveConfig","willRemove","syntaxError","Kind","DOCUMENT","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","INPUT_VALUE_DEFINITION","ENUM_VALUE_DEFINITION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","DIRECTIVE_DEFINITION","print","_visitor__WEBPACK_IMPORTED_MODULE_0__","printDocASTReducer","Name","Document","OperationDefinition","varDefs","wrap","SelectionSet","block","Field","Argument","FragmentSpread","InlineFragment","FragmentDefinition","IntValue","_ref8","FloatValue","_ref9","StringValue","_ref10","isDescription","escaped","printBlockString","BooleanValue","_ref11","NullValue","EnumValue","_ref12","ListValue","_ref13","ObjectValue","_ref14","ObjectField","_ref15","Directive","_ref16","NamedType","_ref17","ListType","_ref18","NonNullType","_ref19","SchemaDefinition","_ref20","OperationTypeDefinition","_ref21","ScalarTypeDefinition","addDescription","_ref22","ObjectTypeDefinition","_ref23","FieldDefinition","_ref24","InputValueDefinition","_ref25","InterfaceTypeDefinition","_ref26","UnionTypeDefinition","_ref27","EnumTypeDefinition","_ref28","EnumValueDefinition","_ref29","InputObjectTypeDefinition","_ref30","ScalarTypeExtension","_ref31","ObjectTypeExtension","_ref32","InterfaceTypeExtension","_ref33","UnionTypeExtension","_ref34","EnumTypeExtension","_ref35","InputObjectTypeExtension","_ref36","DirectiveDefinition","_ref37","maybeArray","separator","array","maybeString","condition","visit","visitInParallel","visitWithTypeInfo","QueryDocumentKeys","BREAK","root","visitor","visitorKeys","inArray","edits","parent","ancestors","newRoot","isLeaving","isEdited","clone","k","editOffset","ii","editKey","editValue","isNode","visitFn","getVisitFn","maybeNode","visitors","skipping","kindVisitor","kindSpecificVisitor","specificVisitor","specificKindVisitor","_printError__WEBPACK_IMPORTED_MODULE_0__","_language_location__WEBPACK_IMPORTED_MODULE_1__","_source","_positions","_locations","captureStackTrace","r","parseType","parseConstValue","parseTypeReference","parseNamedType","_source__WEBPACK_IMPORTED_MODULE_0__","_error__WEBPACK_IMPORTED_MODULE_1__","_lexer__WEBPACK_IMPORTED_MODULE_2__","_kinds__WEBPACK_IMPORTED_MODULE_3__","_directiveLocation__WEBPACK_IMPORTED_MODULE_4__","sourceObj","expect","parseDefinition","parseValueLiteral","parseName","peek","parseExecutableDefinition","parseTypeSystemDefinition","peekDescription","unexpected","parseOperationDefinition","expectKeyword","parseFragmentName","parseVariableDefinitions","parseDirectives","parseSelectionSet","parseFragmentDefinition","parseOperationType","operationToken","many","parseVariableDefinition","parseVariable","parseSelection","parseFragment","nameOrAlias","parseArguments","parseField","isConst","parseConstArgument","parseArgument","parseValueValue","openKind","parseFn","closeKind","any","parseList","parseObjectField","parseObject","parseStringLiteral","parseDirective","keywordToken","parseOperationTypeDefinition","parseSchemaDefinition","parseDescription","parseScalarTypeDefinition","parseImplementsInterfaces","parseFieldsDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionMemberTypes","parseUnionTypeDefinition","parseEnumValuesDefinition","parseEnumTypeDefinition","parseInputFieldsDefinition","parseInputObjectTypeDefinition","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","parseTypeExtension","parseArgumentDefs","parseDirectiveLocation","parseDirectiveLocations","parseDirectiveDefinition","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","parseInputValueDef","parseEnumValueDefinition","noLocation","Loc","atToken","LinkError","isTerminating","toPromise","completed","makePromise","fromPromise","promise","fromError","errorValue","createOperation","starting","getKey","link_passthrough","of","toLink","ApolloLink","link_empty","links","y","link_split","left","right","leftLink","rightLink","link_concat","second","firstLink","nextLink","empty","execute","transformedOperation","transformOperation","OPERATION_FIELDS","validateOperation","DirectiveLocation"],"mappings":"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","file":"static/js/8.4d78c414.chunk.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Returns true if a value is undefined, or NaN.\n */\nexport default function isInvalid(value) {\n  return value === undefined || value !== value;\n}","/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * and a function to produce the values from each item in the array.\n *\n *     const phoneBook = [\n *       { name: 'Jon', num: '555-1234' },\n *       { name: 'Jenny', num: '867-5309' }\n *     ]\n *\n *     // { Jon: '555-1234', Jenny: '867-5309' }\n *     const phonesByName = keyValMap(\n *       phoneBook,\n *       entry => entry.name,\n *       entry => entry.num\n *     )\n *\n */\nexport default function keyValMap(list, keyFn, valFn) {\n  return list.reduce(function (map, item) {\n    return map[keyFn(item)] = valFn(item), map;\n  }, Object.create(null));\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport instanceOf from '../jsutils/instanceOf';\nimport invariant from '../jsutils/invariant';\nimport isInvalid from '../jsutils/isInvalid';\nimport { Kind } from '../language/kinds';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped'; // Predicates & Assertions\n\n/**\n * These are all of the possible kinds of types.\n */\n\nexport function isType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);\n}\nexport function assertType(type) {\n  !isType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL type.') : void 0;\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n// eslint-disable-next-line no-redeclare\n\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  !isScalarType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Scalar type.') : void 0;\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  !isObjectType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Object type.') : void 0;\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  !isInterfaceType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Interface type.') : void 0;\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  !isUnionType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Union type.') : void 0;\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  !isEnumType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Enum type.') : void 0;\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  !isInputObjectType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Input Object type.') : void 0;\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  !isListType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL List type.') : void 0;\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  !isNonNullType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Non-Null type.') : void 0;\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);\n}\nexport function assertInputType(type) {\n  !isInputType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL input type.') : void 0;\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);\n}\nexport function assertOutputType(type) {\n  !isOutputType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL output type.') : void 0;\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  !isLeafType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL leaf type.') : void 0;\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  !isCompositeType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL composite type.') : void 0;\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  !isAbstractType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL abstract type.') : void 0;\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         parents: { type: GraphQLList(PersonType) },\n *         children: { type: GraphQLList(PersonType) },\n *       })\n *     })\n *\n */\n// eslint-disable-next-line no-redeclare\n\nexport function GraphQLList(ofType) {\n  if (this instanceof GraphQLList) {\n    this.ofType = assertType(ofType);\n  } else {\n    return new GraphQLList(ofType);\n  }\n} // Also provide toJSON and inspect aliases for toString.\n\nvar listProto = GraphQLList.prototype;\n\nlistProto.toString = listProto.toJSON = listProto.inspect = function toString() {\n  return '[' + String(this.ofType) + ']';\n};\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n *     const RowType = new GraphQLObjectType({\n *       name: 'Row',\n *       fields: () => ({\n *         id: { type: GraphQLNonNull(GraphQLString) },\n *       })\n *     })\n *\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n// eslint-disable-next-line no-redeclare\n\n\nexport function GraphQLNonNull(ofType) {\n  if (this instanceof GraphQLNonNull) {\n    this.ofType = assertNullableType(ofType);\n  } else {\n    return new GraphQLNonNull(ofType);\n  }\n} // Also provide toJSON and inspect aliases for toString.\n\nvar nonNullProto = GraphQLNonNull.prototype;\n\nnonNullProto.toString = nonNullProto.toJSON = nonNullProto.inspect = function toString() {\n  return String(this.ofType) + '!';\n};\n/**\n * These types wrap and modify other types\n */\n\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  !isWrappingType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL wrapping type.') : void 0;\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  !isNullableType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL nullable type.') : void 0;\n  return type;\n}\n/* eslint-disable no-redeclare */\n\nexport function getNullableType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);\n}\nexport function assertNamedType(type) {\n  !isNamedType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL named type.') : void 0;\n  return type;\n}\n/* eslint-disable no-redeclare */\n\nexport function getNamedType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    var unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nfunction resolveThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function does not return a value (i.e. it returns\n * `undefined`) then an error will be raised and a `null` value will be returned\n * in the response. If the serialize function returns `null`, then no error will\n * be included in the response.\n *\n * Example:\n *\n *     const OddType = new GraphQLScalarType({\n *       name: 'Odd',\n *       serialize(value) {\n *         if (value % 2 === 1) {\n *           return value;\n *         }\n *       }\n *     });\n *\n */\n\n\nexport var GraphQLScalarType = function () {\n  function GraphQLScalarType(config) {\n    _classCallCheck(this, GraphQLScalarType);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this._scalarConfig = config;\n    !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;\n    !(typeof config.serialize === 'function') ? invariant(0, this.name + ' must provide \"serialize\" function. If this custom Scalar ' + 'is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" ' + 'functions are also provided.') : void 0;\n\n    if (config.parseValue || config.parseLiteral) {\n      !(typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function') ? invariant(0, this.name + ' must provide both \"parseValue\" and \"parseLiteral\" ' + 'functions.') : void 0;\n    }\n  } // Serializes an internal value to include in a response.\n\n\n  GraphQLScalarType.prototype.serialize = function serialize(value) {\n    var serializer = this._scalarConfig.serialize;\n    return serializer(value);\n  }; // Parses an externally provided value to use as an input.\n\n\n  GraphQLScalarType.prototype.parseValue = function parseValue(value) {\n    var parser = this._scalarConfig.parseValue;\n\n    if (isInvalid(value)) {\n      return undefined;\n    }\n\n    return parser ? parser(value) : value;\n  }; // Parses an externally provided literal value to use as an input.\n\n\n  GraphQLScalarType.prototype.parseLiteral = function parseLiteral(valueNode, variables) {\n    var parser = this._scalarConfig.parseLiteral;\n    return parser ? parser(valueNode, variables) : valueFromASTUntyped(valueNode, variables);\n  };\n\n  GraphQLScalarType.prototype.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLScalarType;\n}(); // Also provide toJSON and inspect aliases for toString.\n\nGraphQLScalarType.prototype.toJSON = GraphQLScalarType.prototype.inspect = GraphQLScalarType.prototype.toString;\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n *     const AddressType = new GraphQLObjectType({\n *       name: 'Address',\n *       fields: {\n *         street: { type: GraphQLString },\n *         number: { type: GraphQLInt },\n *         formatted: {\n *           type: GraphQLString,\n *           resolve(obj) {\n *             return obj.number + ' ' + obj.street\n *           }\n *         }\n *       }\n *     });\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         name: { type: GraphQLString },\n *         bestFriend: { type: PersonType },\n *       })\n *     });\n *\n */\n\nexport var GraphQLObjectType = function () {\n  function GraphQLObjectType(config) {\n    _classCallCheck(this, GraphQLObjectType);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this.isTypeOf = config.isTypeOf;\n    this._typeConfig = config;\n    !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;\n\n    if (config.isTypeOf) {\n      !(typeof config.isTypeOf === 'function') ? invariant(0, this.name + ' must provide \"isTypeOf\" as a function.') : void 0;\n    }\n  }\n\n  GraphQLObjectType.prototype.getFields = function getFields() {\n    return this._fields || (this._fields = defineFieldMap(this, this._typeConfig.fields));\n  };\n\n  GraphQLObjectType.prototype.getInterfaces = function getInterfaces() {\n    return this._interfaces || (this._interfaces = defineInterfaces(this, this._typeConfig.interfaces));\n  };\n\n  GraphQLObjectType.prototype.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLObjectType;\n}(); // Also provide toJSON and inspect aliases for toString.\n\nGraphQLObjectType.prototype.toJSON = GraphQLObjectType.prototype.inspect = GraphQLObjectType.prototype.toString;\n\nfunction defineInterfaces(type, interfacesThunk) {\n  var interfaces = resolveThunk(interfacesThunk) || [];\n  !Array.isArray(interfaces) ? invariant(0, type.name + ' interfaces must be an Array or a function which returns ' + 'an Array.') : void 0;\n  return interfaces;\n}\n\nfunction defineFieldMap(type, fieldsThunk) {\n  var fieldMap = resolveThunk(fieldsThunk) || {};\n  !isPlainObj(fieldMap) ? invariant(0, type.name + ' fields must be an object with field names as keys or a ' + 'function which returns such an object.') : void 0;\n  var resultFieldMap = Object.create(null);\n  Object.keys(fieldMap).forEach(function (fieldName) {\n    var fieldConfig = fieldMap[fieldName];\n    !isPlainObj(fieldConfig) ? invariant(0, type.name + '.' + fieldName + ' field config must be an object') : void 0;\n    !!fieldConfig.hasOwnProperty('isDeprecated') ? invariant(0, type.name + '.' + fieldName + ' should provide \"deprecationReason\" instead ' + 'of \"isDeprecated\".') : void 0;\n\n    var field = _extends({}, fieldConfig, {\n      isDeprecated: Boolean(fieldConfig.deprecationReason),\n      name: fieldName\n    });\n\n    !isValidResolver(field.resolve) ? invariant(0, type.name + '.' + fieldName + ' field resolver must be a function if ' + ('provided, but got: ' + String(field.resolve) + '.')) : void 0;\n    var argsConfig = fieldConfig.args;\n\n    if (!argsConfig) {\n      field.args = [];\n    } else {\n      !isPlainObj(argsConfig) ? invariant(0, type.name + '.' + fieldName + ' args must be an object with argument ' + 'names as keys.') : void 0;\n      field.args = Object.keys(argsConfig).map(function (argName) {\n        var arg = argsConfig[argName];\n        return {\n          name: argName,\n          description: arg.description === undefined ? null : arg.description,\n          type: arg.type,\n          defaultValue: arg.defaultValue,\n          astNode: arg.astNode\n        };\n      });\n    }\n\n    resultFieldMap[fieldName] = field;\n  });\n  return resultFieldMap;\n}\n\nfunction isPlainObj(obj) {\n  return obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && !Array.isArray(obj);\n} // If a resolver is defined, it must be a function.\n\n\nfunction isValidResolver(resolver) {\n  return resolver == null || typeof resolver === 'function';\n}\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n *     const EntityType = new GraphQLInterfaceType({\n *       name: 'Entity',\n *       fields: {\n *         name: { type: GraphQLString }\n *       }\n *     });\n *\n */\n\n\nexport var GraphQLInterfaceType = function () {\n  function GraphQLInterfaceType(config) {\n    _classCallCheck(this, GraphQLInterfaceType);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this.resolveType = config.resolveType;\n    this._typeConfig = config;\n    !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;\n\n    if (config.resolveType) {\n      !(typeof config.resolveType === 'function') ? invariant(0, this.name + ' must provide \"resolveType\" as a function.') : void 0;\n    }\n  }\n\n  GraphQLInterfaceType.prototype.getFields = function getFields() {\n    return this._fields || (this._fields = defineFieldMap(this, this._typeConfig.fields));\n  };\n\n  GraphQLInterfaceType.prototype.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLInterfaceType;\n}(); // Also provide toJSON and inspect aliases for toString.\n\nGraphQLInterfaceType.prototype.toJSON = GraphQLInterfaceType.prototype.inspect = GraphQLInterfaceType.prototype.toString;\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n *     const PetType = new GraphQLUnionType({\n *       name: 'Pet',\n *       types: [ DogType, CatType ],\n *       resolveType(value) {\n *         if (value instanceof Dog) {\n *           return DogType;\n *         }\n *         if (value instanceof Cat) {\n *           return CatType;\n *         }\n *       }\n *     });\n *\n */\n\nexport var GraphQLUnionType = function () {\n  function GraphQLUnionType(config) {\n    _classCallCheck(this, GraphQLUnionType);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this.resolveType = config.resolveType;\n    this._typeConfig = config;\n    !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;\n\n    if (config.resolveType) {\n      !(typeof config.resolveType === 'function') ? invariant(0, this.name + ' must provide \"resolveType\" as a function.') : void 0;\n    }\n  }\n\n  GraphQLUnionType.prototype.getTypes = function getTypes() {\n    return this._types || (this._types = defineTypes(this, this._typeConfig.types));\n  };\n\n  GraphQLUnionType.prototype.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLUnionType;\n}(); // Also provide toJSON and inspect aliases for toString.\n\nGraphQLUnionType.prototype.toJSON = GraphQLUnionType.prototype.inspect = GraphQLUnionType.prototype.toString;\n\nfunction defineTypes(unionType, typesThunk) {\n  var types = resolveThunk(typesThunk) || [];\n  !Array.isArray(types) ? invariant(0, 'Must provide Array of types or a function which returns ' + ('such an array for Union ' + unionType.name + '.')) : void 0;\n  return types;\n}\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n *     const RGBType = new GraphQLEnumType({\n *       name: 'RGB',\n *       values: {\n *         RED: { value: 0 },\n *         GREEN: { value: 1 },\n *         BLUE: { value: 2 }\n *       }\n *     });\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\n\n\nexport var GraphQLEnumType\n/* <T> */\n= function () {\n  function GraphQLEnumType(config\n  /* <T> */\n  ) {\n    _classCallCheck(this, GraphQLEnumType);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this._enumConfig = config;\n    !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;\n  }\n\n  GraphQLEnumType.prototype.getValues = function getValues() {\n    return this._values || (this._values = defineEnumValues(this, this._enumConfig.values));\n  };\n\n  GraphQLEnumType.prototype.getValue = function getValue(name) {\n    return this._getNameLookup()[name];\n  };\n\n  GraphQLEnumType.prototype.serialize = function serialize(value\n  /* T */\n  ) {\n    var enumValue = this._getValueLookup().get(value);\n\n    if (enumValue) {\n      return enumValue.name;\n    }\n  };\n\n  GraphQLEnumType.prototype.parseValue = function parseValue(value)\n  /* T */\n  {\n    if (typeof value === 'string') {\n      var enumValue = this._getNameLookup()[value];\n\n      if (enumValue) {\n        return enumValue.value;\n      }\n    }\n  };\n\n  GraphQLEnumType.prototype.parseLiteral = function parseLiteral(valueNode, _variables)\n  /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind === Kind.ENUM) {\n      var enumValue = this._getNameLookup()[valueNode.value];\n\n      if (enumValue) {\n        return enumValue.value;\n      }\n    }\n  };\n\n  GraphQLEnumType.prototype._getValueLookup = function _getValueLookup() {\n    if (!this._valueLookup) {\n      var lookup = new Map();\n      this.getValues().forEach(function (value) {\n        lookup.set(value.value, value);\n      });\n      this._valueLookup = lookup;\n    }\n\n    return this._valueLookup;\n  };\n\n  GraphQLEnumType.prototype._getNameLookup = function _getNameLookup() {\n    if (!this._nameLookup) {\n      var lookup = Object.create(null);\n      this.getValues().forEach(function (value) {\n        lookup[value.name] = value;\n      });\n      this._nameLookup = lookup;\n    }\n\n    return this._nameLookup;\n  };\n\n  GraphQLEnumType.prototype.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLEnumType;\n}(); // Also provide toJSON and inspect aliases for toString.\n\nGraphQLEnumType.prototype.toJSON = GraphQLEnumType.prototype.inspect = GraphQLEnumType.prototype.toString;\n\nfunction defineEnumValues(type, valueMap\n/* <T> */\n) {\n  !isPlainObj(valueMap) ? invariant(0, type.name + ' values must be an object with value names as keys.') : void 0;\n  return Object.keys(valueMap).map(function (valueName) {\n    var value = valueMap[valueName];\n    !isPlainObj(value) ? invariant(0, type.name + '.' + valueName + ' must refer to an object with a \"value\" key ' + ('representing an internal value but got: ' + String(value) + '.')) : void 0;\n    !!value.hasOwnProperty('isDeprecated') ? invariant(0, type.name + '.' + valueName + ' should provide \"deprecationReason\" instead ' + 'of \"isDeprecated\".') : void 0;\n    return {\n      name: valueName,\n      description: value.description,\n      isDeprecated: Boolean(value.deprecationReason),\n      deprecationReason: value.deprecationReason,\n      astNode: value.astNode,\n      value: value.hasOwnProperty('value') ? value.value : valueName\n    };\n  });\n}\n/* <T> */\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n *     const GeoPoint = new GraphQLInputObjectType({\n *       name: 'GeoPoint',\n *       fields: {\n *         lat: { type: GraphQLNonNull(GraphQLFloat) },\n *         lon: { type: GraphQLNonNull(GraphQLFloat) },\n *         alt: { type: GraphQLFloat, defaultValue: 0 },\n *       }\n *     });\n *\n */\n\n\nexport var GraphQLInputObjectType = function () {\n  function GraphQLInputObjectType(config) {\n    _classCallCheck(this, GraphQLInputObjectType);\n\n    this.name = config.name;\n    this.description = config.description;\n    this.astNode = config.astNode;\n    this._typeConfig = config;\n    !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;\n  }\n\n  GraphQLInputObjectType.prototype.getFields = function getFields() {\n    return this._fields || (this._fields = this._defineFieldMap());\n  };\n\n  GraphQLInputObjectType.prototype._defineFieldMap = function _defineFieldMap() {\n    var _this = this;\n\n    var fieldMap = resolveThunk(this._typeConfig.fields) || {};\n    !isPlainObj(fieldMap) ? invariant(0, this.name + ' fields must be an object with field names as keys or a ' + 'function which returns such an object.') : void 0;\n    var resultFieldMap = Object.create(null);\n    Object.keys(fieldMap).forEach(function (fieldName) {\n      var field = _extends({}, fieldMap[fieldName], {\n        name: fieldName\n      });\n\n      !!field.hasOwnProperty('resolve') ? invariant(0, _this.name + '.' + fieldName + ' field type has a resolve property, but ' + 'Input Types cannot define resolvers.') : void 0;\n      resultFieldMap[fieldName] = field;\n    });\n    return resultFieldMap;\n  };\n\n  GraphQLInputObjectType.prototype.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLInputObjectType;\n}(); // Also provide toJSON and inspect aliases for toString.\n\nGraphQLInputObjectType.prototype.toJSON = GraphQLInputObjectType.prototype.toString;\nGraphQLInputObjectType.prototype.inspect = GraphQLInputObjectType.prototype.toString;","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport keyValMap from '../jsutils/keyValMap';\nimport isInvalid from '../jsutils/isInvalid';\nimport { Kind } from '../language/kinds';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\n\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map(function (node) {\n        return valueFromASTUntyped(node, variables);\n      });\n\n    case Kind.OBJECT:\n      return keyValMap(valueNode.fields, function (field) {\n        return field.name.value;\n      }, function (field) {\n        return valueFromASTUntyped(field.value, variables);\n      });\n\n    case Kind.VARIABLE:\n      var variableName = valueNode.name.value;\n      return variables && !isInvalid(variables[variableName]) ? variables[variableName] : undefined;\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error('Unexpected value kind: ' + valueNode.kind);\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLScalarType, isNamedType } from './definition';\nimport { Kind } from '../language/kinds'; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction coerceInt(value) {\n  if (value === '') {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: (empty string)');\n  }\n\n  var num = Number(value);\n\n  if (num !== num || num > MAX_INT || num < MIN_INT) {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: ' + String(value));\n  }\n\n  var int = Math.floor(num);\n\n  if (int !== num) {\n    throw new TypeError('Int cannot represent non-integer value: ' + String(value));\n  }\n\n  return int;\n}\n\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',\n  serialize: coerceInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      var num = parseInt(ast.value, 10);\n\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n\n    return undefined;\n  }\n});\n\nfunction coerceFloat(value) {\n  if (value === '') {\n    throw new TypeError('Float cannot represent non numeric value: (empty string)');\n  }\n\n  var num = Number(value);\n\n  if (num === num) {\n    return num;\n  }\n\n  throw new TypeError('Float cannot represent non numeric value: ' + String(value));\n}\n\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',\n  serialize: coerceFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : undefined;\n  }\n});\n\nfunction coerceString(value) {\n  if (Array.isArray(value)) {\n    throw new TypeError('String cannot represent an array value: [' + String(value) + ']');\n  }\n\n  return String(value);\n}\n\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',\n  serialize: coerceString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : undefined;\n  }\n});\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: Boolean,\n  parseValue: Boolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.BOOLEAN ? ast.value : undefined;\n  }\n});\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `\"4\"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',\n  serialize: String,\n  parseValue: String,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : undefined;\n  }\n});\nexport var specifiedScalarTypes = [GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID];\nexport function isSpecifiedScalarType(type) {\n  return isNamedType(type) && ( // Would prefer to use specifiedScalarTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === GraphQLString.name || type.name === GraphQLInt.name || type.name === GraphQLFloat.name || type.name === GraphQLBoolean.name || type.name === GraphQLID.name);\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport { GraphQLNonNull } from './definition';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport instanceOf from '../jsutils/instanceOf';\nimport invariant from '../jsutils/invariant';\nimport { DirectiveLocation } from '../language/directiveLocation';\n/**\n * Test if the given value is a GraphQL directive.\n */\n// eslint-disable-next-line no-redeclare\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\n\nexport var GraphQLDirective = function GraphQLDirective(config) {\n  _classCallCheck(this, GraphQLDirective);\n\n  this.name = config.name;\n  this.description = config.description;\n  this.locations = config.locations;\n  this.astNode = config.astNode;\n  !config.name ? invariant(0, 'Directive must be named.') : void 0;\n  !Array.isArray(config.locations) ? invariant(0, 'Must provide locations for directive.') : void 0;\n  var args = config.args;\n\n  if (!args) {\n    this.args = [];\n  } else {\n    !!Array.isArray(args) ? invariant(0, '@' + config.name + ' args must be an object with argument names as keys.') : void 0;\n    this.args = Object.keys(args).map(function (argName) {\n      var arg = args[argName];\n      return {\n        name: argName,\n        description: arg.description === undefined ? null : arg.description,\n        type: arg.type,\n        defaultValue: arg.defaultValue,\n        astNode: arg.astNode\n      };\n    });\n  }\n};\n/**\n * Used to conditionally include fields or fragments.\n */\n\nexport var GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description: 'Directs the executor to include this field or fragment only when ' + 'the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  }\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport var GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description: 'Directs the executor to skip this field or fragment when the `if` ' + 'argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  }\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport var DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport var GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description: 'Explains why this element was deprecated, usually also including a ' + 'suggestion for how to access supported similar data. Formatted ' + 'in [Markdown](https://daringfireball.net/projects/markdown/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  }\n});\n/**\n * The full list of specified directives.\n */\n\nexport var specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective];\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(function (specifiedDirective) {\n    return specifiedDirective.name === directive.name;\n  });\n}","/* eslint-disable no-redeclare */\n// $FlowFixMe workaround for: https://github.com/facebook/flow/issues/2221\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nvar objectValues = Object.values || function (obj) {\n  return Object.keys(obj).map(function (key) {\n    return obj[key];\n  });\n};\n\nexport default objectValues;","/**\n * Copyright (c) 2016, Lee Byron\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @ignore\n */\n\n/**\n * [Iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator)\n * is a *protocol* which describes a standard way to produce a sequence of\n * values, typically the values of the Iterable represented by this Iterator.\n *\n * While described by the [ES2015 version of JavaScript](http://www.ecma-international.org/ecma-262/6.0/#sec-iterator-interface)\n * it can be utilized by any version of JavaScript.\n *\n * @external Iterator\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator|MDN Iteration protocols}\n */\n\n/**\n * [Iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n * is a *protocol* which when implemented allows a JavaScript object to define\n * their iteration behavior, such as what values are looped over in a\n * [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)\n * loop or `iterall`'s `forEach` function. Many [built-in types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#Builtin_iterables)\n * implement the Iterable protocol, including `Array` and `Map`.\n *\n * While described by the [ES2015 version of JavaScript](http://www.ecma-international.org/ecma-262/6.0/#sec-iterable-interface)\n * it can be utilized by any version of JavaScript.\n *\n * @external Iterable\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable|MDN Iteration protocols}\n */\n// In ES2015 environments, Symbol exists\nvar SYMBOL\n/*: any */\n= typeof Symbol === 'function' ? Symbol : void 0; // In ES2015 (or a polyfilled) environment, this will be Symbol.iterator\n\nvar SYMBOL_ITERATOR = SYMBOL && SYMBOL.iterator;\n/**\n * A property name to be used as the name of an Iterable's method responsible\n * for producing an Iterator, referred to as `@@iterator`. Typically represents\n * the value `Symbol.iterator` but falls back to the string `\"@@iterator\"` when\n * `Symbol.iterator` is not defined.\n *\n * Use `$$iterator` for defining new Iterables instead of `Symbol.iterator`,\n * but do not use it for accessing existing Iterables, instead use\n * {@link getIterator} or {@link isIterable}.\n *\n * @example\n *\n * var $$iterator = require('iterall').$$iterator\n *\n * function Counter (to) {\n *   this.to = to\n * }\n *\n * Counter.prototype[$$iterator] = function () {\n *   return {\n *     to: this.to,\n *     num: 0,\n *     next () {\n *       if (this.num >= this.to) {\n *         return { value: undefined, done: true }\n *       }\n *       return { value: this.num++, done: false }\n *     }\n *   }\n * }\n *\n * var counter = new Counter(3)\n * for (var number of counter) {\n *   console.log(number) // 0 ... 1 ... 2\n * }\n *\n * @type {Symbol|string}\n */\n\n/*:: declare export var $$iterator: '@@iterator'; */\n\nexport var $$iterator = SYMBOL_ITERATOR || '@@iterator';\n/**\n * Returns true if the provided object implements the Iterator protocol via\n * either implementing a `Symbol.iterator` or `\"@@iterator\"` method.\n *\n * @example\n *\n * var isIterable = require('iterall').isIterable\n * isIterable([ 1, 2, 3 ]) // true\n * isIterable('ABC') // true\n * isIterable({ length: 1, 0: 'Alpha' }) // false\n * isIterable({ key: 'value' }) // false\n * isIterable(new Map()) // true\n *\n * @param obj\n *   A value which might implement the Iterable protocol.\n * @return {boolean} true if Iterable.\n */\n\n/*:: declare export function isIterable(obj: any): boolean; */\n\nexport function isIterable(obj) {\n  return !!getIteratorMethod(obj);\n}\n/**\n * Returns true if the provided object implements the Array-like protocol via\n * defining a positive-integer `length` property.\n *\n * @example\n *\n * var isArrayLike = require('iterall').isArrayLike\n * isArrayLike([ 1, 2, 3 ]) // true\n * isArrayLike('ABC') // true\n * isArrayLike({ length: 1, 0: 'Alpha' }) // true\n * isArrayLike({ key: 'value' }) // false\n * isArrayLike(new Map()) // false\n *\n * @param obj\n *   A value which might implement the Array-like protocol.\n * @return {boolean} true if Array-like.\n */\n\n/*:: declare export function isArrayLike(obj: any): boolean; */\n\nexport function isArrayLike(obj) {\n  var length = obj != null && obj.length;\n  return typeof length === 'number' && length >= 0 && length % 1 === 0;\n}\n/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and is either Iterable or Array-like.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if an\n * object should be iterated-over. It always excludes string literals and\n * includes Arrays (regardless of if it is Iterable). It also includes other\n * Array-like objects such as NodeList, TypedArray, and Buffer.\n *\n * @example\n *\n * var isCollection = require('iterall').isCollection\n * isCollection([ 1, 2, 3 ]) // true\n * isCollection('ABC') // false\n * isCollection({ length: 1, 0: 'Alpha' }) // true\n * isCollection({ key: 'value' }) // false\n * isCollection(new Map()) // true\n *\n * @example\n *\n * var forEach = require('iterall').forEach\n * if (isCollection(obj)) {\n *   forEach(obj, function (value) {\n *     console.log(value)\n *   })\n * }\n *\n * @param obj\n *   An Object value which might implement the Iterable or Array-like protocols.\n * @return {boolean} true if Iterable or Array-like Object.\n */\n\n/*:: declare export function isCollection(obj: any): boolean; */\n\nexport function isCollection(obj) {\n  return Object(obj) === obj && (isArrayLike(obj) || isIterable(obj));\n}\n/**\n * If the provided object implements the Iterator protocol, its Iterator object\n * is returned. Otherwise returns undefined.\n *\n * @example\n *\n * var getIterator = require('iterall').getIterator\n * var iterator = getIterator([ 1, 2, 3 ])\n * iterator.next() // { value: 1, done: false }\n * iterator.next() // { value: 2, done: false }\n * iterator.next() // { value: 3, done: false }\n * iterator.next() // { value: undefined, done: true }\n *\n * @template T the type of each iterated value\n * @param {Iterable<T>} iterable\n *   An Iterable object which is the source of an Iterator.\n * @return {Iterator<T>} new Iterator instance.\n */\n\n/*:: declare export var getIterator:\n  & (<+TValue>(iterable: Iterable<TValue>) => Iterator<TValue>)\n  & ((iterable: mixed) => void | Iterator<mixed>); */\n\nexport function getIterator(iterable) {\n  var method = getIteratorMethod(iterable);\n\n  if (method) {\n    return method.call(iterable);\n  }\n}\n/**\n * If the provided object implements the Iterator protocol, the method\n * responsible for producing its Iterator object is returned.\n *\n * This is used in rare cases for performance tuning. This method must be called\n * with obj as the contextual this-argument.\n *\n * @example\n *\n * var getIteratorMethod = require('iterall').getIteratorMethod\n * var myArray = [ 1, 2, 3 ]\n * var method = getIteratorMethod(myArray)\n * if (method) {\n *   var iterator = method.call(myArray)\n * }\n *\n * @template T the type of each iterated value\n * @param {Iterable<T>} iterable\n *   An Iterable object which defines an `@@iterator` method.\n * @return {function(): Iterator<T>} `@@iterator` method.\n */\n\n/*:: declare export var getIteratorMethod:\n  & (<+TValue>(iterable: Iterable<TValue>) => (() => Iterator<TValue>))\n  & ((iterable: mixed) => (void | (() => Iterator<mixed>))); */\n\nexport function getIteratorMethod(iterable) {\n  if (iterable != null) {\n    var method = SYMBOL_ITERATOR && iterable[SYMBOL_ITERATOR] || iterable['@@iterator'];\n\n    if (typeof method === 'function') {\n      return method;\n    }\n  }\n}\n/**\n * Similar to {@link getIterator}, this method returns a new Iterator given an\n * Iterable. However it will also create an Iterator for a non-Iterable\n * Array-like collection, such as Array in a non-ES2015 environment.\n *\n * `createIterator` is complimentary to `forEach`, but allows a \"pull\"-based\n * iteration as opposed to `forEach`'s \"push\"-based iteration.\n *\n * `createIterator` produces an Iterator for Array-likes with the same behavior\n * as ArrayIteratorPrototype described in the ECMAScript specification, and\n * does *not* skip over \"holes\".\n *\n * @example\n *\n * var createIterator = require('iterall').createIterator\n *\n * var myArraylike = { length: 3, 0: 'Alpha', 1: 'Bravo', 2: 'Charlie' }\n * var iterator = createIterator(myArraylike)\n * iterator.next() // { value: 'Alpha', done: false }\n * iterator.next() // { value: 'Bravo', done: false }\n * iterator.next() // { value: 'Charlie', done: false }\n * iterator.next() // { value: undefined, done: true }\n *\n * @template T the type of each iterated value\n * @param {Iterable<T>|{ length: number }} collection\n *   An Iterable or Array-like object to produce an Iterator.\n * @return {Iterator<T>} new Iterator instance.\n */\n\n/*:: declare export var createIterator:\n  & (<+TValue>(collection: Iterable<TValue>) => Iterator<TValue>)\n  & ((collection: {length: number}) => Iterator<mixed>)\n  & ((collection: mixed) => (void | Iterator<mixed>)); */\n\nexport function createIterator(collection) {\n  if (collection != null) {\n    var iterator = getIterator(collection);\n\n    if (iterator) {\n      return iterator;\n    }\n\n    if (isArrayLike(collection)) {\n      return new ArrayLikeIterator(collection);\n    }\n  }\n} // When the object provided to `createIterator` is not Iterable but is\n// Array-like, this simple Iterator is created.\n\nfunction ArrayLikeIterator(obj) {\n  this._o = obj;\n  this._i = 0;\n} // Note: all Iterators are themselves Iterable.\n\n\nArrayLikeIterator.prototype[$$iterator] = function () {\n  return this;\n}; // A simple state-machine determines the IteratorResult returned, yielding\n// each value in the Array-like object in order of their indicies.\n\n\nArrayLikeIterator.prototype.next = function () {\n  if (this._o === void 0 || this._i >= this._o.length) {\n    this._o = void 0;\n    return {\n      value: void 0,\n      done: true\n    };\n  }\n\n  return {\n    value: this._o[this._i++],\n    done: false\n  };\n};\n/**\n * Given an object which either implements the Iterable protocol or is\n * Array-like, iterate over it, calling the `callback` at each iteration.\n *\n * Use `forEach` where you would expect to use a `for ... of` loop in ES6.\n * However `forEach` adheres to the behavior of [Array#forEach][] described in\n * the ECMAScript specification, skipping over \"holes\" in Array-likes. It will\n * also delegate to a `forEach` method on `collection` if one is defined,\n * ensuring native performance for `Arrays`.\n *\n * Similar to [Array#forEach][], the `callback` function accepts three\n * arguments, and is provided with `thisArg` as the calling context.\n *\n * Note: providing an infinite Iterator to forEach will produce an error.\n *\n * [Array#forEach]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n *\n * @example\n *\n * var forEach = require('iterall').forEach\n *\n * forEach(myIterable, function (value, index, iterable) {\n *   console.log(value, index, iterable === myIterable)\n * })\n *\n * @example\n *\n * // ES6:\n * for (let value of myIterable) {\n *   console.log(value)\n * }\n *\n * // Any JavaScript environment:\n * forEach(myIterable, function (value) {\n *   console.log(value)\n * })\n *\n * @template T the type of each iterated value\n * @param {Iterable<T>|{ length: number }} collection\n *   The Iterable or array to iterate over.\n * @param {function(T, number, object)} callback\n *   Function to execute for each iteration, taking up to three arguments\n * @param [thisArg]\n *   Optional. Value to use as `this` when executing `callback`.\n */\n\n/*:: declare export var forEach:\n  & (<+TValue, TCollection: Iterable<TValue>>(\n      collection: TCollection,\n      callbackFn: (value: TValue, index: number, collection: TCollection) => any,\n      thisArg?: any\n    ) => void)\n  & (<TCollection: {length: number}>(\n      collection: TCollection,\n      callbackFn: (value: mixed, index: number, collection: TCollection) => any,\n      thisArg?: any\n    ) => void); */\n\n\nexport function forEach(collection, callback, thisArg) {\n  if (collection != null) {\n    if (typeof collection.forEach === 'function') {\n      return collection.forEach(callback, thisArg);\n    }\n\n    var i = 0;\n    var iterator = getIterator(collection);\n\n    if (iterator) {\n      var step;\n\n      while (!(step = iterator.next()).done) {\n        callback.call(thisArg, step.value, i++, collection); // Infinite Iterators could cause forEach to run forever.\n        // After a very large number of iterations, produce an error.\n\n        /* istanbul ignore if */\n\n        if (i > 9999999) {\n          throw new TypeError('Near-infinite iteration.');\n        }\n      }\n    } else if (isArrayLike(collection)) {\n      for (; i < collection.length; i++) {\n        if (collection.hasOwnProperty(i)) {\n          callback.call(thisArg, collection[i], i, collection);\n        }\n      }\n    }\n  }\n} /////////////////////////////////////////////////////\n//                                                 //\n//                 ASYNC ITERATORS                 //\n//                                                 //\n/////////////////////////////////////////////////////\n\n/**\n * [AsyncIterable](https://tc39.github.io/proposal-async-iteration/#sec-asynciterable-interface)\n * is a *protocol* which when implemented allows a JavaScript object to define\n * an asynchronous iteration behavior, such as what values are looped over in\n * a [`for-await-of`](https://tc39.github.io/proposal-async-iteration/#sec-for-in-and-for-of-statements)\n * loop or `iterall`'s {@link forAwaitEach} function.\n *\n * While described as a proposed addition to the [ES2017 version of JavaScript](https://tc39.github.io/proposal-async-iteration/)\n * it can be utilized by any version of JavaScript.\n *\n * @external AsyncIterable\n * @see {@link https://tc39.github.io/proposal-async-iteration/#sec-asynciterable-interface|Async Iteration Proposal}\n * @template T The type of each iterated value\n * @property {function (): AsyncIterator<T>} Symbol.asyncIterator\n *   A method which produces an AsyncIterator for this AsyncIterable.\n */\n\n/**\n * [AsyncIterator](https://tc39.github.io/proposal-async-iteration/#sec-asynciterator-interface)\n * is a *protocol* which describes a standard way to produce and consume an\n * asynchronous sequence of values, typically the values of the\n * {@link AsyncIterable} represented by this {@link AsyncIterator}.\n *\n * AsyncIterator is similar to Observable or Stream. Like an {@link Iterator} it\n * also as a `next()` method, however instead of an IteratorResult,\n * calling this method returns a {@link Promise} for a IteratorResult.\n *\n * While described as a proposed addition to the [ES2017 version of JavaScript](https://tc39.github.io/proposal-async-iteration/)\n * it can be utilized by any version of JavaScript.\n *\n * @external AsyncIterator\n * @see {@link https://tc39.github.io/proposal-async-iteration/#sec-asynciterator-interface|Async Iteration Proposal}\n */\n// In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator\n\nvar SYMBOL_ASYNC_ITERATOR = SYMBOL && SYMBOL.asyncIterator;\n/**\n * A property name to be used as the name of an AsyncIterable's method\n * responsible for producing an Iterator, referred to as `@@asyncIterator`.\n * Typically represents the value `Symbol.asyncIterator` but falls back to the\n * string `\"@@asyncIterator\"` when `Symbol.asyncIterator` is not defined.\n *\n * Use `$$asyncIterator` for defining new AsyncIterables instead of\n * `Symbol.asyncIterator`, but do not use it for accessing existing Iterables,\n * instead use {@link getAsyncIterator} or {@link isAsyncIterable}.\n *\n * @example\n *\n * var $$asyncIterator = require('iterall').$$asyncIterator\n *\n * function Chirper (to) {\n *   this.to = to\n * }\n *\n * Chirper.prototype[$$asyncIterator] = function () {\n *   return {\n *     to: this.to,\n *     num: 0,\n *     next () {\n *       return new Promise(resolve => {\n *         if (this.num >= this.to) {\n *           resolve({ value: undefined, done: true })\n *         } else {\n *           setTimeout(() => {\n *             resolve({ value: this.num++, done: false })\n *           }, 1000)\n *         }\n *       })\n *     }\n *   }\n * }\n *\n * var chirper = new Chirper(3)\n * for await (var number of chirper) {\n *   console.log(number) // 0 ...wait... 1 ...wait... 2\n * }\n *\n * @type {Symbol|string}\n */\n\n/*:: declare export var $$asyncIterator: '@@asyncIterator'; */\n\nexport var $$asyncIterator = SYMBOL_ASYNC_ITERATOR || '@@asyncIterator';\n/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * either implementing a `Symbol.asyncIterator` or `\"@@asyncIterator\"` method.\n *\n * @example\n *\n * var isAsyncIterable = require('iterall').isAsyncIterable\n * isAsyncIterable(myStream) // true\n * isAsyncIterable('ABC') // false\n *\n * @param obj\n *   A value which might implement the AsyncIterable protocol.\n * @return {boolean} true if AsyncIterable.\n */\n\n/*:: declare export function isAsyncIterable(obj: any): boolean; */\n\nexport function isAsyncIterable(obj) {\n  return !!getAsyncIteratorMethod(obj);\n}\n/**\n * If the provided object implements the AsyncIterator protocol, its\n * AsyncIterator object is returned. Otherwise returns undefined.\n *\n * @example\n *\n * var getAsyncIterator = require('iterall').getAsyncIterator\n * var asyncIterator = getAsyncIterator(myStream)\n * asyncIterator.next().then(console.log) // { value: 1, done: false }\n * asyncIterator.next().then(console.log) // { value: 2, done: false }\n * asyncIterator.next().then(console.log) // { value: 3, done: false }\n * asyncIterator.next().then(console.log) // { value: undefined, done: true }\n *\n * @template T the type of each iterated value\n * @param {AsyncIterable<T>} asyncIterable\n *   An AsyncIterable object which is the source of an AsyncIterator.\n * @return {AsyncIterator<T>} new AsyncIterator instance.\n */\n\n/*:: declare export var getAsyncIterator:\n  & (<+TValue>(asyncIterable: AsyncIterable<TValue>) => AsyncIterator<TValue>)\n  & ((asyncIterable: mixed) => (void | AsyncIterator<mixed>)); */\n\nexport function getAsyncIterator(asyncIterable) {\n  var method = getAsyncIteratorMethod(asyncIterable);\n\n  if (method) {\n    return method.call(asyncIterable);\n  }\n}\n/**\n * If the provided object implements the AsyncIterator protocol, the method\n * responsible for producing its AsyncIterator object is returned.\n *\n * This is used in rare cases for performance tuning. This method must be called\n * with obj as the contextual this-argument.\n *\n * @example\n *\n * var getAsyncIteratorMethod = require('iterall').getAsyncIteratorMethod\n * var method = getAsyncIteratorMethod(myStream)\n * if (method) {\n *   var asyncIterator = method.call(myStream)\n * }\n *\n * @template T the type of each iterated value\n * @param {AsyncIterable<T>} asyncIterable\n *   An AsyncIterable object which defines an `@@asyncIterator` method.\n * @return {function(): AsyncIterator<T>} `@@asyncIterator` method.\n */\n\n/*:: declare export var getAsyncIteratorMethod:\n  & (<+TValue>(asyncIterable: AsyncIterable<TValue>) => (() => AsyncIterator<TValue>))\n  & ((asyncIterable: mixed) => (void | (() => AsyncIterator<mixed>))); */\n\nexport function getAsyncIteratorMethod(asyncIterable) {\n  if (asyncIterable != null) {\n    var method = SYMBOL_ASYNC_ITERATOR && asyncIterable[SYMBOL_ASYNC_ITERATOR] || asyncIterable['@@asyncIterator'];\n\n    if (typeof method === 'function') {\n      return method;\n    }\n  }\n}\n/**\n * Similar to {@link getAsyncIterator}, this method returns a new AsyncIterator\n * given an AsyncIterable. However it will also create an AsyncIterator for a\n * non-async Iterable as well as non-Iterable Array-like collection, such as\n * Array in a pre-ES2015 environment.\n *\n * `createAsyncIterator` is complimentary to `forAwaitEach`, but allows a\n * buffering \"pull\"-based iteration as opposed to `forAwaitEach`'s\n * \"push\"-based iteration.\n *\n * `createAsyncIterator` produces an AsyncIterator for non-async Iterables as\n * described in the ECMAScript proposal [Async-from-Sync Iterator Objects](https://tc39.github.io/proposal-async-iteration/#sec-async-from-sync-iterator-objects).\n *\n * > Note: Creating `AsyncIterator`s requires the existence of `Promise`.\n * > While `Promise` has been available in modern browsers for a number of\n * > years, legacy browsers (like IE 11) may require a polyfill.\n *\n * @example\n *\n * var createAsyncIterator = require('iterall').createAsyncIterator\n *\n * var myArraylike = { length: 3, 0: 'Alpha', 1: 'Bravo', 2: 'Charlie' }\n * var iterator = createAsyncIterator(myArraylike)\n * iterator.next().then(console.log) // { value: 'Alpha', done: false }\n * iterator.next().then(console.log) // { value: 'Bravo', done: false }\n * iterator.next().then(console.log) // { value: 'Charlie', done: false }\n * iterator.next().then(console.log) // { value: undefined, done: true }\n *\n * @template T the type of each iterated value\n * @param {AsyncIterable<T>|Iterable<T>|{ length: number }} source\n *   An AsyncIterable, Iterable, or Array-like object to produce an Iterator.\n * @return {AsyncIterator<T>} new AsyncIterator instance.\n */\n\n/*:: declare export var createAsyncIterator:\n  & (<+TValue>(\n      collection: Iterable<Promise<TValue> | TValue> | AsyncIterable<TValue>\n    ) => AsyncIterator<TValue>)\n  & ((collection: {length: number}) => AsyncIterator<mixed>)\n  & ((collection: mixed) => (void | AsyncIterator<mixed>)); */\n\nexport function createAsyncIterator(source) {\n  if (source != null) {\n    var asyncIterator = getAsyncIterator(source);\n\n    if (asyncIterator) {\n      return asyncIterator;\n    }\n\n    var iterator = createIterator(source);\n\n    if (iterator) {\n      return new AsyncFromSyncIterator(iterator);\n    }\n  }\n} // When the object provided to `createAsyncIterator` is not AsyncIterable but is\n// sync Iterable, this simple wrapper is created.\n\nfunction AsyncFromSyncIterator(iterator) {\n  this._i = iterator;\n} // Note: all AsyncIterators are themselves AsyncIterable.\n\n\nAsyncFromSyncIterator.prototype[$$asyncIterator] = function () {\n  return this;\n}; // A simple state-machine determines the IteratorResult returned, yielding\n// each value in the Array-like object in order of their indicies.\n\n\nAsyncFromSyncIterator.prototype.next = function () {\n  var step = this._i.next();\n\n  return Promise.resolve(step.value).then(function (value) {\n    return {\n      value: value,\n      done: step.done\n    };\n  });\n};\n/**\n * Given an object which either implements the AsyncIterable protocol or is\n * Array-like, iterate over it, calling the `callback` at each iteration.\n *\n * Use `forAwaitEach` where you would expect to use a [for-await-of](https://tc39.github.io/proposal-async-iteration/#sec-for-in-and-for-of-statements) loop.\n *\n * Similar to [Array#forEach][], the `callback` function accepts three\n * arguments, and is provided with `thisArg` as the calling context.\n *\n * > Note: Using `forAwaitEach` requires the existence of `Promise`.\n * > While `Promise` has been available in modern browsers for a number of\n * > years, legacy browsers (like IE 11) may require a polyfill.\n *\n * @example\n *\n * var forAwaitEach = require('iterall').forAwaitEach\n *\n * forAwaitEach(myIterable, function (value, index, iterable) {\n *   console.log(value, index, iterable === myIterable)\n * })\n *\n * @example\n *\n * // ES2017:\n * for await (let value of myAsyncIterable) {\n *   console.log(await doSomethingAsync(value))\n * }\n * console.log('done')\n *\n * // Any JavaScript environment:\n * forAwaitEach(myAsyncIterable, function (value) {\n *   return doSomethingAsync(value).then(console.log)\n * }).then(function () {\n *   console.log('done')\n * })\n *\n * @template T the type of each iterated value\n * @param {AsyncIterable<T>|Iterable<Promise<T> | T>|{ length: number }} source\n *   The AsyncIterable or array to iterate over.\n * @param {function(T, number, object)} callback\n *   Function to execute for each iteration, taking up to three arguments\n * @param [thisArg]\n *   Optional. Value to use as `this` when executing `callback`.\n */\n\n/*:: declare export var forAwaitEach:\n  & (<+TValue, TCollection: Iterable<Promise<TValue> | TValue> | AsyncIterable<TValue>>(\n      collection: TCollection,\n      callbackFn: (value: TValue, index: number, collection: TCollection) => any,\n      thisArg?: any\n    ) => Promise<void>)\n  & (<TCollection: { length: number }>(\n      collection: TCollection,\n      callbackFn: (value: mixed, index: number, collection: TCollection) => any,\n      thisArg?: any\n    ) => Promise<void>); */\n\n\nexport function forAwaitEach(source, callback, thisArg) {\n  var asyncIterator = createAsyncIterator(source);\n\n  if (asyncIterator) {\n    var i = 0;\n    return new Promise(function (resolve, reject) {\n      function next() {\n        asyncIterator.next().then(function (step) {\n          if (!step.done) {\n            Promise.resolve(callback.call(thisArg, step.value, i++, source)).then(next).catch(reject);\n          } else {\n            resolve();\n          } // Explicitly return null, silencing bluebird-style warnings.\n\n\n          return null;\n        }).catch(reject); // Explicitly return null, silencing bluebird-style warnings.\n\n        return null;\n      }\n\n      next();\n    });\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Returns true if a value is null, undefined, or NaN.\n */\nexport default function isNullish(value) {\n  return value === null || value === undefined || value !== value;\n}","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport { forEach, isCollection } from 'iterall';\nimport isNullish from '../jsutils/isNullish';\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { Kind } from '../language/kinds';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\nimport { GraphQLID } from '../type/scalars';\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n\n    if (astValue && astValue.kind === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined, NaN\n\n\n  if (isInvalid(value)) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(value)) {\n      var valuesNodes = [];\n      forEach(value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (value === null || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {\n      return null;\n    }\n\n    var fields = objectValues(type.getFields());\n    var fieldNodes = [];\n    fields.forEach(function (field) {\n      var fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name\n          },\n          value: fieldValue\n        });\n      }\n    });\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  }\n\n  if (isScalarType(type) || isEnumType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n\n    if (isNullish(serialized)) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError('Cannot convert value to AST: ' + String(serialized));\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error('Unknown type: ' + type + '.');\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { astFromValue } from '../utilities/astFromValue';\nimport { print } from '../language/printer';\nimport { GraphQLObjectType, GraphQLEnumType, GraphQLList, GraphQLNonNull, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isAbstractType, isNamedType } from './definition';\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport { DirectiveLocation } from '../language/directiveLocation';\nexport var __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  isIntrospection: true,\n  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It ' + 'exposes all available types and directives on the server, as well as ' + 'the entry points for query, mutation, and subscription operations.',\n  fields: function fields() {\n    return {\n      types: {\n        description: 'A list of all types supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Type))),\n        resolve: function resolve(schema) {\n          return objectValues(schema.getTypeMap());\n        }\n      },\n      queryType: {\n        description: 'The type that query operations will be rooted at.',\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(schema) {\n          return schema.getQueryType();\n        }\n      },\n      mutationType: {\n        description: 'If this server supports mutation, the type that ' + 'mutation operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getMutationType();\n        }\n      },\n      subscriptionType: {\n        description: 'If this server support subscription, the type that ' + 'subscription operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getSubscriptionType();\n        }\n      },\n      directives: {\n        description: 'A list of all directives supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Directive))),\n        resolve: function resolve(schema) {\n          return schema.getDirectives();\n        }\n      }\n    };\n  }\n});\nexport var __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  isIntrospection: true,\n  description: 'A Directive provides a way to describe alternate runtime execution and ' + 'type validation behavior in a GraphQL document.' + \"\\n\\nIn some cases, you need to provide options to alter GraphQL's \" + 'execution behavior in ways field arguments will not suffice, such as ' + 'conditionally including or skipping a field. Directives provide this by ' + 'describing additional information to the executor.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString)\n      },\n      description: {\n        type: GraphQLString\n      },\n      locations: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__DirectiveLocation)))\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(directive) {\n          return directive.args || [];\n        }\n      },\n      // NOTE: the following three fields are deprecated and are no longer part\n      // of the GraphQL specification.\n      onOperation: {\n        deprecationReason: 'Use `locations`.',\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(DirectiveLocation.QUERY) !== -1 || d.locations.indexOf(DirectiveLocation.MUTATION) !== -1 || d.locations.indexOf(DirectiveLocation.SUBSCRIPTION) !== -1;\n        }\n      },\n      onFragment: {\n        deprecationReason: 'Use `locations`.',\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(DirectiveLocation.FRAGMENT_SPREAD) !== -1 || d.locations.indexOf(DirectiveLocation.INLINE_FRAGMENT) !== -1 || d.locations.indexOf(DirectiveLocation.FRAGMENT_DEFINITION) !== -1;\n        }\n      },\n      onField: {\n        deprecationReason: 'Use `locations`.',\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(DirectiveLocation.FIELD) !== -1;\n        }\n      }\n    };\n  }\n});\nexport var __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  isIntrospection: true,\n  description: 'A Directive can be adjacent to many parts of the GraphQL language, a ' + '__DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.'\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.'\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.'\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.'\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.'\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.'\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.'\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.'\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.'\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.'\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.'\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.'\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.'\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.'\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.'\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.'\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.'\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.'\n    }\n  }\n});\nexport var __Type = new GraphQLObjectType({\n  name: '__Type',\n  isIntrospection: true,\n  description: 'The fundamental unit of any GraphQL Schema is the type. There are ' + 'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' + '\\n\\nDepending on the kind of a type, certain fields describe ' + 'information about that type. Scalar types provide no information ' + 'beyond a name and description, while Enum types provide their values. ' + 'Object and Interface types provide the fields they describe. Abstract ' + 'types, Union and Interface, provide the Object types possible ' + 'at runtime. List and NonNull types compose other types.',\n  fields: function fields() {\n    return {\n      kind: {\n        type: GraphQLNonNull(__TypeKind),\n        resolve: function resolve(type) {\n          if (isScalarType(type)) {\n            return TypeKind.SCALAR;\n          } else if (isObjectType(type)) {\n            return TypeKind.OBJECT;\n          } else if (isInterfaceType(type)) {\n            return TypeKind.INTERFACE;\n          } else if (isUnionType(type)) {\n            return TypeKind.UNION;\n          } else if (isEnumType(type)) {\n            return TypeKind.ENUM;\n          } else if (isInputObjectType(type)) {\n            return TypeKind.INPUT_OBJECT;\n          } else if (isListType(type)) {\n            return TypeKind.LIST;\n          } else if (isNonNullType(type)) {\n            return TypeKind.NON_NULL;\n          }\n\n          throw new Error('Unknown kind of type: ' + type);\n        }\n      },\n      name: {\n        type: GraphQLString\n      },\n      description: {\n        type: GraphQLString\n      },\n      fields: {\n        type: GraphQLList(GraphQLNonNull(__Field)),\n        args: {\n          includeDeprecated: {\n            type: GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref) {\n          var includeDeprecated = _ref.includeDeprecated;\n\n          if (isObjectType(type) || isInterfaceType(type)) {\n            var fields = objectValues(type.getFields());\n\n            if (!includeDeprecated) {\n              fields = fields.filter(function (field) {\n                return !field.deprecationReason;\n              });\n            }\n\n            return fields;\n          }\n\n          return null;\n        }\n      },\n      interfaces: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type) {\n          if (isObjectType(type)) {\n            return type.getInterfaces();\n          }\n        }\n      },\n      possibleTypes: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type, args, context, _ref2) {\n          var schema = _ref2.schema;\n\n          if (isAbstractType(type)) {\n            return schema.getPossibleTypes(type);\n          }\n        }\n      },\n      enumValues: {\n        type: GraphQLList(GraphQLNonNull(__EnumValue)),\n        args: {\n          includeDeprecated: {\n            type: GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref3) {\n          var includeDeprecated = _ref3.includeDeprecated;\n\n          if (isEnumType(type)) {\n            var values = type.getValues();\n\n            if (!includeDeprecated) {\n              values = values.filter(function (value) {\n                return !value.deprecationReason;\n              });\n            }\n\n            return values;\n          }\n        }\n      },\n      inputFields: {\n        type: GraphQLList(GraphQLNonNull(__InputValue)),\n        resolve: function resolve(type) {\n          if (isInputObjectType(type)) {\n            return objectValues(type.getFields());\n          }\n        }\n      },\n      ofType: {\n        type: __Type\n      }\n    };\n  }\n});\nexport var __Field = new GraphQLObjectType({\n  name: '__Field',\n  isIntrospection: true,\n  description: 'Object and Interface types are described by a list of Fields, each of ' + 'which has a name, potentially a list of arguments, and a return type.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString)\n      },\n      description: {\n        type: GraphQLString\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(field) {\n          return field.args || [];\n        }\n      },\n      type: {\n        type: GraphQLNonNull(__Type)\n      },\n      isDeprecated: {\n        type: GraphQLNonNull(GraphQLBoolean)\n      },\n      deprecationReason: {\n        type: GraphQLString\n      }\n    };\n  }\n});\nexport var __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  isIntrospection: true,\n  description: 'Arguments provided to Fields or Directives and the input fields of an ' + 'InputObject are represented as Input Values which describe their type ' + 'and optionally a default value.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString)\n      },\n      description: {\n        type: GraphQLString\n      },\n      type: {\n        type: GraphQLNonNull(__Type)\n      },\n      defaultValue: {\n        type: GraphQLString,\n        description: 'A GraphQL-formatted string representing the default value for this ' + 'input value.',\n        resolve: function resolve(inputVal) {\n          return isInvalid(inputVal.defaultValue) ? null : print(astFromValue(inputVal.defaultValue, inputVal.type));\n        }\n      }\n    };\n  }\n});\nexport var __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  isIntrospection: true,\n  description: 'One possible value for a given Enum. Enum values are unique values, not ' + 'a placeholder for a string or numeric value. However an Enum value is ' + 'returned in a JSON response as a string.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString)\n      },\n      description: {\n        type: GraphQLString\n      },\n      isDeprecated: {\n        type: GraphQLNonNull(GraphQLBoolean)\n      },\n      deprecationReason: {\n        type: GraphQLString\n      }\n    };\n  }\n});\nexport var TypeKind = {\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  LIST: 'LIST',\n  NON_NULL: 'NON_NULL'\n};\nexport var __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  isIntrospection: true,\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.'\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description: 'Indicates this type is an object. ' + '`fields` and `interfaces` are valid fields.'\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description: 'Indicates this type is an interface. ' + '`fields` and `possibleTypes` are valid fields.'\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description: 'Indicates this type is a union. ' + '`possibleTypes` is a valid field.'\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description: 'Indicates this type is an enum. ' + '`enumValues` is a valid field.'\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description: 'Indicates this type is an input object. ' + '`inputFields` is a valid field.'\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. ' + '`ofType` is a valid field.'\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description: 'Indicates this type is a non-null. ' + '`ofType` is a valid field.'\n    }\n  }\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport var SchemaMetaFieldDef = {\n  name: '__schema',\n  type: GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref4) {\n    var schema = _ref4.schema;\n    return schema;\n  }\n};\nexport var TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [{\n    name: 'name',\n    type: GraphQLNonNull(GraphQLString)\n  }],\n  resolve: function resolve(source, _ref5, context, _ref6) {\n    var name = _ref5.name;\n    var schema = _ref6.schema;\n    return schema.getType(name);\n  }\n};\nexport var TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref7) {\n    var parentType = _ref7.parentType;\n    return parentType.name;\n  }\n};\nexport var introspectionTypes = [__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind];\nexport function isIntrospectionType(type) {\n  return isNamedType(type) && ( // Would prefer to use introspectionTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === __Schema.name || type.name === __Directive.name || type.name === __DirectiveLocation.name || type.name === __Type.name || type.name === __Field.name || type.name === __InputValue.name || type.name === __EnumValue.name || type.name === __TypeKind.name);\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport default function find(list, predicate) {\n  for (var i = 0; i < list.length; i++) {\n    if (predicate(list[i])) {\n      return list[i];\n    }\n  }\n}","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport { isObjectType, isInterfaceType, isUnionType, isInputObjectType, isWrappingType } from './definition';\nimport { GraphQLDirective, isDirective, specifiedDirectives } from './directives';\nimport { __Schema } from './introspection';\nimport find from '../jsutils/find';\nimport instanceOf from '../jsutils/instanceOf';\nimport invariant from '../jsutils/invariant';\nimport objectValues from '../jsutils/objectValues';\n/**\n * Test if the given value is a GraphQL schema.\n */\n// eslint-disable-next-line no-redeclare\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       query: MyAppQueryRootType,\n *       mutation: MyAppMutationRootType,\n *     })\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. @include and\n * @skip) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       ...\n *       directives: specifiedDirectives.concat([ myCustomDirective ]),\n *     })\n *\n */\n\nexport var GraphQLSchema = function () {\n  // Used as a cache for validateSchema().\n  function GraphQLSchema(config) {\n    var _this = this;\n\n    _classCallCheck(this, GraphQLSchema); // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n\n\n    if (config && config.assumeValid) {\n      this.__validationErrors = [];\n    } else {\n      // Otherwise check for common mistakes during construction to produce\n      // clear and early error messages.\n      !((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') ? invariant(0, 'Must provide configuration object.') : void 0;\n      !(!config.types || Array.isArray(config.types)) ? invariant(0, '\"types\" must be Array if provided but got: ' + String(config.types) + '.') : void 0;\n      !(!config.directives || Array.isArray(config.directives)) ? invariant(0, '\"directives\" must be Array if provided but got: ' + (String(config.directives) + '.')) : void 0;\n      !(!config.allowedLegacyNames || Array.isArray(config.allowedLegacyNames)) ? invariant(0, '\"allowedLegacyNames\" must be Array if provided but got: ' + (String(config.allowedLegacyNames) + '.')) : void 0;\n    }\n\n    this.__allowedLegacyNames = config.allowedLegacyNames;\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives = config.directives || specifiedDirectives;\n    this.astNode = config.astNode; // Build type map now to detect any errors within this schema.\n\n    var initialTypes = [this.getQueryType(), this.getMutationType(), this.getSubscriptionType(), __Schema];\n    var types = config.types;\n\n    if (types) {\n      initialTypes = initialTypes.concat(types);\n    } // Keep track of all types referenced within the schema.\n\n\n    var typeMap = Object.create(null); // First by deeply visiting all initial types.\n\n    typeMap = initialTypes.reduce(typeMapReducer, typeMap); // Then by deeply visiting all directive types.\n\n    typeMap = this._directives.reduce(typeMapDirectiveReducer, typeMap); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = typeMap; // Keep track of all implementations by interface name.\n\n    this._implementations = Object.create(null);\n    Object.keys(this._typeMap).forEach(function (typeName) {\n      var type = _this._typeMap[typeName];\n\n      if (isObjectType(type)) {\n        type.getInterfaces().forEach(function (iface) {\n          if (isInterfaceType(iface)) {\n            var impls = _this._implementations[iface.name];\n\n            if (impls) {\n              impls.push(type);\n            } else {\n              _this._implementations[iface.name] = [type];\n            }\n          }\n        });\n      }\n    });\n  } // Referenced by validateSchema().\n\n\n  GraphQLSchema.prototype.getQueryType = function getQueryType() {\n    return this._queryType;\n  };\n\n  GraphQLSchema.prototype.getMutationType = function getMutationType() {\n    return this._mutationType;\n  };\n\n  GraphQLSchema.prototype.getSubscriptionType = function getSubscriptionType() {\n    return this._subscriptionType;\n  };\n\n  GraphQLSchema.prototype.getTypeMap = function getTypeMap() {\n    return this._typeMap;\n  };\n\n  GraphQLSchema.prototype.getType = function getType(name) {\n    return this.getTypeMap()[name];\n  };\n\n  GraphQLSchema.prototype.getPossibleTypes = function getPossibleTypes(abstractType) {\n    if (isUnionType(abstractType)) {\n      return abstractType.getTypes();\n    }\n\n    return this._implementations[abstractType.name];\n  };\n\n  GraphQLSchema.prototype.isPossibleType = function isPossibleType(abstractType, possibleType) {\n    var possibleTypeMap = this._possibleTypeMap;\n\n    if (!possibleTypeMap) {\n      this._possibleTypeMap = possibleTypeMap = Object.create(null);\n    }\n\n    if (!possibleTypeMap[abstractType.name]) {\n      var possibleTypes = this.getPossibleTypes(abstractType);\n      !Array.isArray(possibleTypes) ? invariant(0, 'Could not find possible implementing types for ' + abstractType.name + ' ' + 'in schema. Check that schema.types is defined and is an array of ' + 'all possible types in the schema.') : void 0;\n      possibleTypeMap[abstractType.name] = possibleTypes.reduce(function (map, type) {\n        return map[type.name] = true, map;\n      }, Object.create(null));\n    }\n\n    return Boolean(possibleTypeMap[abstractType.name][possibleType.name]);\n  };\n\n  GraphQLSchema.prototype.getDirectives = function getDirectives() {\n    return this._directives;\n  };\n\n  GraphQLSchema.prototype.getDirective = function getDirective(name) {\n    return find(this.getDirectives(), function (directive) {\n      return directive.name === name;\n    });\n  };\n\n  return GraphQLSchema;\n}();\n\nfunction typeMapReducer(map, type) {\n  if (!type) {\n    return map;\n  }\n\n  if (isWrappingType(type)) {\n    return typeMapReducer(map, type.ofType);\n  }\n\n  if (map[type.name]) {\n    !(map[type.name] === type) ? invariant(0, 'Schema must contain unique named types but contains multiple ' + ('types named \"' + type.name + '\".')) : void 0;\n    return map;\n  }\n\n  map[type.name] = type;\n  var reducedMap = map;\n\n  if (isUnionType(type)) {\n    reducedMap = type.getTypes().reduce(typeMapReducer, reducedMap);\n  }\n\n  if (isObjectType(type)) {\n    reducedMap = type.getInterfaces().reduce(typeMapReducer, reducedMap);\n  }\n\n  if (isObjectType(type) || isInterfaceType(type)) {\n    objectValues(type.getFields()).forEach(function (field) {\n      if (field.args) {\n        var fieldArgTypes = field.args.map(function (arg) {\n          return arg.type;\n        });\n        reducedMap = fieldArgTypes.reduce(typeMapReducer, reducedMap);\n      }\n\n      reducedMap = typeMapReducer(reducedMap, field.type);\n    });\n  }\n\n  if (isInputObjectType(type)) {\n    objectValues(type.getFields()).forEach(function (field) {\n      reducedMap = typeMapReducer(reducedMap, field.type);\n    });\n  }\n\n  return reducedMap;\n}\n\nfunction typeMapDirectiveReducer(map, directive) {\n  // Directives are not validated until validateSchema() is called.\n  if (!isDirective(directive)) {\n    return map;\n  }\n\n  return directive.args.reduce(function (_map, arg) {\n    return typeMapReducer(_map, arg.type);\n  }, map);\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport { isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNonNullType, isNamedType, isInputType, isOutputType } from './definition';\nimport { isDirective } from './directives';\nimport { isIntrospectionType } from './introspection';\nimport { isSchema } from './schema';\nimport find from '../jsutils/find';\nimport invariant from '../jsutils/invariant';\nimport objectValues from '../jsutils/objectValues';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { isValidNameError } from '../utilities/assertValidName';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  !isSchema(schema) ? invariant(0, 'Expected ' + String(schema) + ' to be a GraphQL schema.') : void 0; // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n\n  var context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  var errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  var errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n\nvar SchemaValidationContext = function () {\n  function SchemaValidationContext(schema) {\n    _classCallCheck(this, SchemaValidationContext);\n\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  SchemaValidationContext.prototype.reportError = function reportError(message, nodes) {\n    var _nodes = (Array.isArray(nodes) ? nodes : [nodes]).filter(Boolean);\n\n    this.addError(new GraphQLError(message, _nodes));\n  };\n\n  SchemaValidationContext.prototype.addError = function addError(error) {\n    this._errors.push(error);\n  };\n\n  SchemaValidationContext.prototype.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  return SchemaValidationContext;\n}();\n\nfunction validateRootTypes(context) {\n  var schema = context.schema;\n  var queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    context.reportError('Query root type must be Object type, it cannot be ' + String(queryType) + '.', getOperationTypeNode(schema, queryType, 'query'));\n  }\n\n  var mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + (String(mutationType) + '.'), getOperationTypeNode(schema, mutationType, 'mutation'));\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + (String(subscriptionType) + '.'), getOperationTypeNode(schema, subscriptionType, 'subscription'));\n  }\n}\n\nfunction getOperationTypeNode(schema, type, operation) {\n  var astNode = schema.astNode;\n  var operationTypeNode = astNode && astNode.operationTypes.find(function (operationType) {\n    return operationType.operation === operation;\n  });\n  return operationTypeNode ? operationTypeNode.type : type && type.astNode;\n}\n\nfunction validateDirectives(context) {\n  var directives = context.schema.getDirectives();\n  directives.forEach(function (directive) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!isDirective(directive)) {\n      context.reportError('Expected directive but got: ' + String(directive) + '.', directive && directive.astNode);\n      return;\n    } // Ensure they are named correctly.\n\n\n    validateName(context, directive); // TODO: Ensure proper locations.\n    // Ensure the arguments are valid.\n\n    var argNames = Object.create(null);\n    directive.args.forEach(function (arg) {\n      var argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure they are unique per directive.\n\n      if (argNames[argName]) {\n        context.reportError('Argument @' + directive.name + '(' + argName + ':) can only be defined once.', getAllDirectiveArgNodes(directive, argName));\n        return; // continue loop\n      }\n\n      argNames[argName] = true; // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError('The type of @' + directive.name + '(' + argName + ':) must be Input Type ' + ('but got: ' + String(arg.type) + '.'), getDirectiveArgTypeNode(directive, argName));\n      }\n    });\n  });\n}\n\nfunction validateName(context, node) {\n  // If a schema explicitly allows some legacy name which is no longer valid,\n  // allow it to be assumed valid.\n  if (context.schema.__allowedLegacyNames && context.schema.__allowedLegacyNames.indexOf(node.name) !== -1) {\n    return;\n  } // Ensure names are valid, however introspection types opt out.\n\n\n  var error = isValidNameError(node.name, node.astNode || undefined);\n\n  if (error) {\n    context.addError(error);\n  }\n}\n\nfunction validateTypes(context) {\n  var typeMap = context.schema.getTypeMap();\n  objectValues(typeMap).forEach(function (type) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError('Expected GraphQL named type but got: ' + String(type) + '.', type && type.astNode);\n      return;\n    } // Ensure it is named correctly (excluding introspection types).\n\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateObjectInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type);\n    }\n  });\n}\n\nfunction validateFields(context, type) {\n  var fields = objectValues(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError('Type ' + type.name + ' must define one or more fields.', getAllObjectOrInterfaceNodes(type));\n  }\n\n  fields.forEach(function (field) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure they were defined at most once.\n\n    var fieldNodes = getAllFieldNodes(type, field.name);\n\n    if (fieldNodes.length > 1) {\n      context.reportError('Field ' + type.name + '.' + field.name + ' can only be defined once.', fieldNodes);\n      return; // continue loop\n    } // Ensure the type is an output type\n\n\n    if (!isOutputType(field.type)) {\n      context.reportError('The type of ' + type.name + '.' + field.name + ' must be Output Type ' + ('but got: ' + String(field.type) + '.'), getFieldTypeNode(type, field.name));\n    } // Ensure the arguments are valid\n\n\n    var argNames = Object.create(null);\n    field.args.forEach(function (arg) {\n      var argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure they are unique per field.\n\n      if (argNames[argName]) {\n        context.reportError('Field argument ' + type.name + '.' + field.name + '(' + argName + ':) can only ' + 'be defined once.', getAllFieldArgNodes(type, field.name, argName));\n      }\n\n      argNames[argName] = true; // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        context.reportError('The type of ' + type.name + '.' + field.name + '(' + argName + ':) must be Input ' + ('Type but got: ' + String(arg.type) + '.'), getFieldArgTypeNode(type, field.name, argName));\n      }\n    });\n  });\n}\n\nfunction validateObjectInterfaces(context, object) {\n  var implementedTypeNames = Object.create(null);\n  object.getInterfaces().forEach(function (iface) {\n    if (!isInterfaceType(iface)) {\n      context.reportError('Type ' + String(object) + ' must only implement Interface types, ' + ('it cannot implement ' + String(iface) + '.'), getImplementsInterfaceNode(object, iface));\n      return;\n    }\n\n    if (implementedTypeNames[iface.name]) {\n      context.reportError('Type ' + object.name + ' can only implement ' + iface.name + ' once.', getAllImplementsInterfaceNodes(object, iface));\n      return; // continue loop\n    }\n\n    implementedTypeNames[iface.name] = true;\n    validateObjectImplementsInterface(context, object, iface);\n  });\n}\n\nfunction validateObjectImplementsInterface(context, object, iface) {\n  var objectFieldMap = object.getFields();\n  var ifaceFieldMap = iface.getFields(); // Assert each interface field is implemented.\n\n  Object.keys(ifaceFieldMap).forEach(function (fieldName) {\n    var objectField = objectFieldMap[fieldName];\n    var ifaceField = ifaceFieldMap[fieldName]; // Assert interface field exists on object.\n\n    if (!objectField) {\n      context.reportError('Interface field ' + iface.name + '.' + fieldName + ' expected but ' + (object.name + ' does not provide it.'), [getFieldNode(iface, fieldName), object.astNode]); // Continue loop over fields.\n\n      return;\n    } // Assert interface field type is satisfied by object field type, by being\n    // a valid subtype. (covariant)\n\n\n    if (!isTypeSubTypeOf(context.schema, objectField.type, ifaceField.type)) {\n      context.reportError('Interface field ' + iface.name + '.' + fieldName + ' expects type ' + (String(ifaceField.type) + ' but ' + object.name + '.' + fieldName + ' ') + ('is type ' + String(objectField.type) + '.'), [getFieldTypeNode(iface, fieldName), getFieldTypeNode(object, fieldName)]);\n    } // Assert each interface field arg is implemented.\n\n\n    ifaceField.args.forEach(function (ifaceArg) {\n      var argName = ifaceArg.name;\n      var objectArg = find(objectField.args, function (arg) {\n        return arg.name === argName;\n      }); // Assert interface field arg exists on object field.\n\n      if (!objectArg) {\n        context.reportError('Interface field argument ' + iface.name + '.' + fieldName + '(' + argName + ':) ' + ('expected but ' + object.name + '.' + fieldName + ' does not provide it.'), [getFieldArgNode(iface, fieldName, argName), getFieldNode(object, fieldName)]); // Continue loop over arguments.\n\n        return;\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n\n      if (!isEqualType(ifaceArg.type, objectArg.type)) {\n        context.reportError('Interface field argument ' + iface.name + '.' + fieldName + '(' + argName + ':) ' + ('expects type ' + String(ifaceArg.type) + ' but ') + (object.name + '.' + fieldName + '(' + argName + ':) is type ') + (String(objectArg.type) + '.'), [getFieldArgTypeNode(iface, fieldName, argName), getFieldArgTypeNode(object, fieldName, argName)]);\n      } // TODO: validate default values?\n\n    }); // Assert additional arguments must not be required.\n\n    objectField.args.forEach(function (objectArg) {\n      var argName = objectArg.name;\n      var ifaceArg = find(ifaceField.args, function (arg) {\n        return arg.name === argName;\n      });\n\n      if (!ifaceArg && isNonNullType(objectArg.type)) {\n        context.reportError('Object field argument ' + object.name + '.' + fieldName + '(' + argName + ':) ' + ('is of required type ' + String(objectArg.type) + ' but is not also ') + ('provided by the Interface field ' + iface.name + '.' + fieldName + '.'), [getFieldArgTypeNode(object, fieldName, argName), getFieldNode(iface, fieldName)]);\n      }\n    });\n  });\n}\n\nfunction validateUnionMembers(context, union) {\n  var memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError('Union type ' + union.name + ' must define one or more member types.', union.astNode);\n  }\n\n  var includedTypeNames = Object.create(null);\n  memberTypes.forEach(function (memberType) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError('Union type ' + union.name + ' can only include type ' + (memberType.name + ' once.'), getUnionMemberTypeNodes(union, memberType.name));\n      return; // continue loop\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError('Union type ' + union.name + ' can only include Object types, ' + ('it cannot include ' + String(memberType) + '.'), getUnionMemberTypeNodes(union, String(memberType)));\n    }\n  });\n}\n\nfunction validateEnumValues(context, enumType) {\n  var enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError('Enum type ' + enumType.name + ' must define one or more values.', enumType.astNode);\n  }\n\n  enumValues.forEach(function (enumValue) {\n    var valueName = enumValue.name; // Ensure no duplicates.\n\n    var allNodes = getEnumValueNodes(enumType, valueName);\n\n    if (allNodes && allNodes.length > 1) {\n      context.reportError('Enum type ' + enumType.name + ' can include value ' + valueName + ' only once.', allNodes);\n    } // Ensure valid name.\n\n\n    validateName(context, enumValue);\n\n    if (valueName === 'true' || valueName === 'false' || valueName === 'null') {\n      context.reportError('Enum type ' + enumType.name + ' cannot include value: ' + valueName + '.', enumValue.astNode);\n    }\n  });\n}\n\nfunction validateInputFields(context, inputObj) {\n  var fields = objectValues(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError('Input Object type ' + inputObj.name + ' must define one or more fields.', inputObj.astNode);\n  } // Ensure the arguments are valid\n\n\n  fields.forEach(function (field) {\n    // Ensure they are named correctly.\n    validateName(context, field); // TODO: Ensure they are unique per field.\n    // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      context.reportError('The type of ' + inputObj.name + '.' + field.name + ' must be Input Type ' + ('but got: ' + String(field.type) + '.'), field.astNode && field.astNode.type);\n    }\n  });\n}\n\nfunction getAllObjectNodes(type) {\n  return type.astNode ? type.extensionASTNodes ? [type.astNode].concat(type.extensionASTNodes) : [type.astNode] : type.extensionASTNodes || [];\n}\n\nfunction getAllObjectOrInterfaceNodes(type) {\n  return type.astNode ? type.extensionASTNodes ? [type.astNode].concat(type.extensionASTNodes) : [type.astNode] : type.extensionASTNodes || [];\n}\n\nfunction getImplementsInterfaceNode(type, iface) {\n  return getAllImplementsInterfaceNodes(type, iface)[0];\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  var implementsNodes = [];\n  var astNodes = getAllObjectNodes(type);\n\n  for (var i = 0; i < astNodes.length; i++) {\n    var _astNode = astNodes[i];\n\n    if (_astNode && _astNode.interfaces) {\n      _astNode.interfaces.forEach(function (node) {\n        if (node.name.value === iface.name) {\n          implementsNodes.push(node);\n        }\n      });\n    }\n  }\n\n  return implementsNodes;\n}\n\nfunction getFieldNode(type, fieldName) {\n  return getAllFieldNodes(type, fieldName)[0];\n}\n\nfunction getAllFieldNodes(type, fieldName) {\n  var fieldNodes = [];\n  var astNodes = getAllObjectOrInterfaceNodes(type);\n\n  for (var i = 0; i < astNodes.length; i++) {\n    var _astNode2 = astNodes[i];\n\n    if (_astNode2 && _astNode2.fields) {\n      _astNode2.fields.forEach(function (node) {\n        if (node.name.value === fieldName) {\n          fieldNodes.push(node);\n        }\n      });\n    }\n  }\n\n  return fieldNodes;\n}\n\nfunction getFieldTypeNode(type, fieldName) {\n  var fieldNode = getFieldNode(type, fieldName);\n  return fieldNode && fieldNode.type;\n}\n\nfunction getFieldArgNode(type, fieldName, argName) {\n  return getAllFieldArgNodes(type, fieldName, argName)[0];\n}\n\nfunction getAllFieldArgNodes(type, fieldName, argName) {\n  var argNodes = [];\n  var fieldNode = getFieldNode(type, fieldName);\n\n  if (fieldNode && fieldNode.arguments) {\n    fieldNode.arguments.forEach(function (node) {\n      if (node.name.value === argName) {\n        argNodes.push(node);\n      }\n    });\n  }\n\n  return argNodes;\n}\n\nfunction getFieldArgTypeNode(type, fieldName, argName) {\n  var fieldArgNode = getFieldArgNode(type, fieldName, argName);\n  return fieldArgNode && fieldArgNode.type;\n}\n\nfunction getAllDirectiveArgNodes(directive, argName) {\n  var argNodes = [];\n  var directiveNode = directive.astNode;\n\n  if (directiveNode && directiveNode.arguments) {\n    directiveNode.arguments.forEach(function (node) {\n      if (node.name.value === argName) {\n        argNodes.push(node);\n      }\n    });\n  }\n\n  return argNodes;\n}\n\nfunction getDirectiveArgTypeNode(directive, argName) {\n  var argNode = getAllDirectiveArgNodes(directive, argName)[0];\n  return argNode && argNode.type;\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  return union.astNode && union.astNode.types && union.astNode.types.filter(function (type) {\n    return type.name.value === typeName;\n  });\n}\n\nfunction getEnumValueNodes(enumType, valueName) {\n  return enumType.astNode && enumType.astNode.values && enumType.astNode.values.filter(function (value) {\n    return value.name.value === valueName;\n  });\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType = void 0;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error('Unexpected type kind: ' + typeNode.kind + '.');\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport { Kind } from '../language/kinds';\nimport { isObjectType, isInterfaceType, isEnumType, isInputObjectType, isListType, isCompositeType, isInputType, isOutputType, getNullableType, getNamedType } from '../type/definition';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { typeFromAST } from './typeFromAST';\nimport find from '../jsutils/find';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport var TypeInfo = function () {\n  function TypeInfo(schema, // NOTE: this experimental optional second parameter is only needed in order\n  // to support non-spec-compliant codebases. You should never need to use it.\n  getFieldDefFn, // Initial type may be provided in rare cases to facilitate traversals\n  initialType) {\n    _classCallCheck(this, TypeInfo);\n\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef = getFieldDefFn || getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  TypeInfo.prototype.getType = function getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getParentType = function getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getInputType = function getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getParentInputType = function getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  };\n\n  TypeInfo.prototype.getFieldDef = function getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getDirective = function getDirective() {\n    return this._directive;\n  };\n\n  TypeInfo.prototype.getArgument = function getArgument() {\n    return this._argument;\n  };\n\n  TypeInfo.prototype.getEnumValue = function getEnumValue() {\n    return this._enumValue;\n  }; // Flow does not yet handle this case.\n\n\n  TypeInfo.prototype.enter = function enter(node\n  /* ASTNode */\n  ) {\n    var schema = this._schema; // Note: many of the types below are explicitly typed as \"mixed\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        var namedType = getNamedType(this.getType());\n\n        this._parentTypeStack.push(isCompositeType(namedType) ? namedType : undefined);\n\n        break;\n\n      case Kind.FIELD:\n        var parentType = this.getParentType();\n        var fieldDef = void 0;\n        var fieldType = void 0;\n\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n\n        this._fieldDefStack.push(fieldDef);\n\n        this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n        var type = void 0;\n\n        if (node.operation === 'query') {\n          type = schema.getQueryType();\n        } else if (node.operation === 'mutation') {\n          type = schema.getMutationType();\n        } else if (node.operation === 'subscription') {\n          type = schema.getSubscriptionType();\n        }\n\n        this._typeStack.push(isObjectType(type) ? type : undefined);\n\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        var typeConditionAST = node.typeCondition;\n        var outputType = typeConditionAST ? typeFromAST(schema, typeConditionAST) : getNamedType(this.getType());\n\n        this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        var inputType = typeFromAST(schema, node.type);\n\n        this._inputTypeStack.push(isInputType(inputType) ? inputType : undefined);\n\n        break;\n\n      case Kind.ARGUMENT:\n        var argDef = void 0;\n        var argType = void 0;\n        var fieldOrDirective = this.getDirective() || this.getFieldDef();\n\n        if (fieldOrDirective) {\n          argDef = find(fieldOrDirective.args, function (arg) {\n            return arg.name === node.name.value;\n          });\n\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n\n        this._argument = argDef;\n\n        this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n        break;\n\n      case Kind.LIST:\n        var listType = getNullableType(this.getInputType());\n        var itemType = isListType(listType) ? listType.ofType : listType;\n\n        this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n        break;\n\n      case Kind.OBJECT_FIELD:\n        var objectType = getNamedType(this.getInputType());\n        var inputFieldType = void 0;\n\n        if (isInputObjectType(objectType)) {\n          var inputField = objectType.getFields()[node.name.value];\n\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n\n        this._inputTypeStack.push(isInputType(inputFieldType) ? inputFieldType : undefined);\n\n        break;\n\n      case Kind.ENUM:\n        var enumType = getNamedType(this.getInputType());\n        var enumValue = void 0;\n\n        if (isEnumType(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n\n        this._enumValue = enumValue;\n        break;\n    }\n  };\n\n  TypeInfo.prototype.leave = function leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n    }\n  };\n\n  return TypeInfo;\n}();\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  var name = fieldNode.name.value;\n\n  if (name === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}","/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n *\n *     const phoneBook = [\n *       { name: 'Jon', num: '555-1234' },\n *       { name: 'Jenny', num: '867-5309' }\n *     ]\n *\n *     // { Jon: { name: 'Jon', num: '555-1234' },\n *     //   Jenny: { name: 'Jenny', num: '867-5309' } }\n *     const entriesByName = keyMap(\n *       phoneBook,\n *       entry => entry.name\n *     )\n *\n *     // { name: 'Jenny', num: '857-6309' }\n *     const jennyEntry = entriesByName['Jenny']\n *\n */\nexport default function keyMap(list, keyFn) {\n  return list.reduce(function (map, item) {\n    return map[keyFn(item)] = item, map;\n  }, Object.create(null));\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nimport find from '../../jsutils/find';\nimport { Kind } from '../../language/kinds';\nimport { print } from '../../language/printer';\nimport { getNamedType, isNonNullType, isLeafType, isObjectType, isListType, isInterfaceType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function fieldsConflictMessage(responseName, reason) {\n  return 'Fields \"' + responseName + '\" conflict because ' + reasonMessage(reason) + '. Use different aliases on the fields to fetch both if this was ' + 'intentional.';\n}\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n          subreason = _ref[1];\n      return 'subfields \"' + responseName + '\" conflict because ' + reasonMessage(subreason);\n    }).join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\n\n\nexport function OverlappingFieldsCanBeMerged(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  var cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n      conflicts.forEach(function (_ref2) {\n        var _ref2$ = _ref2[0],\n            responseName = _ref2$[0],\n            reason = _ref2$[1],\n            fields1 = _ref2[1],\n            fields2 = _ref2[2];\n        return context.reportError(new GraphQLError(fieldsConflictMessage(responseName, reason), fields1.concat(fields2)));\n      });\n    }\n  };\n} // Field name and reason.\n// Reason is a string, or a nested list of conflicts.\n// Tuple defining a field node in a context.\n// Map of array of those.\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\n\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n      fieldMap = _getFieldsAndFragment[0],\n      fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    var comparedFragments = Object.create(null);\n\n    for (var i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (var j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  // Memoize so a fragment is not compared for conflicts more than once.\n  if (comparedFragments[fragmentName]) {\n    return;\n  }\n\n  comparedFragments[fragmentName] = true;\n  var fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n      fieldMap2 = _getReferencedFieldsA[0],\n      fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.\n\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n      fieldMap1 = _getReferencedFieldsA2[0],\n      fragmentNames1 = _getReferencedFieldsA2[1];\n\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n      fieldMap2 = _getReferencedFieldsA3[0],\n      fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n      fieldMap1 = _getFieldsAndFragment2[0],\n      fragmentNames1 = _getFieldsAndFragment2[1];\n\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n      fieldMap2 = _getFieldsAndFragment3[0],\n      fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  if (fragmentNames2.length !== 0) {\n    var comparedFragments = Object.create(null);\n\n    for (var j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n    }\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n\n  if (fragmentNames1.length !== 0) {\n    var _comparedFragments = Object.create(null);\n\n    for (var i = 0; i < fragmentNames1.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, _comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n    }\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n\n  for (var _i = 0; _i < fragmentNames1.length; _i++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i], fragmentNames2[_j]);\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  Object.keys(fieldMap).forEach(function (responseName) {\n    var fields = fieldMap[responseName]; // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n\n    if (fields.length > 1) {\n      for (var i = 0; i < fields.length; i++) {\n        for (var j = i + 1; j < fields.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  });\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  Object.keys(fieldMap1).forEach(function (responseName) {\n    var fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  });\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n      node1 = field1[1],\n      def1 = field1[2];\n  var parentType2 = field2[0],\n      node2 = field2[1],\n      def2 = field2[2]; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2); // The return type for each field.\n\n  var type1 = def1 && def1.type;\n  var type2 = def2 && def2.type;\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [[responseName, name1 + ' and ' + name2 + ' are different fields'], [node1], [node2]];\n    } // Two field calls must have the same arguments.\n\n\n    if (!sameArguments(node1.arguments || [], node2.arguments || [])) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  }\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, 'they return conflicting types ' + String(type1) + ' and ' + String(type2)], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n\n  return arguments1.every(function (argument1) {\n    var argument2 = find(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n\n    if (!argument2) {\n      return false;\n    }\n\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return !value1 && !value2 || print(value1) === print(value2);\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n\n  return cached;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  var fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        var fieldName = selection.name.value;\n        var fieldDef = void 0;\n\n        if (isObjectType(parentType) || isInterfaceType(parentType)) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n\n        var responseName = selection.alias ? selection.alias.value : fieldName;\n\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        var typeCondition = selection.typeCondition;\n        var inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;\n\n        _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n\n        break;\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref3) {\n      var reason = _ref3[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref4) {\n      var fields1 = _ref4[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref5) {\n      var fields2 = _ref5[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\n\nvar PairSet = function () {\n  function PairSet() {\n    _classCallCheck(this, PairSet);\n\n    this._data = Object.create(null);\n  }\n\n  PairSet.prototype.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n\n\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n\n    return true;\n  };\n\n  PairSet.prototype.add = function add(a, b, areMutuallyExclusive) {\n    _pairSetAdd(this._data, a, b, areMutuallyExclusive);\n\n    _pairSetAdd(this._data, b, a, areMutuallyExclusive);\n  };\n\n  return PairSet;\n}();\n\nfunction _pairSetAdd(data, a, b, areMutuallyExclusive) {\n  var map = data[a];\n\n  if (!map) {\n    map = Object.create(null);\n    data[a] = map;\n  }\n\n  map[b] = areMutuallyExclusive;\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport { GraphQLError } from '../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nimport { visit, visitWithTypeInfo } from '../language/visitor';\nimport { Kind } from '../language/kinds';\nimport { GraphQLSchema } from '../type/schema';\nimport { TypeInfo } from '../utilities/TypeInfo';\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\n\nvar ValidationContext = function () {\n  function ValidationContext(schema, ast, typeInfo) {\n    _classCallCheck(this, ValidationContext);\n\n    this._schema = schema;\n    this._ast = ast;\n    this._typeInfo = typeInfo;\n    this._errors = [];\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  ValidationContext.prototype.reportError = function reportError(error) {\n    this._errors.push(error);\n  };\n\n  ValidationContext.prototype.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  ValidationContext.prototype.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  ValidationContext.prototype.getDocument = function getDocument() {\n    return this._ast;\n  };\n\n  ValidationContext.prototype.getFragment = function getFragment(name) {\n    var fragments = this._fragments;\n\n    if (!fragments) {\n      this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {\n        if (statement.kind === Kind.FRAGMENT_DEFINITION) {\n          frags[statement.name.value] = statement;\n        }\n\n        return frags;\n      }, Object.create(null));\n    }\n\n    return fragments[name];\n  };\n\n  ValidationContext.prototype.getFragmentSpreads = function getFragmentSpreads(node) {\n    var spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      var setsToVisit = [node];\n\n      while (setsToVisit.length !== 0) {\n        var set = setsToVisit.pop();\n\n        for (var i = 0; i < set.selections.length; i++) {\n          var selection = set.selections[i];\n\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  };\n\n  ValidationContext.prototype.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {\n    var fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      var collectedNames = Object.create(null);\n      var nodesToVisit = [operation.selectionSet];\n\n      while (nodesToVisit.length !== 0) {\n        var _node = nodesToVisit.pop();\n\n        var spreads = this.getFragmentSpreads(_node);\n\n        for (var i = 0; i < spreads.length; i++) {\n          var fragName = spreads[i].name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            var fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  };\n\n  ValidationContext.prototype.getVariableUsages = function getVariableUsages(node) {\n    var usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      var newUsages = [];\n      var typeInfo = new TypeInfo(this._schema);\n      visit(node, visitWithTypeInfo(typeInfo, {\n        VariableDefinition: function VariableDefinition() {\n          return false;\n        },\n        Variable: function Variable(variable) {\n          newUsages.push({\n            node: variable,\n            type: typeInfo.getInputType()\n          });\n        }\n      }));\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  };\n\n  ValidationContext.prototype.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {\n    var usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n      var fragments = this.getRecursivelyReferencedFragments(operation);\n\n      for (var i = 0; i < fragments.length; i++) {\n        Array.prototype.push.apply(usages, this.getVariableUsages(fragments[i]));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  };\n\n  ValidationContext.prototype.getType = function getType() {\n    return this._typeInfo.getType();\n  };\n\n  ValidationContext.prototype.getParentType = function getParentType() {\n    return this._typeInfo.getParentType();\n  };\n\n  ValidationContext.prototype.getInputType = function getInputType() {\n    return this._typeInfo.getInputType();\n  };\n\n  ValidationContext.prototype.getParentInputType = function getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  };\n\n  ValidationContext.prototype.getFieldDef = function getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  };\n\n  ValidationContext.prototype.getDirective = function getDirective() {\n    return this._typeInfo.getDirective();\n  };\n\n  ValidationContext.prototype.getArgument = function getArgument() {\n    return this._typeInfo.getArgument();\n  };\n\n  return ValidationContext;\n}();\n\nexport default ValidationContext;","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport { forEach, isCollection } from 'iterall';\nimport isInvalid from '../jsutils/isInvalid';\nimport isNullish from '../jsutils/isNullish';\nimport orList from '../jsutils/orList';\nimport suggestionList from '../jsutils/suggestionList';\nimport { GraphQLError } from '../error';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n/**\n * Coerces a JavaScript value given a GraphQL Type.\n *\n * Returns either a value which is valid for the provided type or a list of\n * encountered coercion errors.\n *\n */\n\nexport function coerceValue(value, type, blameNode, path) {\n  // A value must be provided if the type is non-null.\n  if (isNonNullType(type)) {\n    if (isNullish(value)) {\n      return ofErrors([coercionError('Expected non-nullable type ' + String(type) + ' not to be null', blameNode, path)]);\n    }\n\n    return coerceValue(value, type.ofType, blameNode, path);\n  }\n\n  if (isNullish(value)) {\n    // Explicitly return the value null.\n    return ofValue(null);\n  }\n\n  if (isScalarType(type)) {\n    // Scalars determine if a value is valid via parseValue(), which can\n    // throw to indicate failure. If it throws, maintain a reference to\n    // the original error.\n    try {\n      var parseResult = type.parseValue(value);\n\n      if (isInvalid(parseResult)) {\n        return ofErrors([coercionError('Expected type ' + type.name, blameNode, path)]);\n      }\n\n      return ofValue(parseResult);\n    } catch (error) {\n      return ofErrors([coercionError('Expected type ' + type.name, blameNode, path, error.message, error)]);\n    }\n  }\n\n  if (isEnumType(type)) {\n    if (typeof value === 'string') {\n      var enumValue = type.getValue(value);\n\n      if (enumValue) {\n        return ofValue(enumValue.value);\n      }\n    }\n\n    var suggestions = suggestionList(String(value), type.getValues().map(function (enumValue) {\n      return enumValue.name;\n    }));\n    var didYouMean = suggestions.length !== 0 ? 'did you mean ' + orList(suggestions) + '?' : undefined;\n    return ofErrors([coercionError('Expected type ' + type.name, blameNode, path, didYouMean)]);\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(value)) {\n      var _errors = void 0;\n\n      var coercedValue = [];\n      forEach(value, function (itemValue, index) {\n        var coercedItem = coerceValue(itemValue, itemType, blameNode, atPath(path, index));\n\n        if (coercedItem.errors) {\n          _errors = add(_errors, coercedItem.errors);\n        } else if (!_errors) {\n          coercedValue.push(coercedItem.value);\n        }\n      });\n      return _errors ? ofErrors(_errors) : ofValue(coercedValue);\n    } // Lists accept a non-list value as a list of one.\n\n\n    var coercedItem = coerceValue(value, itemType, blameNode);\n    return coercedItem.errors ? coercedItem : ofValue([coercedItem.value]);\n  }\n\n  if (isInputObjectType(type)) {\n    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {\n      return ofErrors([coercionError('Expected type ' + type.name + ' to be an object', blameNode, path)]);\n    }\n\n    var _errors2 = void 0;\n\n    var _coercedValue = {};\n    var fields = type.getFields(); // Ensure every defined field is valid.\n\n    for (var fieldName in fields) {\n      if (hasOwnProperty.call(fields, fieldName)) {\n        var field = fields[fieldName];\n        var fieldValue = value[fieldName];\n\n        if (isInvalid(fieldValue)) {\n          if (!isInvalid(field.defaultValue)) {\n            _coercedValue[fieldName] = field.defaultValue;\n          } else if (isNonNullType(field.type)) {\n            _errors2 = add(_errors2, coercionError('Field ' + printPath(atPath(path, fieldName)) + ' of required ' + ('type ' + String(field.type) + ' was not provided'), blameNode));\n          }\n        } else {\n          var coercedField = coerceValue(fieldValue, field.type, blameNode, atPath(path, fieldName));\n\n          if (coercedField.errors) {\n            _errors2 = add(_errors2, coercedField.errors);\n          } else if (!_errors2) {\n            _coercedValue[fieldName] = coercedField.value;\n          }\n        }\n      }\n    } // Ensure every provided field is defined.\n\n\n    for (var _fieldName in value) {\n      if (hasOwnProperty.call(value, _fieldName)) {\n        if (!fields[_fieldName]) {\n          var _suggestions = suggestionList(_fieldName, Object.keys(fields));\n\n          var _didYouMean = _suggestions.length !== 0 ? 'did you mean ' + orList(_suggestions) + '?' : undefined;\n\n          _errors2 = add(_errors2, coercionError('Field \"' + _fieldName + '\" is not defined by type ' + type.name, blameNode, path, _didYouMean));\n        }\n      }\n    }\n\n    return _errors2 ? ofErrors(_errors2) : ofValue(_coercedValue);\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error('Unexpected type: ' + type + '.');\n}\n\nfunction ofValue(value) {\n  return {\n    errors: undefined,\n    value: value\n  };\n}\n\nfunction ofErrors(errors) {\n  return {\n    errors: errors,\n    value: undefined\n  };\n}\n\nfunction add(errors, moreErrors) {\n  return (errors || []).concat(moreErrors);\n}\n\nfunction atPath(prev, key) {\n  return {\n    prev: prev,\n    key: key\n  };\n}\n\nfunction coercionError(message, blameNode, path, subMessage, originalError) {\n  var pathStr = printPath(path); // Return a GraphQLError instance\n\n  return new GraphQLError(message + (pathStr ? ' at ' + pathStr : '') + (subMessage ? '; ' + subMessage : '.'), blameNode, undefined, undefined, undefined, originalError);\n} // Build a string describing the path into the value where the error was found\n\n\nfunction printPath(path) {\n  var pathStr = '';\n  var currentPath = path;\n\n  while (currentPath) {\n    pathStr = (typeof currentPath.key === 'string' ? '.' + currentPath.key : '[' + String(currentPath.key) + ']') + pathStr;\n    currentPath = currentPath.prev;\n  }\n\n  return pathStr ? 'value' + pathStr : '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport keyMap from '../jsutils/keyMap';\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { Kind } from '../language/kinds';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n\n    if (!variables || isInvalid(variables[variableName])) {\n      // No valid return value.\n      return;\n    } // Note: we're not doing any checking that this variable is correct. We're\n    // assuming that this query has been validated and the variable usage here\n    // is of the correct type.\n\n\n    return variables[variableName];\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n      var itemNodes = valueNode.values;\n\n      for (var i = 0; i < itemNodes.length; i++) {\n        if (isMissingVariable(itemNodes[i], variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNodes[i], itemType, variables);\n\n          if (isInvalid(itemValue)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (isInvalid(coercedValue)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fieldNodes = keyMap(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n    var fields = objectValues(type.getFields());\n\n    for (var _i = 0; _i < fields.length; _i++) {\n      var field = fields[_i];\n      var fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (!isInvalid(field.defaultValue)) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (isInvalid(fieldValue)) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (isEnumType(type)) {\n    if (valueNode.kind !== Kind.ENUM) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var enumValue = type.getValue(valueNode.value);\n\n    if (!enumValue) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return enumValue.value;\n  }\n\n  if (isScalarType(type)) {\n    // Scalars fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result = void 0;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (isInvalid(result)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error('Unknown type: ' + type + '.');\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (!variables || isInvalid(variables[valueNode.name.value]));\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../error';\nimport find from '../jsutils/find';\nimport isInvalid from '../jsutils/isInvalid';\nimport keyMap from '../jsutils/keyMap';\nimport { coerceValue } from '../utilities/coerceValue';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { valueFromAST } from '../utilities/valueFromAST';\nimport { Kind } from '../language/kinds';\nimport { print } from '../language/printer';\nimport { isInputType, isNonNullType } from '../type/definition';\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getVariableValues(schema, varDefNodes, inputs) {\n  var errors = [];\n  var coercedValues = {};\n\n  for (var i = 0; i < varDefNodes.length; i++) {\n    var varDefNode = varDefNodes[i];\n    var varName = varDefNode.variable.name.value;\n    var varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      errors.push(new GraphQLError('Variable \"$' + varName + '\" expected value of type ' + ('\"' + print(varDefNode.type) + '\" which cannot be used as an input type.'), [varDefNode.type]));\n    } else {\n      var value = inputs[varName];\n\n      if (isInvalid(value)) {\n        if (isNonNullType(varType)) {\n          errors.push(new GraphQLError('Variable \"$' + varName + '\" of required type ' + ('\"' + String(varType) + '\" was not provided.'), [varDefNode]));\n        } else if (varDefNode.defaultValue) {\n          coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n        }\n      } else {\n        var _coerced = coerceValue(value, varType, varDefNode);\n\n        var coercionErrors = _coerced.errors;\n\n        if (coercionErrors) {\n          (function () {\n            var messagePrelude = 'Variable \"$' + varName + '\" got invalid value ' + JSON.stringify(value) + '; ';\n            coercionErrors.forEach(function (error) {\n              error.message = messagePrelude + error.message;\n            });\n            errors.push.apply(errors, coercionErrors);\n          })();\n        } else {\n          coercedValues[varName] = _coerced.value;\n        }\n      }\n    }\n  }\n\n  return errors.length === 0 ? {\n    errors: undefined,\n    coerced: coercedValues\n  } : {\n    errors: errors,\n    coerced: undefined\n  };\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getArgumentValues(def, node, variableValues) {\n  var coercedValues = {};\n  var argDefs = def.args;\n  var argNodes = node.arguments;\n\n  if (!argDefs || !argNodes) {\n    return coercedValues;\n  }\n\n  var argNodeMap = keyMap(argNodes, function (arg) {\n    return arg.name.value;\n  });\n\n  for (var i = 0; i < argDefs.length; i++) {\n    var argDef = argDefs[i];\n    var name = argDef.name;\n    var argType = argDef.type;\n    var argumentNode = argNodeMap[name];\n    var defaultValue = argDef.defaultValue;\n\n    if (!argumentNode) {\n      if (!isInvalid(defaultValue)) {\n        coercedValues[name] = defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError('Argument \"' + name + '\" of required type ' + ('\"' + String(argType) + '\" was not provided.'), [node]);\n      }\n    } else if (argumentNode.value.kind === Kind.VARIABLE) {\n      var variableName = argumentNode.value.name.value;\n\n      if (variableValues && Object.prototype.hasOwnProperty.call(variableValues, variableName) && !isInvalid(variableValues[variableName])) {\n        // Note: this does not check that this variable value is correct.\n        // This assumes that this query has been validated and the variable\n        // usage here is of the correct type.\n        coercedValues[name] = variableValues[variableName];\n      } else if (!isInvalid(defaultValue)) {\n        coercedValues[name] = defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError('Argument \"' + name + '\" of required type \"' + String(argType) + '\" was ' + ('provided the variable \"$' + variableName + '\" which was not provided ') + 'a runtime value.', [argumentNode.value]);\n      }\n    } else {\n      var valueNode = argumentNode.value;\n      var coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n      if (isInvalid(coercedValue)) {\n        // Note: ValuesOfCorrectType validation should catch this before\n        // execution. This is a runtime check to ensure execution does not\n        // continue with an invalid argument value.\n        throw new GraphQLError('Argument \"' + name + '\" has invalid value ' + print(valueNode) + '.', [argumentNode.value]);\n      }\n\n      coercedValues[name] = coercedValue;\n    }\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var directiveNode = node.directives && find(node.directives, function (directive) {\n    return directive.name.value === directiveDef.name;\n  });\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport { forEach, isCollection } from 'iterall';\nimport { GraphQLError, locatedError } from '../error';\nimport invariant from '../jsutils/invariant';\nimport isInvalid from '../jsutils/isInvalid';\nimport isNullish from '../jsutils/isNullish';\nimport isPromise from '../jsutils/isPromise';\nimport memoize3 from '../jsutils/memoize3';\nimport promiseForObject from '../jsutils/promiseForObject';\nimport promiseReduce from '../jsutils/promiseReduce';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { Kind } from '../language/kinds';\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from './values';\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from '../type/definition';\nimport { GraphQLSchema } from '../type/schema';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from '../type/directives';\nimport { assertValidSchema } from '../type/validate';\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * The result of GraphQL execution.\n *\n *   - `errors` is included when any errors occurred as a non-empty array.\n *   - `data` is the result of a successful execution of the query.\n */\n\n/**\n * Implements the \"Evaluating requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var context = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(context)) {\n    return {\n      errors: context\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  var data = executeOperation(context, context.operation, rootValue);\n  return buildResponse(context, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\n\nfunction buildResponse(context, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(context, resolved);\n    });\n  }\n\n  return context.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: context.errors,\n    data: data\n  };\n}\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\n\n\nexport function responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\n\nexport function addPath(prev, key) {\n  return {\n    prev: prev,\n    key: key\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !document ? invariant(0, 'Must provide document') : void 0; // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  !(!rawVariableValues || (typeof rawVariableValues === 'undefined' ? 'undefined' : _typeof(rawVariableValues)) === 'object') ? invariant(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation = void 0;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n\n  for (var i = 0; i < document.definitions.length; i++) {\n    var definition = document.definitions[i];\n\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName) {\n      errors.push(new GraphQLError('Unknown operation named \"' + operationName + '\".'));\n    } else {\n      errors.push(new GraphQLError('Must provide an operation.'));\n    }\n  } else if (hasMultipleAssumedOperations) {\n    errors.push(new GraphQLError('Must provide operation name if query contains ' + 'multiple operations.'));\n  }\n\n  var variableValues = void 0;\n\n  if (operation) {\n    var coercedVariableValues = getVariableValues(schema, operation.variableDefinitions || [], rawVariableValues || {});\n\n    if (coercedVariableValues.errors) {\n      errors.push.apply(errors, coercedVariableValues.errors);\n    } else {\n      variableValues = coercedVariableValues.coerced;\n    }\n  }\n\n  if (errors.length !== 0) {\n    return errors;\n  }\n\n  !operation ? invariant(0, 'Has operation if no errors.') : void 0;\n  !variableValues ? invariant(0, 'Has variables if no errors.') : void 0;\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Extracts the root type of the operation from the schema.\n */\n\n\nexport function getOperationRootType(schema, operation) {\n  switch (operation.operation) {\n    case 'query':\n      var queryType = schema.getQueryType();\n\n      if (!queryType) {\n        throw new GraphQLError('Schema does not define the required query root type.', [operation]);\n      }\n\n      return queryType;\n\n    case 'mutation':\n      var mutationType = schema.getMutationType();\n\n      if (!mutationType) {\n        throw new GraphQLError('Schema is not configured for mutations.', [operation]);\n      }\n\n      return mutationType;\n\n    case 'subscription':\n      var subscriptionType = schema.getSubscriptionType();\n\n      if (!subscriptionType) {\n        throw new GraphQLError('Schema is not configured for subscriptions.', [operation]);\n      }\n\n      return subscriptionType;\n\n    default:\n      throw new GraphQLError('Can only execute queries, mutations and subscriptions.', [operation]);\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var containsPromise = false;\n  var finalResults = Object.keys(fields).reduce(function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    results[responseName] = result;\n\n    if (!containsPromise && isPromise(result)) {\n      containsPromise = true;\n    }\n\n    return results;\n  }, Object.create(null)); // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return finalResults;\n  } // Otherwise, results is a map from field name to the result\n  // of resolving that field, which is possibly a promise. Return\n  // a promise that will return this same map, but with any\n  // promises replaced with the values they resolved to.\n\n\n  return promiseForObject(finalResults);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\n\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        var name = getFieldEntryKey(selection);\n\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n\n        fields[name].push(selection);\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n\n      case Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precidence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if (include && include.if === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldNodes[0].name.value,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n} // Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\n\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var context = exeContext.contextValue;\n    var result = resolveFn(source, args, context, info);\n    return isPromise(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n} // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\n\nfunction asErrorInstance(error) {\n  return error instanceof Error ? error : new Error(error || undefined);\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  try {\n    var completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n\n    if (isPromise(completed)) {\n      // If `completeValueWithLocatedError` returned a rejected promise, log\n      // the rejection error and resolve to null.\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    // If `completeValueWithLocatedError` returned abruptly (threw an error),\n    // log the error and return null.\n    exeContext.errors.push(error);\n    return null;\n  }\n} // This is a small wrapper around completeValue which annotates errors with\n// location information.\n\n\nfunction completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n\n    if (isPromise(completed)) {\n      return completed.then(undefined, function (error) {\n        return Promise.reject(locatedError(asErrorInstance(error), fieldNodes, responsePathAsArray(path)));\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    throw locatedError(asErrorInstance(error), fieldNodes, responsePathAsArray(path));\n  }\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is a Promise, apply-lift over completeValue.\n  if (isPromise(result)) {\n    return result.then(function (resolved) {\n      return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n    });\n  } // If result is an Error, throw a located error.\n\n\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error('Cannot return null for non-nullable field ' + info.parentType.name + '.' + info.fieldName + '.');\n    }\n\n    return completed;\n  } // If result value is null-ish (null, undefined, or NaN) then return null.\n\n\n  if (isNullish(result)) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // Not reachable. All possible output types have been considered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error('Cannot complete value of unexpected type \"' + String(returnType) + '\".');\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !isCollection(result) ? invariant(0, 'Expected Iterable, but did not find one for field ' + info.parentType.name + '.' + info.fieldName + '.') : void 0; // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  forEach(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && isPromise(completedItem)) {\n      containsPromise = true;\n    }\n\n    completedResults.push(completedItem);\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? invariant(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n\n  if (isInvalid(serializedResult)) {\n    throw new Error('Expected a value of type \"' + String(returnType) + '\" but ' + ('received: ' + String(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError('Abstract type ' + returnType.name + ' must resolve to an Object type at ' + ('runtime for field ' + info.parentType.name + '.' + info.fieldName + ' with ') + ('value \"' + String(result) + '\", received \"' + String(runtimeType) + '\". ') + ('Either the ' + returnType.name + ' type should provide a \"resolveType\" ') + 'function or each possible types should provide an ' + '\"isTypeOf\" function.', fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new GraphQLError('Runtime Object type \"' + runtimeType.name + '\" is not a possible type ' + ('for \"' + returnType.name + '\".'), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError('Expected value of type \"' + returnType.name + '\" but got: ' + String(result) + '.', fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields in the context of the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\n\nvar collectSubfields = memoize3(_collectSubfields);\n\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nfunction defaultResolveTypeFn(value, context, info, abstractType) {\n  // First, look for `__typename`.\n  if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, context, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context.\n */\n\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, context, info) {\n  // ensure source is a value for which property access is acceptable.\n  if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, context, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type defintion.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}","/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Memoizes the provided three-argument function.\n */\nexport default function memoize3(fn) {\n  var cache0 = void 0;\n\n  function memoized(a1, a2, a3) {\n    if (!cache0) {\n      cache0 = new WeakMap();\n    }\n\n    var cache1 = cache0.get(a1);\n    var cache2 = void 0;\n\n    if (cache1) {\n      cache2 = cache1.get(a2);\n\n      if (cache2) {\n        var cachedValue = cache2.get(a3);\n\n        if (cachedValue !== undefined) {\n          return cachedValue;\n        }\n      }\n    } else {\n      cache1 = new WeakMap();\n      cache0.set(a1, cache1);\n    }\n\n    if (!cache2) {\n      cache2 = new WeakMap();\n      cache1.set(a2, cache2);\n    }\n\n    var newValue = fn.apply(this, arguments);\n    cache2.set(a3, newValue);\n    return newValue;\n  }\n\n  return memoized;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport function getIntrospectionQuery(options) {\n  var descriptions = !(options && options.descriptions === false);\n  return '\\n    query IntrospectionQuery {\\n      __schema {\\n        queryType { name }\\n        mutationType { name }\\n        subscriptionType { name }\\n        types {\\n          ...FullType\\n        }\\n        directives {\\n          name\\n          ' + (descriptions ? 'description' : '') + '\\n          locations\\n          args {\\n            ...InputValue\\n          }\\n        }\\n      }\\n    }\\n\\n    fragment FullType on __Type {\\n      kind\\n      name\\n      ' + (descriptions ? 'description' : '') + '\\n      fields(includeDeprecated: true) {\\n        name\\n        ' + (descriptions ? 'description' : '') + '\\n        args {\\n          ...InputValue\\n        }\\n        type {\\n          ...TypeRef\\n        }\\n        isDeprecated\\n        deprecationReason\\n      }\\n      inputFields {\\n        ...InputValue\\n      }\\n      interfaces {\\n        ...TypeRef\\n      }\\n      enumValues(includeDeprecated: true) {\\n        name\\n        ' + (descriptions ? 'description' : '') + '\\n        isDeprecated\\n        deprecationReason\\n      }\\n      possibleTypes {\\n        ...TypeRef\\n      }\\n    }\\n\\n    fragment InputValue on __InputValue {\\n      name\\n      ' + (descriptions ? 'description' : '') + '\\n      type { ...TypeRef }\\n      defaultValue\\n    }\\n\\n    fragment TypeRef on __Type {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n                ofType {\\n                  kind\\n                  name\\n                  ofType {\\n                    kind\\n                    name\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  ';\n}\nexport var introspectionQuery = getIntrospectionQuery();","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport keyMap from '../jsutils/keyMap';\nimport keyValMap from '../jsutils/keyValMap';\nimport { valueFromAST } from './valueFromAST';\nimport blockStringValue from '../language/blockStringValue';\nimport { TokenKind } from '../language/lexer';\nimport { parse } from '../language/parser';\nimport { getDirectiveValues } from '../execution/values';\nimport { Kind } from '../language/kinds';\nimport { assertNullableType, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull } from '../type/definition';\nimport { GraphQLDirective, GraphQLSkipDirective, GraphQLIncludeDirective, GraphQLDeprecatedDirective } from '../type/directives';\nimport { introspectionTypes } from '../type/introspection';\nimport { specifiedScalarTypes } from '../type/scalars';\nimport { GraphQLSchema } from '../type/schema';\n\nfunction buildWrappedType(innerType, inputTypeNode) {\n  if (inputTypeNode.kind === Kind.LIST_TYPE) {\n    return GraphQLList(buildWrappedType(innerType, inputTypeNode.type));\n  }\n\n  if (inputTypeNode.kind === Kind.NON_NULL_TYPE) {\n    var wrappedType = buildWrappedType(innerType, inputTypeNode.type);\n    return GraphQLNonNull(assertNullableType(wrappedType));\n  }\n\n  return innerType;\n}\n\nfunction getNamedTypeNode(typeNode) {\n  var namedType = typeNode;\n\n  while (namedType.kind === Kind.LIST_TYPE || namedType.kind === Kind.NON_NULL_TYPE) {\n    namedType = namedType.type;\n  }\n\n  return namedType;\n}\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query\n * and Mutation.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\n\n\nexport function buildASTSchema(ast, options) {\n  if (!ast || ast.kind !== Kind.DOCUMENT) {\n    throw new Error('Must provide a document ast.');\n  }\n\n  var schemaDef = void 0;\n  var typeDefs = [];\n  var nodeMap = Object.create(null);\n  var directiveDefs = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var d = ast.definitions[i];\n\n    switch (d.kind) {\n      case Kind.SCHEMA_DEFINITION:\n        if (schemaDef) {\n          throw new Error('Must provide only one schema definition.');\n        }\n\n        schemaDef = d;\n        break;\n\n      case Kind.SCALAR_TYPE_DEFINITION:\n      case Kind.OBJECT_TYPE_DEFINITION:\n      case Kind.INTERFACE_TYPE_DEFINITION:\n      case Kind.ENUM_TYPE_DEFINITION:\n      case Kind.UNION_TYPE_DEFINITION:\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        var typeName = d.name.value;\n\n        if (nodeMap[typeName]) {\n          throw new Error('Type \"' + typeName + '\" was defined more than once.');\n        }\n\n        typeDefs.push(d);\n        nodeMap[typeName] = d;\n        break;\n\n      case Kind.DIRECTIVE_DEFINITION:\n        directiveDefs.push(d);\n        break;\n    }\n  }\n\n  var operationTypes = schemaDef ? getOperationTypes(schemaDef) : {\n    query: nodeMap.Query,\n    mutation: nodeMap.Mutation,\n    subscription: nodeMap.Subscription\n  };\n  var definitionBuilder = new ASTDefinitionBuilder(nodeMap, options, function (typeRef) {\n    throw new Error('Type \"' + typeRef.name.value + '\" not found in document.');\n  });\n  var types = definitionBuilder.buildTypes(typeDefs);\n  var directives = directiveDefs.map(function (def) {\n    return definitionBuilder.buildDirective(def);\n  }); // If specified directives were not explicitly declared, add them.\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'skip';\n  })) {\n    directives.push(GraphQLSkipDirective);\n  }\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'include';\n  })) {\n    directives.push(GraphQLIncludeDirective);\n  }\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'deprecated';\n  })) {\n    directives.push(GraphQLDeprecatedDirective);\n  } // Note: While this could make early assertions to get the correctly\n  // typed values below, that would throw immediately while type system\n  // validation with validateSchema() will produce more actionable results.\n\n\n  return new GraphQLSchema({\n    query: operationTypes.query ? definitionBuilder.buildType(operationTypes.query) : null,\n    mutation: operationTypes.mutation ? definitionBuilder.buildType(operationTypes.mutation) : null,\n    subscription: operationTypes.subscription ? definitionBuilder.buildType(operationTypes.subscription) : null,\n    types: types,\n    directives: directives,\n    astNode: schemaDef,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  });\n\n  function getOperationTypes(schema) {\n    var opTypes = {};\n    schema.operationTypes.forEach(function (operationType) {\n      var typeName = operationType.type.name.value;\n      var operation = operationType.operation;\n\n      if (opTypes[operation]) {\n        throw new Error('Must provide only one ' + operation + ' type in schema.');\n      }\n\n      if (!nodeMap[typeName]) {\n        throw new Error('Specified ' + operation + ' type \"' + typeName + '\" not found in document.');\n      }\n\n      opTypes[operation] = operationType.type;\n    });\n    return opTypes;\n  }\n}\nexport var ASTDefinitionBuilder = function () {\n  function ASTDefinitionBuilder(typeDefinitionsMap, options, resolveType) {\n    _classCallCheck(this, ASTDefinitionBuilder);\n\n    this._typeDefinitionsMap = typeDefinitionsMap;\n    this._options = options;\n    this._resolveType = resolveType; // Initialize to the GraphQL built in scalars and introspection types.\n\n    this._cache = keyMap(specifiedScalarTypes.concat(introspectionTypes), function (type) {\n      return type.name;\n    });\n  }\n\n  ASTDefinitionBuilder.prototype.buildTypes = function buildTypes(nodes) {\n    var _this = this;\n\n    return nodes.map(function (node) {\n      return _this.buildType(node);\n    });\n  };\n\n  ASTDefinitionBuilder.prototype.buildType = function buildType(node) {\n    var typeName = node.name.value;\n\n    if (!this._cache[typeName]) {\n      if (node.kind === Kind.NAMED_TYPE) {\n        var defNode = this._typeDefinitionsMap[typeName];\n        this._cache[typeName] = defNode ? this._makeSchemaDef(defNode) : this._resolveType(node);\n      } else {\n        this._cache[typeName] = this._makeSchemaDef(node);\n      }\n    }\n\n    return this._cache[typeName];\n  };\n\n  ASTDefinitionBuilder.prototype._buildWrappedType = function _buildWrappedType(typeNode) {\n    var typeDef = this.buildType(getNamedTypeNode(typeNode));\n    return buildWrappedType(typeDef, typeNode);\n  };\n\n  ASTDefinitionBuilder.prototype.buildDirective = function buildDirective(directiveNode) {\n    return new GraphQLDirective({\n      name: directiveNode.name.value,\n      description: getDescription(directiveNode, this._options),\n      locations: directiveNode.locations.map(function (node) {\n        return node.value;\n      }),\n      args: directiveNode.arguments && this._makeInputValues(directiveNode.arguments),\n      astNode: directiveNode\n    });\n  };\n\n  ASTDefinitionBuilder.prototype.buildField = function buildField(field) {\n    return {\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      type: this._buildWrappedType(field.type),\n      description: getDescription(field, this._options),\n      args: field.arguments && this._makeInputValues(field.arguments),\n      deprecationReason: getDeprecationReason(field),\n      astNode: field\n    };\n  };\n\n  ASTDefinitionBuilder.prototype._makeSchemaDef = function _makeSchemaDef(def) {\n    switch (def.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION:\n        return this._makeTypeDef(def);\n\n      case Kind.INTERFACE_TYPE_DEFINITION:\n        return this._makeInterfaceDef(def);\n\n      case Kind.ENUM_TYPE_DEFINITION:\n        return this._makeEnumDef(def);\n\n      case Kind.UNION_TYPE_DEFINITION:\n        return this._makeUnionDef(def);\n\n      case Kind.SCALAR_TYPE_DEFINITION:\n        return this._makeScalarDef(def);\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        return this._makeInputObjectDef(def);\n\n      default:\n        throw new Error('Type kind \"' + def.kind + '\" not supported.');\n    }\n  };\n\n  ASTDefinitionBuilder.prototype._makeTypeDef = function _makeTypeDef(def) {\n    var _this2 = this;\n\n    var typeName = def.name.value;\n    var interfaces = def.interfaces;\n    return new GraphQLObjectType({\n      name: typeName,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return _this2._makeFieldDefMap(def);\n      },\n      // Note: While this could make early assertions to get the correctly\n      // typed values, that would throw immediately while type system\n      // validation with validateSchema() will produce more actionable results.\n      interfaces: interfaces ? function () {\n        return _this2.buildTypes(interfaces);\n      } : [],\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeFieldDefMap = function _makeFieldDefMap(def) {\n    var _this3 = this;\n\n    return def.fields ? keyValMap(def.fields, function (field) {\n      return field.name.value;\n    }, function (field) {\n      return _this3.buildField(field);\n    }) : {};\n  };\n\n  ASTDefinitionBuilder.prototype._makeInputValues = function _makeInputValues(values) {\n    var _this4 = this;\n\n    return keyValMap(values, function (value) {\n      return value.name.value;\n    }, function (value) {\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      var type = _this4._buildWrappedType(value.type);\n\n      return {\n        type: type,\n        description: getDescription(value, _this4._options),\n        defaultValue: valueFromAST(value.defaultValue, type),\n        astNode: value\n      };\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeInterfaceDef = function _makeInterfaceDef(def) {\n    var _this5 = this;\n\n    return new GraphQLInterfaceType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return _this5._makeFieldDefMap(def);\n      },\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeEnumDef = function _makeEnumDef(def) {\n    var _this6 = this;\n\n    return new GraphQLEnumType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      values: def.values ? keyValMap(def.values, function (enumValue) {\n        return enumValue.name.value;\n      }, function (enumValue) {\n        return {\n          description: getDescription(enumValue, _this6._options),\n          deprecationReason: getDeprecationReason(enumValue),\n          astNode: enumValue\n        };\n      }) : {},\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeUnionDef = function _makeUnionDef(def) {\n    return new GraphQLUnionType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      // Note: While this could make assertions to get the correctly typed\n      // values below, that would throw immediately while type system\n      // validation with validateSchema() will produce more actionable results.\n      types: def.types ? this.buildTypes(def.types) : [],\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeScalarDef = function _makeScalarDef(def) {\n    return new GraphQLScalarType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      astNode: def,\n      serialize: function serialize(value) {\n        return value;\n      }\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeInputObjectDef = function _makeInputObjectDef(def) {\n    var _this7 = this;\n\n    return new GraphQLInputObjectType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return def.fields ? _this7._makeInputValues(def.fields) : {};\n      },\n      astNode: def\n    });\n  };\n\n  return ASTDefinitionBuilder;\n}();\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  var deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);\n  return deprecated && deprecated.reason;\n}\n/**\n * Given an ast node, returns its string description.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\n\n\nexport function getDescription(node, options) {\n  if (node.description) {\n    return node.description.value;\n  }\n\n  if (options && options.commentDescriptions) {\n    var rawValue = getLeadingCommentBlock(node);\n\n    if (rawValue !== undefined) {\n      return blockStringValue('\\n' + rawValue);\n    }\n  }\n}\n\nfunction getLeadingCommentBlock(node) {\n  var loc = node.loc;\n\n  if (!loc) {\n    return;\n  }\n\n  var comments = [];\n  var token = loc.startToken.prev;\n\n  while (token && token.kind === TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {\n    var value = String(token.value);\n    comments.push(value);\n    token = token.prev;\n  }\n\n  return comments.reverse().join('\\n');\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\n\nexport function buildSchema(source, options) {\n  return buildASTSchema(parse(source, options), options);\n}","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport keyValMap from '../jsutils/keyValMap';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nimport objectValues from '../jsutils/objectValues';\nimport { GraphQLSchema } from '../type/schema';\nimport { GraphQLDirective } from '../type/directives';\nimport { GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, isListType, isNonNullType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../type/definition';\nimport { isSpecifiedScalarType } from '../type/scalars';\nimport { isIntrospectionType } from '../type/introspection';\n/**\n * Sort GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  var cache = Object.create(null);\n\n  var sortMaybeType = function sortMaybeType(maybeType) {\n    return maybeType && sortNamedType(maybeType);\n  };\n\n  return new GraphQLSchema({\n    types: sortTypes(objectValues(schema.getTypeMap())),\n    directives: sortByName(schema.getDirectives()).map(sortDirective),\n    query: sortMaybeType(schema.getQueryType()),\n    mutation: sortMaybeType(schema.getMutationType()),\n    subscription: sortMaybeType(schema.getSubscriptionType()),\n    astNode: schema.astNode\n  });\n\n  function sortDirective(directive) {\n    return new GraphQLDirective({\n      name: directive.name,\n      description: directive.description,\n      locations: sortBy(directive.locations, function (x) {\n        return x;\n      }),\n      args: sortArgs(directive.args),\n      astNode: directive.astNode\n    });\n  }\n\n  function sortArgs(args) {\n    return keyValMap(sortByName(args), function (arg) {\n      return arg.name;\n    }, function (arg) {\n      return _extends({}, arg, {\n        type: sortType(arg.type)\n      });\n    });\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return {\n        type: sortType(field.type),\n        args: sortArgs(field.args),\n        resolve: field.resolve,\n        subscribe: field.subscribe,\n        deprecationReason: field.deprecationReason,\n        description: field.description,\n        astNode: field.astNode\n      };\n    });\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return {\n        type: sortType(field.type),\n        defaultValue: field.defaultValue,\n        description: field.description,\n        astNode: field.astNode\n      };\n    });\n  }\n\n  function sortType(type) {\n    if (isListType(type)) {\n      return new GraphQLList(sortType(type.ofType));\n    } else if (isNonNullType(type)) {\n      return new GraphQLNonNull(sortType(type.ofType));\n    }\n\n    return sortNamedType(type);\n  }\n\n  function sortTypes(arr) {\n    return sortByName(arr).map(sortNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isSpecifiedScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    var sortedType = cache[type.name];\n\n    if (!sortedType) {\n      sortedType = sortNamedTypeImpl(type);\n      cache[type.name] = sortedType;\n    }\n\n    return sortedType;\n  }\n\n  function sortNamedTypeImpl(type) {\n    if (isScalarType(type)) {\n      return type;\n    } else if (isObjectType(type)) {\n      return new GraphQLObjectType({\n        name: type.name,\n        interfaces: function interfaces() {\n          return sortTypes(type.getInterfaces());\n        },\n        fields: function fields() {\n          return sortFields(type.getFields());\n        },\n        isTypeOf: type.isTypeOf,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if (isInterfaceType(type)) {\n      return new GraphQLInterfaceType({\n        name: type.name,\n        fields: function fields() {\n          return sortFields(type.getFields());\n        },\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if (isUnionType(type)) {\n      return new GraphQLUnionType({\n        name: type.name,\n        types: function types() {\n          return sortTypes(type.getTypes());\n        },\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if (isEnumType(type)) {\n      return new GraphQLEnumType({\n        name: type.name,\n        values: keyValMap(sortByName(type.getValues()), function (val) {\n          return val.name;\n        }, function (val) {\n          return {\n            value: val.value,\n            deprecationReason: val.deprecationReason,\n            description: val.description,\n            astNode: val.astNode\n          };\n        }),\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if (isInputObjectType(type)) {\n      return new GraphQLInputObjectType({\n        name: type.name,\n        fields: function fields() {\n          return sortInputFields(type.getFields());\n        },\n        description: type.description,\n        astNode: type.astNode\n      });\n    }\n\n    throw new Error('Unknown type: \"' + type + '\"');\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  var sortedMap = Object.create(null);\n  var sortedKeys = sortBy(Object.keys(map), function (x) {\n    return x;\n  });\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n      var value = map[key];\n      sortedMap[key] = sortValueFn ? sortValueFn(value) : value;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, function (obj) {\n    return obj.name;\n  });\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort(function (obj1, obj2) {\n    var key1 = mapToKey(obj1);\n    var key2 = mapToKey(obj2);\n    return key1.localeCompare(key2);\n  });\n}","export { graphql, graphqlSync } from './graphql'; // Create and operate on GraphQL type definitions and schema.\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n *     import { parse } from 'graphql';\n *     import { parse } from 'graphql/language';\n */\n// The primary entry point into fulfilling a GraphQL request.\n\nexport { GraphQLSchema, // Definitions\nGraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, GraphQLDirective, // \"Enum\" of Type Kinds\nTypeKind, // Scalars\nspecifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID, // Built-in Directives defined by the Spec\nspecifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, // Constant Deprecation Reason\nDEFAULT_DEPRECATION_REASON, // Meta-field definitions.\nSchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, // GraphQL Types for introspection.\nintrospectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind, // Predicates\nisSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective, // Assertions\nassertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType, // Un-modifiers\ngetNullableType, getNamedType, // Validate GraphQL schema.\nvalidateSchema, assertValidSchema } from './type'; // Parse and operate on GraphQL language source files.\n\nexport { Source, getLocation, // Parse\nparse, parseValue, parseType, // Print\nprint, // Visit\nvisit, visitInParallel, visitWithTypeInfo, getVisitFn, Kind, TokenKind, DirectiveLocation, BREAK } from './language'; // Execute GraphQL queries.\n\nexport { execute, defaultFieldResolver, responsePathAsArray, getDirectiveValues } from './execution';\nexport { subscribe, createSourceEventStream } from './subscription'; // Validate GraphQL queries.\n\nexport { validate, ValidationContext, // All validation rules in the GraphQL Specification.\nspecifiedRules, // Individual validation rules.\nFieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedNonNullArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesDefaultValueAllowedRule, VariablesInAllowedPositionRule } from './validation'; // Create, format, and print GraphQL errors.\n\nexport { GraphQLError, formatError, printError } from './error'; // Utilities for operating on GraphQL type schema and parsed sources.\n\nexport { // Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\ngetIntrospectionQuery, // Deprecated: use getIntrospectionQuery\nintrospectionQuery, // Gets the target Operation from a Document\ngetOperationAST, // Convert a GraphQLSchema to an IntrospectionQuery\nintrospectionFromSchema, // Build a GraphQLSchema from an introspection result.\nbuildClientSchema, // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\nbuildASTSchema, // Build a GraphQLSchema from a GraphQL schema language document.\nbuildSchema, // Get the description from a schema AST node.\ngetDescription, // Extends an existing GraphQLSchema from a parsed GraphQL Schema\n// language AST.\nextendSchema, // Sort a GraphQLSchema.\nlexicographicSortSchema, // Print a GraphQLSchema to GraphQL Schema language.\nprintSchema, // Prints the built-in introspection schema in the Schema Language\n// format.\nprintIntrospectionSchema, // Print a GraphQLType to GraphQL Schema language.\nprintType, // Create a GraphQLType from a GraphQL language AST.\ntypeFromAST, // Create a JavaScript value from a GraphQL language AST with a Type.\nvalueFromAST, // Create a JavaScript value from a GraphQL language AST without a Type.\nvalueFromASTUntyped, // Create a GraphQL language AST from a JavaScript value.\nastFromValue, // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\nTypeInfo, // Coerces a JavaScript value to a GraphQL type, or produces errors.\ncoerceValue, // @deprecated use coerceValue\nisValidJSValue, // Determine if AST values adhere to a GraphQL type.\nisValidLiteralValue, // Concatenates multiple AST together.\nconcatAST, // Separates an AST into an AST per Operation.\nseparateOperations, // Comparators for types\nisEqualType, isTypeSubTypeOf, doTypesOverlap, // Asserts a string is a valid GraphQL name.\nassertValidName, // Determine if a string is a valid GraphQL name.\nisValidNameError, // Compares two GraphQLSchemas and detects breaking changes.\nfindBreakingChanges, findDangerousChanges, BreakingChangeType, DangerousChangeType, // Report all deprecated usage within a GraphQL document.\nfindDeprecatedUsages } from './utilities';","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { syntaxError } from '../error';\nimport blockStringValue from './blockStringValue';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\n\n\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nexport function getTokenDesc(token) {\n  var value = token.value;\n  return value ? token.kind + ' \"' + value + '\"' : token.kind;\n}\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\" + ('00' + code.toString(16).toUpperCase()).slice(-4) + '\"'\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos); // SourceCharacter\n\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    throw syntaxError(source, pos, 'Cannot contain the invalid character ' + printCharCode(code) + '.');\n  }\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return 'Cannot parse the unexpected character ' + printCharCode(code) + '.';\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code = void 0;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, 'Invalid number, unexpected digit after 0: ' + printCharCode(code) + '.');\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, 'Invalid number, expected digit but got: ' + printCharCode(code) + '.');\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n\n          if (charCode < 0) {\n            throw syntaxError(source, position, 'Invalid character escape sequence: ' + (\"\\\\u\" + body.slice(position + 1, position + 5) + '.'));\n          }\n\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n\n        default:\n          throw syntaxError(source, position, 'Invalid character escape sequence: \\\\' + String.fromCharCode(code) + '.');\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, blockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    } // Escape Triple-Quote (\\\"\"\")\n\n\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexidecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}","/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match = void 0;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}\n/**\n * Represents a location in a Source.\n */","export default process && process.env.NODE_ENV !== 'production' ? // eslint-disable-next-line no-shadow\nfunction instanceOf(value, constructor) {\n  if (value instanceof constructor) {\n    return true;\n  }\n\n  if (value) {\n    var valueClass = value.constructor;\n    var className = constructor.name;\n\n    if (valueClass && valueClass.name === className) {\n      throw new Error('Cannot use ' + className + ' \"' + value + '\" from another module or realm.\\n\\nEnsure that there is only one instance of \"graphql\" in the node_modules\\ndirectory. If different versions of \"graphql\" are the dependencies of other\\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\\n\\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\\n\\nDuplicate \"graphql\" modules cannot be used at the same time since different\\nversions may have different capabilities and behavior. The data from one\\nversion used in the function from another could produce confusing and\\nspurious results.');\n    }\n  }\n\n  return false;\n} : // eslint-disable-next-line no-shadow\nfunction instanceOf(value, constructor) {\n  return value instanceof constructor;\n};\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n */","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { getLocation } from '../language/location';\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  var printedLocations = [];\n\n  if (error.nodes) {\n    error.nodes.forEach(function (node) {\n      if (node.loc) {\n        printedLocations.push(highlightSourceAtLocation(node.loc.source, getLocation(node.loc.source, node.loc.start)));\n      }\n    });\n  } else if (error.source && error.locations) {\n    var source = error.source;\n    error.locations.forEach(function (location) {\n      printedLocations.push(highlightSourceAtLocation(source, location));\n    });\n  }\n\n  return printedLocations.length === 0 ? error.message : [error.message].concat(printedLocations).join('\\n\\n') + '\\n';\n}\n/**\n * Render a helpful description of the location of the error in the GraphQL\n * Source document.\n */\n\nfunction highlightSourceAtLocation(source, location) {\n  var line = location.line;\n  var lineOffset = source.locationOffset.line - 1;\n  var columnOffset = getColumnOffset(source, location);\n  var contextLine = line + lineOffset;\n  var contextColumn = location.column + columnOffset;\n  var prevLineNum = (contextLine - 1).toString();\n  var lineNum = contextLine.toString();\n  var nextLineNum = (contextLine + 1).toString();\n  var padLen = nextLineNum.length;\n  var lines = source.body.split(/\\r\\n|[\\n\\r]/g);\n  lines[0] = whitespace(source.locationOffset.column - 1) + lines[0];\n  var outputLines = [source.name + ' (' + contextLine + ':' + contextColumn + ')', line >= 2 && lpad(padLen, prevLineNum) + ': ' + lines[line - 2], lpad(padLen, lineNum) + ': ' + lines[line - 1], whitespace(2 + padLen + contextColumn - 1) + '^', line < lines.length && lpad(padLen, nextLineNum) + ': ' + lines[line]];\n  return outputLines.filter(Boolean).join('\\n');\n}\n\nfunction getColumnOffset(source, location) {\n  return location.line === 1 ? source.locationOffset.column - 1 : 0;\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport invariant from '../jsutils/invariant';\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\n\nexport var Source = function Source(body, name, locationOffset) {\n  _classCallCheck(this, Source);\n\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  !(this.locationOffset.line > 0) ? invariant(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;\n  !(this.locationOffset.column > 0) ? invariant(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;\n};","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from './GraphQLError';\n/**\n * Given an arbitrary Error, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(originalError, nodes, path) {\n  // Note: this uses a brand-check to support GraphQL errors originating from\n  // other contexts.\n  // $FlowFixMe(>=0.68.0)\n  if (originalError && Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError && originalError.message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.default = defineType;\nexports.chain = chain;\nexports.assertEach = assertEach;\nexports.assertOneOf = assertOneOf;\nexports.assertNodeType = assertNodeType;\nexports.assertNodeOrValueType = assertNodeOrValueType;\nexports.assertValueType = assertValueType;\nexports.assertArrayOf = assertArrayOf;\n\nvar t = require(\"../index\");\n\nvar BUILDER_KEYS = exports.BUILDER_KEYS = {};\nvar NODE_FIELDS = exports.NODE_FIELDS = {};\nvar ALIAS_KEYS = exports.ALIAS_KEYS = {};\n/**\n * Used to define an AST node.\n * @param {String} type The AST node name\n * @param {Object} opts Type definition object\n * @returns {void}\n */\n\nfunction defineType(type) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$fields = _ref.fields,\n      fields = _ref$fields === undefined ? {} : _ref$fields,\n      _ref$aliases = _ref.aliases,\n      aliases = _ref$aliases === undefined ? [] : _ref$aliases,\n      _ref$builder = _ref.builder,\n      builder = _ref$builder === undefined ? [] : _ref$builder;\n\n  for (var key in fields) {\n    var field = fields[key]; // Sets field as optional if builder exist but validator does not.\n\n    if (builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n  }\n\n  BUILDER_KEYS[type] = builder;\n  NODE_FIELDS[type] = fields;\n  ALIAS_KEYS[type] = aliases;\n}\n\nfunction getType(val) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else if (val === undefined) {\n    return \"undefined\";\n  } else {\n    return typeof val === \"undefined\" ? \"undefined\" : _typeof(val);\n  }\n} // Validation helpers\n\n\nfunction chain() {\n  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function validate() {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    fns.forEach(function (fn) {\n      return fn.apply(undefined, args);\n    });\n  };\n}\n\nfunction assertEach(callback) {\n  function validator(node, key, val) {\n    if (!Array.isArray(val)) {\n      return;\n    }\n\n    val.forEach(function (it, i) {\n      return callback(node, key + \"[\" + i + \"]\", it);\n    });\n  }\n\n  return validator;\n}\n\nfunction assertOneOf() {\n  for (var _len3 = arguments.length, vals = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    vals[_key3] = arguments[_key3];\n  }\n\n  function validate(node, key, val) {\n    if (vals.indexOf(val.kind) < 0) {\n      throw new TypeError(\"Property \" + key + \" expected value to be one of \" + JSON.stringify(vals) + \" but got \" + JSON.stringify(val));\n    }\n  }\n\n  return validate;\n}\n\nfunction assertNodeType() {\n  for (var _len4 = arguments.length, types = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    types[_key4] = arguments[_key4];\n  }\n\n  function validate(node, key, val) {\n    var valid = types.every(function (type) {\n      return t.is(type, val);\n    });\n\n    if (!valid) {\n      throw new TypeError(\"Property \" + key + \" of \" + node.type + \" expected node to be of a type \" + JSON.stringify(types) + \" \" + (\"but instead got \" + JSON.stringify(val && val.type)));\n    }\n  }\n\n  return validate;\n}\n\nfunction assertNodeOrValueType() {\n  for (var _len5 = arguments.length, types = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    types[_key5] = arguments[_key5];\n  }\n\n  function validate(node, key, val) {\n    var valid = types.every(function (type) {\n      return getType(val) === type || t.is(type, val);\n    });\n\n    if (!valid) {\n      throw new TypeError(\"Property \" + key + \" of \" + node.type + \" expected node to be of a type \" + JSON.stringify(types) + \" \" + (\"but instead got \" + JSON.stringify(val && val.type)));\n    }\n  }\n\n  return validate;\n}\n\nfunction assertValueType(type) {\n  function validate(node, key, val) {\n    var valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(\"Property \" + key + \" expected type of \" + type + \" but got \" + getType(val));\n    }\n  }\n\n  return validate;\n}\n\nfunction assertArrayOf(cb) {\n  return chain(assertValueType(\"array\"), assertEach(cb));\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * Coffeescript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport default function blockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.is = is;\nexports.isType = isType;\nexports.validate = validate;\nexports.shallowEqual = shallowEqual;\n\nrequire('./definitions/init');\n\nvar _require = require('./definitions'),\n    ALIAS_KEYS = _require.ALIAS_KEYS,\n    NODE_FIELDS = _require.NODE_FIELDS,\n    BUILDER_KEYS = _require.BUILDER_KEYS;\n\nvar t = exports; // Maps all exports to t\n\n/**\n * Registers `is[Type]` and `assert[Type]` generated functions for a given `type`.\n * Pass `skipAliasCheck` to force it to directly compare `node.type` with `type`.\n */\n\nfunction registerType(type) {\n  var key = 'is' + type;\n\n  var _isType = t[key] !== undefined ? t[key] : t[key] = function (node, opts) {\n    return t.is(type, node, opts);\n  };\n\n  t['assert' + type] = function (node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!_isType(node, opts)) {\n      throw new Error('Expected type \"' + type + '\" with option ' + JSON.stringify(opts));\n    }\n  };\n}\n\nexports.ALIAS_KEYS = ALIAS_KEYS;\nexports.NODE_FIELDS = NODE_FIELDS;\nexports.BUILDER_KEYS = BUILDER_KEYS;\n/**\n * Registers `is[Type]` and `assert[Type]` for all types.\n */\n\nfor (var type in t.NODE_FIELDS) {\n  registerType(type);\n}\n/**\n * Flip `ALIAS_KEYS` for faster access in the reverse direction.\n */\n\n\nvar TYPES = exports.TYPES = [];\nt.FLIPPED_ALIAS_KEYS = Object.keys(t.ALIAS_KEYS).reduce(function (acc, type) {\n  var aliasKeys = t.ALIAS_KEYS[type];\n  aliasKeys.forEach(function (alias) {\n    if (acc[alias] === undefined) {\n      TYPES.push(alias); // Populate `TYPES` with FLIPPED_ALIAS_KEY(S)\n      // Registers `is[Alias]` and `assert[Alias]` functions for all aliases.\n\n      t[alias.toUpperCase() + '_TYPES'] = acc[alias];\n      registerType(alias);\n      acc[alias] = [];\n    }\n\n    acc[alias].push(type);\n  });\n  return acc;\n}, {});\n/**\n * Returns whether `node` is of given `type`.\n *\n * For better performance, use this instead of `is[Type]` when `type` is unknown.\n * Optionally, pass `skipAliasCheck` to directly compare `node.type` with `type`.\n */\n\nfunction is(type, node, opts) {\n  if (node === null || (typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {\n    return false;\n  }\n\n  var matches = isType(node.kind, type);\n\n  if (!matches) {\n    return false;\n  }\n\n  if (typeof opts === 'undefined') {\n    return true;\n  } else {\n    return t.shallowEqual(node, opts);\n  }\n}\n/**\n * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.\n */\n\n\nfunction isType(nodeType, targetType) {\n  if (nodeType === targetType) {\n    return true;\n  } // This is a fast-path. If the test above failed, but an alias key is found, then the\n  // targetType was a primary node type, so there's no need to check the aliases.\n\n\n  if (t.ALIAS_KEYS[targetType]) {\n    return false;\n  }\n\n  var aliases = t.FLIPPED_ALIAS_KEYS[targetType];\n\n  if (aliases) {\n    if (aliases[0] === nodeType) {\n      return true;\n    }\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = aliases[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var alias = _step.value;\n\n        if (nodeType === alias) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n/**\n * For each call of #defineType, the following expression evalutates and generates\n * a builder function that validates incoming arguments and returns a valid AST node.\n */\n\n\nvar _loop = function _loop(_type) {\n  var keys = t.BUILDER_KEYS[_type];\n  var fields = t.NODE_FIELDS[_type];\n\n  function builder() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length > keys.length) {\n      throw new Error('t.' + _type + ': Too many arguments passed. Received ' + args.length + ' but can receive ' + ('no more than ' + keys.length));\n    }\n\n    var node = keys.reduce(function (node, key, i) {\n      node[key] = args[i] === undefined ? fields[key].default : args[i];\n      return node;\n    }, {\n      kind: _type\n    });\n\n    for (var key in node) {\n      validate(node, key, node[key]);\n    }\n\n    return node;\n  }\n\n  t[_type[0].toLowerCase() + _type.slice(1)] = builder;\n};\n\nfor (var _type in t.BUILDER_KEYS) {\n  _loop(_type);\n}\n/**\n * Executes the field validators for a given node\n */\n\n\nfunction validate(node, key, val) {\n  if (node === null || (typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {\n    return;\n  }\n\n  var fields = t.NODE_FIELDS[node.kind];\n\n  if (fields === undefined) {\n    return;\n  }\n\n  var field = fields[key];\n\n  if (field === undefined || field.validate === undefined) {\n    return;\n  }\n\n  if (field.optional && (val === undefined || val === null)) {\n    return;\n  }\n\n  field.validate(node, key, val);\n}\n/**\n * Test if an object is shallowly equal.\n */\n\n\nfunction shallowEqual(actual, expected) {\n  for (var key in expected) {\n    if (expected.hasOwnProperty(key) && actual[key] !== expected[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}","var parser = require('graphql/language/parser');\n\nvar parse = parser.parse; // Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\n\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n} // A map docString -> graphql document\n\n\nvar docCache = {}; // A map fragmentName -> [normalized source]\n\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n} // For testing.\n\n\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n} // Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\n\n\nvar printFragmentWarnings = true;\n\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc); // We know something about this fragment\n\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\" + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\" + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  } // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n\n\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  } // https://github.com/apollographql/graphql-tag/issues/40\n\n\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\n\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, {\n    experimentalFragmentVariables: experimentalFragmentVariables\n  });\n\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  } // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n\n\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n} // XXX This should eventually disallow arbitrary string interpolation, like Relay does\n\n\nfunction gql()\n/* arguments */\n{\n  var args = Array.prototype.slice.call(arguments);\n  var literals = args[0]; // We always get literals[0] and then matching post literals for each arg given\n\n  var result = typeof literals === \"string\" ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n} // Support typescript, which isn't as nice as Babel about default exports\n\n\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\nmodule.exports = gql;","export function getEnv() {\n  if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n    return process.env.NODE_ENV;\n  } // default environment\n\n\n  return 'development';\n}\nexport function isEnv(env) {\n  return getEnv() === env;\n}\nexport function isProduction() {\n  return isEnv('production') === true;\n}\nexport function isDevelopment() {\n  return isEnv('development') === true;\n}\nexport function isTest() {\n  return isEnv('test') === true;\n}","var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport stringify from 'fast-json-stable-stringify';\nexport function isScalarValue(value) {\n  return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\nexport function isNumberValue(value) {\n  return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\n\nfunction isStringValue(value) {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value) {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value) {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value) {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value) {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value) {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value) {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value) {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value) {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    var nestedArgObj_1 = {};\n    value.fields.map(function (obj) {\n      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n    });\n    argObj[name.value] = nestedArgObj_1;\n  } else if (isVariable(value)) {\n    var variableValue = (variables || {})[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(function (listValue) {\n      var nestedArgArrayObj = {};\n      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n      return nestedArgArrayObj[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new Error(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" + 'is not supported. Use variables instead of inline arguments to ' + 'overcome this limitation.');\n  }\n}\nexport function storeKeyNameFromField(field, variables) {\n  var directivesObj = null;\n\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(function (directive) {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(function (_a) {\n          var name = _a.name,\n              value = _a.value;\n          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n        });\n      }\n    });\n  }\n\n  var argObj = null;\n\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n          value = _a.value;\n      return valueToObjectRepresentation(argObj, name, value, variables);\n    });\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = ['connection', 'include', 'skip', 'client', 'rest', 'export'];\nexport function getStoreKeyName(fieldName, args, directives) {\n  if (directives && directives['connection'] && directives['connection']['key']) {\n    if (directives['connection']['filter'] && directives['connection']['filter'].length > 0) {\n      var filterKeys = directives['connection']['filter'] ? directives['connection']['filter'] : [];\n      filterKeys.sort();\n      var queryArgs_1 = args;\n      var filteredArgs_1 = {};\n      filterKeys.forEach(function (key) {\n        filteredArgs_1[key] = queryArgs_1[key];\n      });\n      return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  var completeFieldName = fieldName;\n\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    var stringifiedArgs = stringify(args);\n    completeFieldName += \"(\" + stringifiedArgs + \")\";\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(function (key) {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n      } else {\n        completeFieldName += \"@\" + key;\n      }\n    });\n  }\n\n  return completeFieldName;\n}\nexport function argumentsObjectFromField(field, variables) {\n  if (field.arguments && field.arguments.length) {\n    var argObj_1 = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n          value = _a.value;\n      return valueToObjectRepresentation(argObj_1, name, value, variables);\n    });\n    return argObj_1;\n  }\n\n  return null;\n}\nexport function resultKeyNameFromField(field) {\n  return field.alias ? field.alias.value : field.name.value;\n}\nexport function isField(selection) {\n  return selection.kind === 'Field';\n}\nexport function isInlineFragment(selection) {\n  return selection.kind === 'InlineFragment';\n}\nexport function isIdValue(idObject) {\n  return idObject && idObject.type === 'id';\n}\nexport function toIdValue(idConfig, generated) {\n  if (generated === void 0) {\n    generated = false;\n  }\n\n  return __assign({\n    type: 'id',\n    generated: generated\n  }, typeof idConfig === 'string' ? {\n    id: idConfig,\n    typename: undefined\n  } : idConfig);\n}\nexport function isJsonValue(jsonObject) {\n  return jsonObject != null && typeof jsonObject === 'object' && jsonObject.type === 'json';\n}\n\nfunction defaultValueFromVariable(node) {\n  throw new Error(\"Variable nodes are not supported by valueFromNode\");\n}\n/**\n * Evaluate a ValueNode and yield its value in its natural JS form.\n */\n\n\nexport function valueFromNode(node, onVariable) {\n  if (onVariable === void 0) {\n    onVariable = defaultValueFromVariable;\n  }\n\n  switch (node.kind) {\n    case 'Variable':\n      return onVariable(node);\n\n    case 'NullValue':\n      return null;\n\n    case 'IntValue':\n      return parseInt(node.value, 10);\n\n    case 'FloatValue':\n      return parseFloat(node.value);\n\n    case 'ListValue':\n      return node.values.map(function (v) {\n        return valueFromNode(v, onVariable);\n      });\n\n    case 'ObjectValue':\n      {\n        var value = {};\n\n        for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n          var field = _a[_i];\n          value[field.name.value] = valueFromNode(field.value, onVariable);\n        }\n\n        return value;\n      }\n\n    default:\n      return node.value;\n  }\n}","var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more then one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\n\n\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName; // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === 'OperationDefinition') {\n      throw new Error(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n    } // Add our definition to the fragments array if it is a fragment\n    // definition.\n\n\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  }); // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n\n  if (typeof actualFragmentName === 'undefined') {\n    if (fragments.length !== 1) {\n      throw new Error(\"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n    }\n\n    actualFragmentName = fragments[0].name.value;\n  } // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n\n\n  var query = __assign({}, document, {\n    definitions: [{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }].concat(document.definitions)\n  });\n\n  return query;\n}","export function queryFromPojo(obj) {\n  var op = {\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery'\n    },\n    selectionSet: selectionSetFromObj(obj)\n  };\n  var out = {\n    kind: 'Document',\n    definitions: [op]\n  };\n  return out;\n}\nexport function fragmentFromPojo(obj, typename) {\n  var frag = {\n    kind: 'FragmentDefinition',\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: typename || '__FakeType'\n      }\n    },\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery'\n    },\n    selectionSet: selectionSetFromObj(obj)\n  };\n  var out = {\n    kind: 'Document',\n    definitions: [frag]\n  };\n  return out;\n}\n\nfunction selectionSetFromObj(obj) {\n  if (typeof obj === 'number' || typeof obj === 'boolean' || typeof obj === 'string' || typeof obj === 'undefined' || obj === null) {\n    // No selection set here\n    return null;\n  }\n\n  if (Array.isArray(obj)) {\n    // GraphQL queries don't include arrays\n    return selectionSetFromObj(obj[0]);\n  } // Now we know it's an object\n\n\n  var selections = [];\n  Object.keys(obj).forEach(function (key) {\n    var field = {\n      kind: 'Field',\n      name: {\n        kind: 'Name',\n        value: key\n      }\n    }; // Recurse\n\n    var nestedSelSet = selectionSetFromObj(obj[key]);\n\n    if (nestedSelSet) {\n      field.selectionSet = nestedSelSet;\n    }\n\n    selections.push(field);\n  });\n  var selectionSet = {\n    kind: 'SelectionSet',\n    selections: selections\n  };\n  return selectionSet;\n}\n\nexport var justTypenameQuery = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: null,\n    variableDefinitions: null,\n    directives: [],\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        alias: null,\n        name: {\n          kind: 'Name',\n          value: '__typename'\n        },\n        arguments: [],\n        directives: [],\n        selectionSet: null\n      }]\n    }\n  }]\n};","import { getFragmentQueryDocument } from 'apollo-utilities';\nimport { justTypenameQuery, queryFromPojo, fragmentFromPojo } from './utils';\n\nvar ApolloCache =\n/** @class */\nfunction () {\n  function ApolloCache() {} // optional API\n\n\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  }; // experimental\n\n\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  }; // DataProxy API\n\n  /**\n   *\n   * @param options\n   * @param optimistic\n   */\n\n\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: options.query,\n      variables: options.variables,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.writeQuery = function (options) {\n    this.write({\n      dataId: 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables\n    });\n  };\n\n  ApolloCache.prototype.writeFragment = function (options) {\n    this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName)\n    });\n  };\n\n  ApolloCache.prototype.writeData = function (_a) {\n    var id = _a.id,\n        data = _a.data;\n\n    if (typeof id !== 'undefined') {\n      var typenameResult = null; // Since we can't use fragments without having a typename in the store,\n      // we need to make sure we have one.\n      // To avoid overwriting an existing typename, we need to read it out first\n      // and generate a fake one if none exists.\n\n      try {\n        typenameResult = this.read({\n          rootId: id,\n          optimistic: false,\n          query: justTypenameQuery\n        });\n      } catch (e) {} // Do nothing, since an error just means no typename exists\n      // tslint:disable-next-line\n\n\n      var __typename = typenameResult && typenameResult.__typename || '__ClientData'; // Add a type here to satisfy the inmemory cache\n\n\n      var dataToWrite = Object.assign({\n        __typename: __typename\n      }, data);\n      this.writeFragment({\n        id: id,\n        fragment: fragmentFromPojo(dataToWrite, __typename),\n        data: dataToWrite\n      });\n    } else {\n      this.writeQuery({\n        query: queryFromPojo(data),\n        data: data\n      });\n    }\n  };\n\n  return ApolloCache;\n}();\n\nexport { ApolloCache };","import { isProduction, isTest } from './environment';\nvar haveWarned = Object.create({});\n/**\n * Print a warning only once in development.\n * In production no warnings are printed.\n * In test all warnings are printed.\n *\n * @param msg The warning message\n * @param type warn or error (will call console.warn or console.error)\n */\n\nexport function warnOnceInDevelopment(msg, type) {\n  if (type === void 0) {\n    type = 'warn';\n  }\n\n  if (isProduction()) {\n    return;\n  }\n\n  if (!haveWarned[msg]) {\n    if (!isTest()) {\n      haveWarned[msg] = true;\n    }\n\n    switch (type) {\n      case 'error':\n        console.error(msg);\n        break;\n\n      default:\n        console.warn(msg);\n    }\n  }\n}","import { isTest, warnOnceInDevelopment } from 'apollo-utilities';\nvar haveWarned = false;\n/**\n * This fragment matcher is very basic and unable to match union or interface type conditions\n */\n\nvar HeuristicFragmentMatcher =\n/** @class */\nfunction () {\n  function HeuristicFragmentMatcher() {// do nothing\n  }\n\n  HeuristicFragmentMatcher.prototype.ensureReady = function () {\n    return Promise.resolve();\n  };\n\n  HeuristicFragmentMatcher.prototype.canBypassInit = function () {\n    return true; // we don't need to initialize this fragment matcher.\n  };\n\n  HeuristicFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n    var obj = context.store.get(idValue.id);\n\n    if (!obj && idValue.id === 'ROOT_QUERY') {\n      return true;\n    }\n\n    if (!obj) {\n      return false;\n    }\n\n    if (!obj.__typename) {\n      if (!haveWarned) {\n        console.warn(\"You're using fragments in your queries, but either don't have the addTypename:\\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\\n   can accurately match fragments.\");\n        console.warn('Could not find __typename on Fragment ', typeCondition, obj);\n        console.warn(\"DEPRECATION WARNING: using fragments without __typename is unsupported behavior \" + \"and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.\");\n        /* istanbul ignore if */\n\n        if (!isTest()) {\n          // When running tests, we want to print the warning every time\n          haveWarned = true;\n        }\n      }\n\n      context.returnPartialData = true;\n      return true;\n    }\n\n    if (obj.__typename === typeCondition) {\n      return true;\n    } // XXX here we reach an issue - we don't know if this fragment should match or not. It's either:\n    // 1. A fragment on a non-matching concrete type or interface or union\n    // 2. A fragment on a matching interface or union\n    // If it's 1, we don't want to return anything, if it's 2 we want to match. We can't tell the\n    // difference, so we warn the user, but still try to match it (backcompat).\n\n\n    warnOnceInDevelopment(\"You are using the simple (heuristic) fragment matcher, but your queries contain union or interface types.\\n     Apollo Client will not be able to able to accurately map fragments.\" + \"To make this error go away, use the IntrospectionFragmentMatcher as described in the docs: \" + \"https://www.apollographql.com/docs/react/recipes/fragment-matching.html\", 'error');\n    context.returnPartialData = true;\n    return true;\n  };\n\n  return HeuristicFragmentMatcher;\n}();\n\nexport { HeuristicFragmentMatcher };\n\nvar IntrospectionFragmentMatcher =\n/** @class */\nfunction () {\n  function IntrospectionFragmentMatcher(options) {\n    if (options && options.introspectionQueryResultData) {\n      this.possibleTypesMap = this.parseIntrospectionResult(options.introspectionQueryResultData);\n      this.isReady = true;\n    } else {\n      this.isReady = false;\n    }\n\n    this.match = this.match.bind(this);\n  }\n\n  IntrospectionFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n    if (!this.isReady) {\n      // this should basically never happen in proper use.\n      throw new Error('FragmentMatcher.match() was called before FragmentMatcher.init()');\n    }\n\n    var obj = context.store.get(idValue.id);\n\n    if (!obj) {\n      return false;\n    }\n\n    if (!obj.__typename) {\n      throw new Error(\"Cannot match fragment because __typename property is missing: \" + JSON.stringify(obj));\n    }\n\n    if (obj.__typename === typeCondition) {\n      return true;\n    }\n\n    var implementingTypes = this.possibleTypesMap[typeCondition];\n\n    if (implementingTypes && implementingTypes.indexOf(obj.__typename) > -1) {\n      return true;\n    }\n\n    return false;\n  };\n\n  IntrospectionFragmentMatcher.prototype.parseIntrospectionResult = function (introspectionResultData) {\n    var typeMap = {};\n\n    introspectionResultData.__schema.types.forEach(function (type) {\n      if (type.kind === 'UNION' || type.kind === 'INTERFACE') {\n        typeMap[type.name] = type.possibleTypes.map(function (implementingType) {\n          return implementingType.name;\n        });\n      }\n    });\n\n    return typeMap;\n  };\n\n  return IntrospectionFragmentMatcher;\n}();\n\nexport { IntrospectionFragmentMatcher };","var ObjectCache =\n/** @class */\nfunction () {\n  function ObjectCache(data) {\n    if (data === void 0) {\n      data = Object.create(null);\n    }\n\n    this.data = data;\n  }\n\n  ObjectCache.prototype.toObject = function () {\n    return this.data;\n  };\n\n  ObjectCache.prototype.get = function (dataId) {\n    return this.data[dataId];\n  };\n\n  ObjectCache.prototype.set = function (dataId, value) {\n    this.data[dataId] = value;\n  };\n\n  ObjectCache.prototype.delete = function (dataId) {\n    this.data[dataId] = undefined;\n  };\n\n  ObjectCache.prototype.clear = function () {\n    this.data = Object.create(null);\n  };\n\n  ObjectCache.prototype.replace = function (newData) {\n    this.data = newData || Object.create(null);\n  };\n\n  return ObjectCache;\n}();\n\nexport { ObjectCache };\nexport function defaultNormalizedCacheFactory(seed) {\n  return new ObjectCache(seed);\n}","var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { print } from 'graphql/language/printer';\nimport { assign, createFragmentMap, getDefaultValues, getFragmentDefinitions, getOperationDefinition, isField, isIdValue, isInlineFragment, isProduction, resultKeyNameFromField, shouldInclude, storeKeyNameFromField, getQueryDefinition, toIdValue } from 'apollo-utilities';\nimport { defaultNormalizedCacheFactory, ObjectCache } from './objectCache';\n\nvar WriteError =\n/** @class */\nfunction (_super) {\n  __extends(WriteError, _super);\n\n  function WriteError() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'WriteError';\n    return _this;\n  }\n\n  return WriteError;\n}(Error);\n\nexport { WriteError };\nexport function enhanceErrorWithDocument(error, document) {\n  // XXX A bit hacky maybe ...\n  var enhancedError = new WriteError(\"Error writing result to store for query:\\n \" + print(document));\n  enhancedError.message += '\\n' + error.message;\n  enhancedError.stack = error.stack;\n  return enhancedError;\n}\n/**\n * Writes the result of a query to the store.\n *\n * @param result The result object returned for the query document.\n *\n * @param query The query document whose result we are writing to the store.\n *\n * @param store The {@link NormalizedCache} used by Apollo for the `data` portion of the store.\n *\n * @param variables A map from the name of a variable to its value. These variables can be\n * referenced by the query document.\n *\n * @param dataIdFromObject A function that returns an object identifier given a particular result\n * object. See the store documentation for details and an example of this function.\n *\n * @param fragmentMap A map from the name of a fragment to its fragment definition. These fragments\n * can be referenced within the query document.\n *\n * @param fragmentMatcherFunction A function to use for matching fragment conditions in GraphQL documents\n */\n\nexport function writeQueryToStore(_a) {\n  var result = _a.result,\n      query = _a.query,\n      _b = _a.storeFactory,\n      storeFactory = _b === void 0 ? defaultNormalizedCacheFactory : _b,\n      _c = _a.store,\n      store = _c === void 0 ? storeFactory() : _c,\n      variables = _a.variables,\n      dataIdFromObject = _a.dataIdFromObject,\n      _d = _a.fragmentMap,\n      fragmentMap = _d === void 0 ? {} : _d,\n      fragmentMatcherFunction = _a.fragmentMatcherFunction;\n  var queryDefinition = getQueryDefinition(query);\n  variables = assign({}, getDefaultValues(queryDefinition), variables);\n\n  try {\n    return writeSelectionSetToStore({\n      dataId: 'ROOT_QUERY',\n      result: result,\n      selectionSet: queryDefinition.selectionSet,\n      context: {\n        store: store,\n        storeFactory: storeFactory,\n        processedData: {},\n        variables: variables,\n        dataIdFromObject: dataIdFromObject,\n        fragmentMap: fragmentMap,\n        fragmentMatcherFunction: fragmentMatcherFunction\n      }\n    });\n  } catch (e) {\n    throw enhanceErrorWithDocument(e, query);\n  }\n}\nexport function writeResultToStore(_a) {\n  var dataId = _a.dataId,\n      result = _a.result,\n      document = _a.document,\n      _b = _a.storeFactory,\n      storeFactory = _b === void 0 ? defaultNormalizedCacheFactory : _b,\n      _c = _a.store,\n      store = _c === void 0 ? storeFactory() : _c,\n      variables = _a.variables,\n      dataIdFromObject = _a.dataIdFromObject,\n      fragmentMatcherFunction = _a.fragmentMatcherFunction; // XXX TODO REFACTOR: this is a temporary workaround until query normalization is made to work with documents.\n\n  var operationDefinition = getOperationDefinition(document);\n  var selectionSet = operationDefinition.selectionSet;\n  var fragmentMap = createFragmentMap(getFragmentDefinitions(document));\n  variables = assign({}, getDefaultValues(operationDefinition), variables);\n\n  try {\n    return writeSelectionSetToStore({\n      result: result,\n      dataId: dataId,\n      selectionSet: selectionSet,\n      context: {\n        store: store,\n        storeFactory: storeFactory,\n        processedData: {},\n        variables: variables,\n        dataIdFromObject: dataIdFromObject,\n        fragmentMap: fragmentMap,\n        fragmentMatcherFunction: fragmentMatcherFunction\n      }\n    });\n  } catch (e) {\n    throw enhanceErrorWithDocument(e, document);\n  }\n}\nexport function writeSelectionSetToStore(_a) {\n  var result = _a.result,\n      dataId = _a.dataId,\n      selectionSet = _a.selectionSet,\n      context = _a.context;\n  var variables = context.variables,\n      store = context.store,\n      fragmentMap = context.fragmentMap;\n  selectionSet.selections.forEach(function (selection) {\n    var included = shouldInclude(selection, variables);\n\n    if (isField(selection)) {\n      var resultFieldKey = resultKeyNameFromField(selection);\n      var value = result[resultFieldKey];\n\n      if (included) {\n        if (typeof value !== 'undefined') {\n          writeFieldToStore({\n            dataId: dataId,\n            value: value,\n            field: selection,\n            context: context\n          });\n        } else {\n          // if this is a defered field we don't need to throw / warn\n          var isDefered = selection.directives && selection.directives.length && selection.directives.some(function (directive) {\n            return directive.name && directive.name.value === 'defer';\n          });\n\n          if (!isDefered && context.fragmentMatcherFunction) {\n            // XXX We'd like to throw an error, but for backwards compatibility's sake\n            // we just print a warning for the time being.\n            //throw new WriteError(`Missing field ${resultFieldKey} in ${JSON.stringify(result, null, 2).substring(0, 100)}`);\n            if (!isProduction()) {\n              console.warn(\"Missing field \" + resultFieldKey + \" in \" + JSON.stringify(result, null, 2).substring(0, 100));\n            }\n          }\n        }\n      }\n    } else {\n      // This is not a field, so it must be a fragment, either inline or named\n      var fragment = void 0;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // Named fragment\n        fragment = (fragmentMap || {})[selection.name.value];\n\n        if (!fragment) {\n          throw new Error(\"No fragment named \" + selection.name.value + \".\");\n        }\n      }\n\n      var matches = true;\n\n      if (context.fragmentMatcherFunction && fragment.typeCondition) {\n        // TODO we need to rewrite the fragment matchers for this to work properly and efficiently\n        // Right now we have to pretend that we're passing in an idValue and that there's a store\n        // on the context.\n        var idValue = toIdValue({\n          id: 'self',\n          typename: undefined\n        });\n        var fakeContext = {\n          // NOTE: fakeContext always uses ObjectCache\n          // since this is only to ensure the return value of 'matches'\n          store: new ObjectCache({\n            self: result\n          }),\n          returnPartialData: false,\n          hasMissingField: false,\n          cacheRedirects: {}\n        };\n        matches = context.fragmentMatcherFunction(idValue, fragment.typeCondition.name.value, fakeContext);\n\n        if (!isProduction() && fakeContext.returnPartialData) {\n          console.error('WARNING: heuristic fragment matching going on!');\n        }\n      }\n\n      if (included && matches) {\n        writeSelectionSetToStore({\n          result: result,\n          selectionSet: fragment.selectionSet,\n          dataId: dataId,\n          context: context\n        });\n      }\n    }\n  });\n  return store;\n} // Checks if the id given is an id that was generated by Apollo\n// rather than by dataIdFromObject.\n\nfunction isGeneratedId(id) {\n  return id[0] === '$';\n}\n\nfunction mergeWithGenerated(generatedKey, realKey, cache) {\n  var generated = cache.get(generatedKey);\n  var real = cache.get(realKey);\n  Object.keys(generated).forEach(function (key) {\n    var value = generated[key];\n    var realValue = real[key];\n\n    if (isIdValue(value) && isGeneratedId(value.id) && isIdValue(realValue)) {\n      mergeWithGenerated(value.id, realValue.id, cache);\n    }\n\n    cache.delete(generatedKey);\n    cache.set(realKey, __assign({}, generated, real));\n  });\n}\n\nfunction isDataProcessed(dataId, field, processedData) {\n  if (!processedData) {\n    return false;\n  }\n\n  if (processedData[dataId]) {\n    if (processedData[dataId].indexOf(field) >= 0) {\n      return true;\n    } else {\n      processedData[dataId].push(field);\n    }\n  } else {\n    processedData[dataId] = [field];\n  }\n\n  return false;\n}\n\nfunction writeFieldToStore(_a) {\n  var field = _a.field,\n      value = _a.value,\n      dataId = _a.dataId,\n      context = _a.context;\n  var variables = context.variables,\n      dataIdFromObject = context.dataIdFromObject,\n      store = context.store;\n  var storeValue;\n  var storeObject;\n  var storeFieldName = storeKeyNameFromField(field, variables); // specifies if we need to merge existing keys in the store\n\n  var shouldMerge = false; // If we merge, this will be the generatedKey\n\n  var generatedKey = ''; // If this is a scalar value...\n\n  if (!field.selectionSet || value === null) {\n    storeValue = value != null && typeof value === 'object' ? // If the scalar value is a JSON blob, we have to \"escape\" it so it can’t pretend to be\n    // an id.\n    {\n      type: 'json',\n      json: value\n    } : // Otherwise, just store the scalar directly in the store.\n    value;\n  } else if (Array.isArray(value)) {\n    var generatedId = dataId + \".\" + storeFieldName;\n    storeValue = processArrayValue(value, generatedId, field.selectionSet, context);\n  } else {\n    // It's an object\n    var valueDataId = dataId + \".\" + storeFieldName;\n    var generated = true; // We only prepend the '$' if the valueDataId isn't already a generated\n    // id.\n\n    if (!isGeneratedId(valueDataId)) {\n      valueDataId = '$' + valueDataId;\n    }\n\n    if (dataIdFromObject) {\n      var semanticId = dataIdFromObject(value); // We throw an error if the first character of the id is '$. This is\n      // because we use that character to designate an Apollo-generated id\n      // and we use the distinction between user-desiginated and application-provided\n      // ids when managing overwrites.\n\n      if (semanticId && isGeneratedId(semanticId)) {\n        throw new Error('IDs returned by dataIdFromObject cannot begin with the \"$\" character.');\n      }\n\n      if (semanticId) {\n        valueDataId = semanticId;\n        generated = false;\n      }\n    }\n\n    if (!isDataProcessed(valueDataId, field, context.processedData)) {\n      writeSelectionSetToStore({\n        dataId: valueDataId,\n        result: value,\n        selectionSet: field.selectionSet,\n        context: context\n      });\n    } // We take the id and escape it (i.e. wrap it with an enclosing object).\n    // This allows us to distinguish IDs from normal scalars.\n\n\n    var typename = value.__typename;\n    storeValue = toIdValue({\n      id: valueDataId,\n      typename: typename\n    }, generated); // check if there was a generated id at the location where we're\n    // about to place this new id. If there was, we have to merge the\n    // data from that id with the data we're about to write in the store.\n\n    storeObject = store.get(dataId);\n    var escapedId = storeObject && storeObject[storeFieldName];\n\n    if (escapedId !== storeValue && isIdValue(escapedId)) {\n      var hadTypename = escapedId.typename !== undefined;\n      var hasTypename = typename !== undefined;\n      var typenameChanged = hadTypename && hasTypename && escapedId.typename !== typename; // If there is already a real id in the store and the current id we\n      // are dealing with is generated, we throw an error.\n      // One exception we allow is when the typename has changed, which occurs\n      // when schema defines a union, both with and without an ID in the same place.\n      // checks if we \"lost\" the read id\n\n      if (generated && !escapedId.generated && !typenameChanged) {\n        throw new Error(\"Store error: the application attempted to write an object with no provided id\" + (\" but the store already contains an id of \" + escapedId.id + \" for this object. The selectionSet\") + \" that was trying to be written is:\\n\" + print(field));\n      } // checks if we \"lost\" the typename\n\n\n      if (hadTypename && !hasTypename) {\n        throw new Error(\"Store error: the application attempted to write an object with no provided typename\" + (\" but the store already contains an object with typename of \" + escapedId.typename + \" for the object of id \" + escapedId.id + \". The selectionSet\") + \" that was trying to be written is:\\n\" + print(field));\n      }\n\n      if (escapedId.generated) {\n        generatedKey = escapedId.id; // We should only merge if it's an object of the same type,\n        // otherwise we should delete the generated object\n\n        if (typenameChanged) {\n          // Only delete the generated object when the old object was\n          // inlined, and the new object is not. This is indicated by\n          // the old id being generated, and the new id being real.\n          if (!generated) {\n            store.delete(generatedKey);\n          }\n        } else {\n          shouldMerge = true;\n        }\n      }\n    }\n  }\n\n  var newStoreObj = __assign({}, store.get(dataId), (_b = {}, _b[storeFieldName] = storeValue, _b));\n\n  if (shouldMerge) {\n    mergeWithGenerated(generatedKey, storeValue.id, store);\n  }\n\n  storeObject = store.get(dataId);\n\n  if (!storeObject || storeValue !== storeObject[storeFieldName]) {\n    store.set(dataId, newStoreObj);\n  }\n\n  var _b;\n}\n\nfunction processArrayValue(value, generatedId, selectionSet, context) {\n  return value.map(function (item, index) {\n    if (item === null) {\n      return null;\n    }\n\n    var itemDataId = generatedId + \".\" + index;\n\n    if (Array.isArray(item)) {\n      return processArrayValue(item, itemDataId, selectionSet, context);\n    }\n\n    var generated = true;\n\n    if (context.dataIdFromObject) {\n      var semanticId = context.dataIdFromObject(item);\n\n      if (semanticId) {\n        itemDataId = semanticId;\n        generated = false;\n      }\n    }\n\n    if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {\n      writeSelectionSetToStore({\n        dataId: itemDataId,\n        result: item,\n        selectionSet: selectionSet,\n        context: context\n      });\n    }\n\n    return toIdValue({\n      id: itemDataId,\n      typename: item.__typename\n    }, generated);\n  });\n}","import { getMainDefinition, getFragmentDefinitions, createFragmentMap, shouldInclude, getDirectiveInfoFromField, isField, isInlineFragment, resultKeyNameFromField, argumentsObjectFromField } from 'apollo-utilities';\n/* Based on graphql function from graphql-js:\n *\n * graphql(\n *   schema: GraphQLSchema,\n *   requestString: string,\n *   rootValue?: ?any,\n *   contextValue?: ?any,\n *   variableValues?: ?{[key: string]: any},\n *   operationName?: ?string\n * ): Promise<GraphQLResult>\n *\n * The default export as of graphql-anywhere is sync as of 4.0,\n * but below is an exported alternative that is async.\n * In the 5.0 version, this will be the only export again\n * and it will be async\n *\n */\n\nexport function graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n  if (execOptions === void 0) {\n    execOptions = {};\n  }\n\n  var mainDefinition = getMainDefinition(document);\n  var fragments = getFragmentDefinitions(document);\n  var fragmentMap = createFragmentMap(fragments);\n  var resultMapper = execOptions.resultMapper; // Default matcher always matches all fragments\n\n  var fragmentMatcher = execOptions.fragmentMatcher || function () {\n    return true;\n  };\n\n  var execContext = {\n    fragmentMap: fragmentMap,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    resultMapper: resultMapper,\n    resolver: resolver,\n    fragmentMatcher: fragmentMatcher\n  };\n  return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\n\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n  var fragmentMap = execContext.fragmentMap,\n      contextValue = execContext.contextValue,\n      variables = execContext.variableValues;\n  var result = {};\n  selectionSet.selections.forEach(function (selection) {\n    if (!shouldInclude(selection, variables)) {\n      // Skip this entirely\n      return;\n    }\n\n    if (isField(selection)) {\n      var fieldResult = executeField(selection, rootValue, execContext);\n      var resultFieldKey = resultKeyNameFromField(selection);\n\n      if (fieldResult !== undefined) {\n        if (result[resultFieldKey] === undefined) {\n          result[resultFieldKey] = fieldResult;\n        } else {\n          merge(result[resultFieldKey], fieldResult);\n        }\n      }\n    } else {\n      var fragment = void 0;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment\n        fragment = fragmentMap[selection.name.value];\n\n        if (!fragment) {\n          throw new Error(\"No fragment named \" + selection.name.value);\n        }\n      }\n\n      var typeCondition = fragment.typeCondition.name.value;\n\n      if (execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) {\n        var fragmentResult = executeSelectionSet(fragment.selectionSet, rootValue, execContext);\n        merge(result, fragmentResult);\n      }\n    }\n  });\n\n  if (execContext.resultMapper) {\n    return execContext.resultMapper(result, rootValue);\n  }\n\n  return result;\n}\n\nfunction executeField(field, rootValue, execContext) {\n  var variables = execContext.variableValues,\n      contextValue = execContext.contextValue,\n      resolver = execContext.resolver;\n  var fieldName = field.name.value;\n  var args = argumentsObjectFromField(field, variables);\n  var info = {\n    isLeaf: !field.selectionSet,\n    resultKey: resultKeyNameFromField(field),\n    directives: getDirectiveInfoFromField(field, variables)\n  };\n  var result = resolver(fieldName, rootValue, args, contextValue, info); // Handle all scalar types here\n\n  if (!field.selectionSet) {\n    return result;\n  } // From here down, the field has a selection set, which means it's trying to\n  // query a GraphQLObjectType\n\n\n  if (result == null) {\n    // Basically any field in a GraphQL response can be null, or missing\n    return result;\n  }\n\n  if (Array.isArray(result)) {\n    return executeSubSelectedArray(field, result, execContext);\n  } // Returned value is an object, and the query has a sub-selection. Recurse.\n\n\n  return executeSelectionSet(field.selectionSet, result, execContext);\n}\n\nfunction executeSubSelectedArray(field, result, execContext) {\n  return result.map(function (item) {\n    // null value in array\n    if (item === null) {\n      return null;\n    } // This is a nested array, recurse\n\n\n    if (Array.isArray(item)) {\n      return executeSubSelectedArray(field, item, execContext);\n    } // This is an object, run the selection set on it\n\n\n    return executeSelectionSet(field.selectionSet, item, execContext);\n  });\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nexport function merge(dest, src) {\n  if (src !== null && typeof src === 'object') {\n    Object.keys(src).forEach(function (key) {\n      var srcVal = src[key];\n\n      if (!hasOwn.call(dest, key)) {\n        dest[key] = srcVal;\n      } else {\n        merge(dest[key], srcVal);\n      }\n    });\n  }\n}","export { filter, check, propType } from './utilities';\nimport { graphql } from './graphql';\nexport default graphql;","var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport graphqlAnywhere from 'graphql-anywhere';\nimport { assign, isEqual, getDefaultValues, getQueryDefinition, isJsonValue, isIdValue, toIdValue, getStoreKeyName } from 'apollo-utilities';\n/**\n * The key which the cache id for a given value is stored in the result object. This key is private\n * and should not be used by Apollo client users.\n *\n * Uses a symbol if available in the environment.\n *\n * @private\n */\n\nexport var ID_KEY = typeof Symbol !== 'undefined' ? Symbol('id') : '@@id';\n/**\n * Resolves the result of a query solely from the store (i.e. never hits the server).\n *\n * @param {Store} store The {@link NormalizedCache} used by Apollo for the `data` portion of the\n * store.\n *\n * @param {DocumentNode} query The query document to resolve from the data available in the store.\n *\n * @param {Object} [variables] A map from the name of a variable to its value. These variables can\n * be referenced by the query document.\n *\n * @param {any} previousResult The previous result returned by this function for the same query.\n * If nothing in the store changed since that previous result then values from the previous result\n * will be returned to preserve referential equality.\n */\n\nexport function readQueryFromStore(options) {\n  var optsPatch = {\n    returnPartialData: false\n  };\n  return diffQueryAgainstStore(__assign({}, options, optsPatch)).result;\n}\n\nvar readStoreResolver = function readStoreResolver(fieldName, idValue, args, context, _a) {\n  var resultKey = _a.resultKey,\n      directives = _a.directives;\n  assertIdValue(idValue);\n  var objId = idValue.id;\n  var obj = context.store.get(objId);\n  var storeKeyName = fieldName;\n\n  if (args || directives) {\n    // We happen to know here that getStoreKeyName returns its first\n    // argument unmodified if there are no args or directives, so we can\n    // avoid calling the function at all in that case, as a small but\n    // important optimization to this frequently executed code.\n    storeKeyName = getStoreKeyName(storeKeyName, args, directives);\n  }\n\n  var fieldValue = void 0;\n\n  if (obj) {\n    fieldValue = obj[storeKeyName];\n\n    if (typeof fieldValue === 'undefined' && context.cacheRedirects && (obj.__typename || objId === 'ROOT_QUERY')) {\n      var typename = obj.__typename || 'Query'; // Look for the type in the custom resolver map\n\n      var type = context.cacheRedirects[typename];\n\n      if (type) {\n        // Look for the field in the custom resolver map\n        var resolver = type[fieldName];\n\n        if (resolver) {\n          fieldValue = resolver(obj, args, {\n            getCacheKey: function getCacheKey(storeObj) {\n              return toIdValue({\n                id: context.dataIdFromObject(storeObj),\n                typename: storeObj.__typename\n              });\n            }\n          });\n        }\n      }\n    }\n  }\n\n  if (typeof fieldValue === 'undefined') {\n    if (!context.returnPartialData) {\n      throw new Error(\"Can't find field \" + storeKeyName + \" on object (\" + objId + \") \" + JSON.stringify(obj, null, 2) + \".\");\n    }\n\n    context.hasMissingField = true;\n    return fieldValue;\n  } // if this is an object scalar, it must be a json blob and we have to unescape it\n\n\n  if (isJsonValue(fieldValue)) {\n    // If the JSON blob is the same now as in the previous result, return the previous result to\n    // maintain referential equality.\n    //\n    // `isEqual` will first perform a referential equality check (with `===`) in case the JSON\n    // value has not changed in the store, and then a deep equality check if that fails in case a\n    // new JSON object was returned by the API but that object may still be the same.\n    if (idValue.previousResult && isEqual(idValue.previousResult[resultKey], fieldValue.json)) {\n      return idValue.previousResult[resultKey];\n    }\n\n    return fieldValue.json;\n  } // If we had a previous result, try adding that previous result value for this field to our field\n  // value. This will create a new value without mutating the old one.\n\n\n  if (idValue.previousResult) {\n    fieldValue = addPreviousResultToIdValues(fieldValue, idValue.previousResult[resultKey]);\n  }\n\n  return fieldValue;\n};\n/**\n * Given a store and a query, return as much of the result as possible and\n * identify if any data was missing from the store.\n * @param  {DocumentNode} query A parsed GraphQL query document\n * @param  {Store} store The Apollo Client store object\n * @param  {any} previousResult The previous result returned by this function for the same query\n * @return {result: Object, complete: [boolean]}\n */\n\n\nexport function diffQueryAgainstStore(_a) {\n  var store = _a.store,\n      query = _a.query,\n      variables = _a.variables,\n      previousResult = _a.previousResult,\n      _b = _a.returnPartialData,\n      returnPartialData = _b === void 0 ? true : _b,\n      _c = _a.rootId,\n      rootId = _c === void 0 ? 'ROOT_QUERY' : _c,\n      fragmentMatcherFunction = _a.fragmentMatcherFunction,\n      config = _a.config; // Throw the right validation error by trying to find a query in the document\n\n  var queryDefinition = getQueryDefinition(query);\n  variables = assign({}, getDefaultValues(queryDefinition), variables);\n  var context = {\n    // Global settings\n    store: store,\n    returnPartialData: returnPartialData,\n    dataIdFromObject: config && config.dataIdFromObject || null,\n    cacheRedirects: config && config.cacheRedirects || {},\n    // Flag set during execution\n    hasMissingField: false\n  };\n  var rootIdValue = {\n    type: 'id',\n    id: rootId,\n    previousResult: previousResult\n  };\n  var result = graphqlAnywhere(readStoreResolver, query, rootIdValue, context, variables, {\n    fragmentMatcher: fragmentMatcherFunction,\n    resultMapper: resultMapper\n  });\n  return {\n    result: result,\n    complete: !context.hasMissingField\n  };\n}\nexport function assertIdValue(idValue) {\n  if (!isIdValue(idValue)) {\n    throw new Error(\"Encountered a sub-selection on the query, but the store doesn't have an object reference. This should never happen during normal use unless you have custom code that is directly manipulating the store; please file an issue.\");\n  }\n}\n/**\n * Adds a previous result value to id values in a nested array. For a single id value and a single\n * previous result then the previous value is added directly.\n *\n * For arrays we put all of the ids from the previous result array in a map and add them to id\n * values with the same id.\n *\n * This function does not mutate. Instead it returns new instances of modified values.\n *\n * @private\n */\n\nfunction addPreviousResultToIdValues(value, previousResult) {\n  // If the value is an `IdValue`, add the previous result to it whether or not that\n  // `previousResult` is undefined.\n  //\n  // If the value is an array, recurse over each item trying to add the `previousResult` for that\n  // item.\n  if (isIdValue(value)) {\n    return __assign({}, value, {\n      previousResult: previousResult\n    });\n  } else if (Array.isArray(value)) {\n    var idToPreviousResult_1 = new Map(); // If the previous result was an array, we want to build up our map of ids to previous results\n    // using the private `ID_KEY` property that is added in `resultMapper`.\n\n    if (Array.isArray(previousResult)) {\n      previousResult.forEach(function (item) {\n        // item can be null\n        if (item && item[ID_KEY]) {\n          idToPreviousResult_1.set(item[ID_KEY], item); // idToPreviousResult[item[ID_KEY]] = item;\n        }\n      });\n    } // For every value we want to add the previous result.\n\n\n    return value.map(function (item, i) {\n      // By default the previous result for this item will be in the same array position as this\n      // item.\n      var itemPreviousResult = previousResult && previousResult[i]; // If the item is an id value, we should check to see if there is a previous result for this\n      // specific id. If there is, that will be the value for `itemPreviousResult`.\n\n      if (isIdValue(item)) {\n        itemPreviousResult = idToPreviousResult_1.get(item.id) || itemPreviousResult;\n      }\n\n      return addPreviousResultToIdValues(item, itemPreviousResult);\n    });\n  } // Return the value, nothing changed.\n\n\n  return value;\n}\n/**\n * Maps a result from `graphql-anywhere` to a final result value.\n *\n * If the result and the previous result from the `idValue` pass a shallow equality test, we just\n * return the `previousResult` to maintain referential equality.\n *\n * We also add a private id property to the result that we can use later on.\n *\n * @private\n */\n\n\nfunction resultMapper(resultFields, idValue) {\n  // If we had a previous result, we may be able to return that and preserve referential equality\n  if (idValue.previousResult) {\n    var currentResultKeys_1 = Object.keys(resultFields);\n    var sameAsPreviousResult = // Confirm that we have the same keys in both the current result and the previous result.\n    Object.keys(idValue.previousResult).every(function (key) {\n      return currentResultKeys_1.indexOf(key) > -1;\n    }) && // Perform a shallow comparison of the result fields with the previous result. If all of\n    // the shallow fields are referentially equal to the fields of the previous result we can\n    // just return the previous result.\n    //\n    // While we do a shallow comparison of objects, but we do a deep comparison of arrays.\n    currentResultKeys_1.every(function (key) {\n      return areNestedArrayItemsStrictlyEqual(resultFields[key], idValue.previousResult[key]);\n    });\n\n    if (sameAsPreviousResult) {\n      return idValue.previousResult;\n    }\n  }\n\n  Object.defineProperty(resultFields, ID_KEY, {\n    enumerable: false,\n    configurable: true,\n    writable: false,\n    value: idValue.id\n  });\n  return resultFields;\n}\n/**\n * Compare all the items to see if they are all referentially equal in two arrays no matter how\n * deeply nested the arrays are.\n *\n * @private\n */\n\n\nfunction areNestedArrayItemsStrictlyEqual(a, b) {\n  // If `a` and `b` are referentially equal, return true.\n  if (a === b) {\n    return true;\n  } // If either `a` or `b` are not an array or not of the same length return false. `a` and `b` are\n  // known to not be equal here, we checked above.\n\n\n  if (!Array.isArray(a) || !Array.isArray(b) || a.length !== b.length) {\n    return false;\n  } // Otherwise let us compare all of the array items (which are potentially nested arrays!) to see\n  // if they are equal.\n\n\n  return a.every(function (item, i) {\n    return areNestedArrayItemsStrictlyEqual(item, b[i]);\n  });\n}","var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nvar RecordingCache =\n/** @class */\nfunction () {\n  function RecordingCache(data) {\n    if (data === void 0) {\n      data = {};\n    }\n\n    this.data = data;\n    this.recordedData = {};\n  }\n\n  RecordingCache.prototype.record = function (transaction) {\n    transaction(this);\n    var recordedData = this.recordedData;\n    this.recordedData = {};\n    return recordedData;\n  };\n\n  RecordingCache.prototype.toObject = function () {\n    return __assign({}, this.data, this.recordedData);\n  };\n\n  RecordingCache.prototype.get = function (dataId) {\n    if (this.recordedData.hasOwnProperty(dataId)) {\n      // recording always takes precedence:\n      return this.recordedData[dataId];\n    }\n\n    return this.data[dataId];\n  };\n\n  RecordingCache.prototype.set = function (dataId, value) {\n    if (this.get(dataId) !== value) {\n      this.recordedData[dataId] = value;\n    }\n  };\n\n  RecordingCache.prototype.delete = function (dataId) {\n    this.recordedData[dataId] = undefined;\n  };\n\n  RecordingCache.prototype.clear = function () {\n    var _this = this;\n\n    Object.keys(this.data).forEach(function (dataId) {\n      return _this.delete(dataId);\n    });\n    this.recordedData = {};\n  };\n\n  RecordingCache.prototype.replace = function (newData) {\n    this.clear();\n    this.recordedData = __assign({}, newData);\n  };\n\n  return RecordingCache;\n}();\n\nexport { RecordingCache };\nexport function record(startingState, transaction) {\n  var recordingCache = new RecordingCache(startingState);\n  return recordingCache.record(transaction);\n}","var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { ApolloCache } from 'apollo-cache';\nimport { getFragmentQueryDocument, addTypenameToDocument } from 'apollo-utilities';\nimport { HeuristicFragmentMatcher } from './fragmentMatcher';\nimport { writeResultToStore } from './writeToStore';\nimport { readQueryFromStore, diffQueryAgainstStore } from './readFromStore';\nimport { defaultNormalizedCacheFactory } from './objectCache';\nimport { record } from './recordingCache';\nvar defaultConfig = {\n  fragmentMatcher: new HeuristicFragmentMatcher(),\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  storeFactory: defaultNormalizedCacheFactory\n};\nexport function defaultDataIdFromObject(result) {\n  if (result.__typename) {\n    if (result.id !== undefined) {\n      return result.__typename + \":\" + result.id;\n    }\n\n    if (result._id !== undefined) {\n      return result.__typename + \":\" + result._id;\n    }\n  }\n\n  return null;\n}\n\nvar InMemoryCache =\n/** @class */\nfunction (_super) {\n  __extends(InMemoryCache, _super);\n\n  function InMemoryCache(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.optimistic = [];\n    _this.watches = [];\n    _this.typenameDocumentCache = new WeakMap(); // Set this while in a transaction to prevent broadcasts...\n    // don't forget to turn it back on!\n\n    _this.silenceBroadcast = false;\n    _this.config = __assign({}, defaultConfig, config); // backwards compat\n\n    if (_this.config.customResolvers) {\n      console.warn('customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.');\n      _this.config.cacheRedirects = _this.config.customResolvers;\n    }\n\n    if (_this.config.cacheResolvers) {\n      console.warn('cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.');\n      _this.config.cacheRedirects = _this.config.cacheResolvers;\n    }\n\n    _this.addTypename = _this.config.addTypename;\n    _this.data = _this.config.storeFactory();\n    return _this;\n  }\n\n  InMemoryCache.prototype.restore = function (data) {\n    if (data) this.data.replace(data);\n    return this;\n  };\n\n  InMemoryCache.prototype.extract = function (optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    if (optimistic && this.optimistic.length > 0) {\n      var patches = this.optimistic.map(function (opt) {\n        return opt.data;\n      });\n      return Object.assign.apply(Object, [{}, this.data.toObject()].concat(patches));\n    }\n\n    return this.data.toObject();\n  };\n\n  InMemoryCache.prototype.read = function (query) {\n    if (query.rootId && this.data.get(query.rootId) === undefined) {\n      return null;\n    }\n\n    return readQueryFromStore({\n      store: this.config.storeFactory(this.extract(query.optimistic)),\n      query: this.transformDocument(query.query),\n      variables: query.variables,\n      rootId: query.rootId,\n      fragmentMatcherFunction: this.config.fragmentMatcher.match,\n      previousResult: query.previousResult,\n      config: this.config\n    });\n  };\n\n  InMemoryCache.prototype.write = function (write) {\n    writeResultToStore({\n      dataId: write.dataId,\n      result: write.result,\n      variables: write.variables,\n      document: this.transformDocument(write.query),\n      store: this.data,\n      dataIdFromObject: this.config.dataIdFromObject,\n      fragmentMatcherFunction: this.config.fragmentMatcher.match\n    });\n    this.broadcastWatches();\n  };\n\n  InMemoryCache.prototype.diff = function (query) {\n    return diffQueryAgainstStore({\n      store: this.config.storeFactory(this.extract(query.optimistic)),\n      query: this.transformDocument(query.query),\n      variables: query.variables,\n      returnPartialData: query.returnPartialData,\n      previousResult: query.previousResult,\n      fragmentMatcherFunction: this.config.fragmentMatcher.match,\n      config: this.config\n    });\n  };\n\n  InMemoryCache.prototype.watch = function (watch) {\n    var _this = this;\n\n    this.watches.push(watch);\n    return function () {\n      _this.watches = _this.watches.filter(function (c) {\n        return c !== watch;\n      });\n    };\n  };\n\n  InMemoryCache.prototype.evict = function (query) {\n    throw new Error(\"eviction is not implemented on InMemory Cache\");\n  };\n\n  InMemoryCache.prototype.reset = function () {\n    this.data.clear();\n    this.broadcastWatches();\n    return Promise.resolve();\n  };\n\n  InMemoryCache.prototype.removeOptimistic = function (id) {\n    var _this = this; // Throw away optimistic changes of that particular mutation\n\n\n    var toPerform = this.optimistic.filter(function (item) {\n      return item.id !== id;\n    });\n    this.optimistic = []; // Re-run all of our optimistic data actions on top of one another.\n\n    toPerform.forEach(function (change) {\n      _this.recordOptimisticTransaction(change.transaction, change.id);\n    });\n    this.broadcastWatches();\n  };\n\n  InMemoryCache.prototype.performTransaction = function (transaction) {\n    // TODO: does this need to be different, or is this okay for an in-memory cache?\n    var alreadySilenced = this.silenceBroadcast;\n    this.silenceBroadcast = true;\n    transaction(this);\n\n    if (!alreadySilenced) {\n      // Don't un-silence since this is a nested transaction\n      // (for example, a transaction inside an optimistic record)\n      this.silenceBroadcast = false;\n    }\n\n    this.broadcastWatches();\n  };\n\n  InMemoryCache.prototype.recordOptimisticTransaction = function (transaction, id) {\n    var _this = this;\n\n    this.silenceBroadcast = true;\n    var patch = record(this.extract(true), function (recordingCache) {\n      // swapping data instance on 'this' is currently necessary\n      // because of the current architecture\n      var dataCache = _this.data;\n      _this.data = recordingCache;\n\n      _this.performTransaction(transaction);\n\n      _this.data = dataCache;\n    });\n    this.optimistic.push({\n      id: id,\n      transaction: transaction,\n      data: patch\n    });\n    this.silenceBroadcast = false;\n    this.broadcastWatches();\n  };\n\n  InMemoryCache.prototype.transformDocument = function (document) {\n    if (this.addTypename) {\n      var result = this.typenameDocumentCache.get(document);\n\n      if (!result) {\n        this.typenameDocumentCache.set(document, result = addTypenameToDocument(document));\n      }\n\n      return result;\n    }\n\n    return document;\n  };\n\n  InMemoryCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: options.query,\n      variables: options.variables,\n      optimistic: optimistic\n    });\n  };\n\n  InMemoryCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: this.transformDocument(getFragmentQueryDocument(options.fragment, options.fragmentName)),\n      variables: options.variables,\n      rootId: options.id,\n      optimistic: optimistic\n    });\n  };\n\n  InMemoryCache.prototype.writeQuery = function (options) {\n    this.write({\n      dataId: 'ROOT_QUERY',\n      result: options.data,\n      query: this.transformDocument(options.query),\n      variables: options.variables\n    });\n  };\n\n  InMemoryCache.prototype.writeFragment = function (options) {\n    this.write({\n      dataId: options.id,\n      result: options.data,\n      query: this.transformDocument(getFragmentQueryDocument(options.fragment, options.fragmentName)),\n      variables: options.variables\n    });\n  };\n\n  InMemoryCache.prototype.broadcastWatches = function () {\n    var _this = this; // Skip this when silenced (like inside a transaction)\n\n\n    if (this.silenceBroadcast) return; // right now, we invalidate all queries whenever anything changes\n\n    this.watches.forEach(function (c) {\n      var newData = _this.diff({\n        query: c.query,\n        variables: c.variables,\n        // TODO: previousResult isn't in the types - this will only work\n        // with ObservableQuery which is in a different package\n        previousResult: c.previousResult && c.previousResult(),\n        optimistic: c.optimistic\n      });\n\n      c.callback(newData);\n    });\n  };\n\n  return InMemoryCache;\n}(ApolloCache);\n\nexport { InMemoryCache };","export { InMemoryCache, defaultDataIdFromObject } from './inMemoryCache';\nexport * from './readFromStore';\nexport * from './writeToStore';\nexport * from './fragmentMatcher';\nexport * from './objectCache';\nexport * from './recordingCache';","/**\n * The current status of a query’s execution in our system.\n */\nexport var NetworkStatus;\n\n(function (NetworkStatus) {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n\n  NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n\n  NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n\n  NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n\n  NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n\n  NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n\n  NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\n\n\nexport function isNetworkRequestInFlight(networkStatus) {\n  return networkStatus < 7;\n}","var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // This simplified polyfill attempts to follow the ECMAScript Observable proposal.\n// See https://github.com/zenparsing/es-observable\n\n\nimport { Observable as LinkObservable } from 'apollo-link';\nimport $$observable from 'symbol-observable'; // rxjs interopt\n\nvar Observable =\n/** @class */\nfunction (_super) {\n  __extends(Observable, _super);\n\n  function Observable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Observable.prototype[$$observable] = function () {\n    return this;\n  };\n\n  Observable.prototype['@@observable'] = function () {\n    return this;\n  };\n\n  return Observable;\n}(LinkObservable);\n\nexport { Observable };","var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nexport function isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n} // Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\n\nvar generateErrorMessage = function generateErrorMessage(err) {\n  var message = ''; // If we have GraphQL errors present, add that to the error message.\n\n  if (Array.isArray(err.graphQLErrors) && err.graphQLErrors.length !== 0) {\n    err.graphQLErrors.forEach(function (graphQLError) {\n      var errorMessage = graphQLError ? graphQLError.message : 'Error message not found.';\n      message += \"GraphQL error: \" + errorMessage + \"\\n\";\n    });\n  }\n\n  if (err.networkError) {\n    message += 'Network error: ' + err.networkError.message + '\\n';\n  } // strip newline from the end of the message\n\n\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nvar ApolloError =\n/** @class */\nfunction (_super) {\n  __extends(ApolloError, _super); // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n\n\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n        networkError = _a.networkError,\n        errorMessage = _a.errorMessage,\n        extraInfo = _a.extraInfo;\n\n    var _this = _super.call(this, errorMessage) || this;\n\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.networkError = networkError || null;\n\n    if (!errorMessage) {\n      _this.message = generateErrorMessage(_this);\n    } else {\n      _this.message = errorMessage;\n    }\n\n    _this.extraInfo = extraInfo; // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n\n  return ApolloError;\n}(Error);\n\nexport { ApolloError };","export var FetchType;\n\n(function (FetchType) {\n  FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n  FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n  FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));","var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { isEqual, tryFunctionOrLogError, maybeDeepFreeze } from 'apollo-utilities';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { Observable } from '../util/Observable';\nimport { ApolloError } from '../errors/ApolloError';\nimport { FetchType } from './types';\nexport var hasError = function hasError(storeValue, policy) {\n  if (policy === void 0) {\n    policy = 'none';\n  }\n\n  return storeValue && (storeValue.graphQLErrors && storeValue.graphQLErrors.length > 0 && policy === 'none' || storeValue.networkError);\n};\n\nvar ObservableQuery =\n/** @class */\nfunction (_super) {\n  __extends(ObservableQuery, _super);\n\n  function ObservableQuery(_a) {\n    var scheduler = _a.scheduler,\n        options = _a.options,\n        _b = _a.shouldSubscribe,\n        shouldSubscribe = _b === void 0 ? true : _b;\n\n    var _this = _super.call(this, function (observer) {\n      return _this.onSubscribe(observer);\n    }) || this; // active state\n\n\n    _this.isCurrentlyPolling = false;\n    _this.isTornDown = false; // query information\n\n    _this.options = options;\n    _this.variables = options.variables || {};\n    _this.queryId = scheduler.queryManager.generateQueryId();\n    _this.shouldSubscribe = shouldSubscribe; // related classes\n\n    _this.scheduler = scheduler;\n    _this.queryManager = scheduler.queryManager; // interal data stores\n\n    _this.observers = [];\n    _this.subscriptionHandles = [];\n    return _this;\n  }\n\n  ObservableQuery.prototype.result = function () {\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      var subscription;\n      var observer = {\n        next: function next(result) {\n          resolve(result); // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n\n          if (!that.observers.some(function (obs) {\n            return obs !== observer;\n          })) {\n            that.queryManager.removeQuery(that.queryId);\n          }\n\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: function error(_error) {\n          reject(_error);\n        }\n      };\n      subscription = that.subscribe(observer);\n    });\n  };\n  /**\n   * Return the result of the query from the local cache as well as some fetching status\n   * `loading` and `networkStatus` allow to know if a request is in flight\n   * `partial` lets you know if the result from the local cache is complete or partial\n   * @return {result: Object, loading: boolean, networkStatus: number, partial: boolean}\n   */\n\n\n  ObservableQuery.prototype.currentResult = function () {\n    if (this.isTornDown) {\n      return {\n        data: this.lastError ? {} : this.lastResult ? this.lastResult.data : {},\n        error: this.lastError,\n        loading: false,\n        networkStatus: NetworkStatus.error\n      };\n    }\n\n    var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n\n    if (hasError(queryStoreValue, this.options.errorPolicy)) {\n      return {\n        data: {},\n        loading: false,\n        networkStatus: queryStoreValue.networkStatus,\n        error: new ApolloError({\n          graphQLErrors: queryStoreValue.graphQLErrors,\n          networkError: queryStoreValue.networkError\n        })\n      };\n    }\n\n    var _a = this.queryManager.getCurrentQueryResult(this),\n        data = _a.data,\n        partial = _a.partial;\n\n    var queryLoading = !queryStoreValue || queryStoreValue.networkStatus === NetworkStatus.loading; // We need to be careful about the loading state we show to the user, to try\n    // and be vaguely in line with what the user would have seen from .subscribe()\n    // but to still provide useful information synchronously when the query\n    // will not end up hitting the server.\n    // See more: https://github.com/apollostack/apollo-client/issues/707\n    // Basically: is there a query in flight right now (modolo the next tick)?\n\n    var loading = this.options.fetchPolicy === 'network-only' && queryLoading || partial && this.options.fetchPolicy !== 'cache-only'; // if there is nothing in the query store, it means this query hasn't fired yet or it has been cleaned up. Therefore the\n    // network status is dependent on queryLoading.\n\n    var networkStatus;\n\n    if (queryStoreValue) {\n      networkStatus = queryStoreValue.networkStatus;\n    } else {\n      networkStatus = loading ? NetworkStatus.loading : NetworkStatus.ready;\n    }\n\n    var result = {\n      data: data,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    };\n\n    if (queryStoreValue && queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n      result.errors = queryStoreValue.graphQLErrors;\n    }\n\n    if (!partial) {\n      var stale = false;\n      this.lastResult = __assign({}, result, {\n        stale: stale\n      });\n    }\n\n    return __assign({}, result, {\n      partial: partial\n    });\n  }; // Returns the last result that observer.next was called with. This is not the same as\n  // currentResult! If you're not sure which you need, then you probably need currentResult.\n\n\n  ObservableQuery.prototype.getLastResult = function () {\n    return this.lastResult;\n  };\n\n  ObservableQuery.prototype.getLastError = function () {\n    return this.lastError;\n  };\n\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.lastResult;\n    delete this.lastError;\n    this.isTornDown = false;\n  };\n\n  ObservableQuery.prototype.refetch = function (variables) {\n    var fetchPolicy = this.options.fetchPolicy; // early return if trying to read from cache during refetch\n\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(new Error('cache-only fetchPolicy option should not be used together with query refetch.'));\n    }\n\n    if (!isEqual(this.variables, variables)) {\n      // update observable variables\n      this.variables = Object.assign({}, this.variables, variables);\n    }\n\n    if (!isEqual(this.options.variables, this.variables)) {\n      // Update the existing options with new variables\n      this.options.variables = Object.assign({}, this.options.variables, this.variables);\n    } // Override fetchPolicy for this call only\n    // only network-only and no-cache are safe to use\n\n\n    var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n\n    var combinedOptions = __assign({}, this.options, {\n      fetchPolicy: isNetworkFetchPolicy ? fetchPolicy : 'network-only'\n    });\n\n    return this.queryManager.fetchQuery(this.queryId, combinedOptions, FetchType.refetch).then(function (result) {\n      return maybeDeepFreeze(result);\n    });\n  };\n\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this; // early return if no update Query\n\n\n    if (!fetchMoreOptions.updateQuery) {\n      throw new Error('updateQuery option is required. This function defines how to update the query data with the new results.');\n    }\n\n    var combinedOptions;\n    return Promise.resolve().then(function () {\n      var qid = _this.queryManager.generateQueryId();\n\n      if (fetchMoreOptions.query) {\n        // fetch a new query\n        combinedOptions = fetchMoreOptions;\n      } else {\n        // fetch the same query with a possibly new variables\n        combinedOptions = __assign({}, _this.options, fetchMoreOptions, {\n          variables: Object.assign({}, _this.variables, fetchMoreOptions.variables)\n        });\n      }\n\n      combinedOptions.fetchPolicy = 'network-only';\n      return _this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, _this.queryId);\n    }).then(function (fetchMoreResult) {\n      _this.updateQuery(function (previousResult) {\n        return fetchMoreOptions.updateQuery(previousResult, {\n          fetchMoreResult: fetchMoreResult.data,\n          variables: combinedOptions.variables\n        });\n      });\n\n      return fetchMoreResult;\n    });\n  }; // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n\n\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables\n    }).subscribe({\n      next: function next(data) {\n        if (options.updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return options.updateQuery(previous, {\n              subscriptionData: data,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function error(err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n\n        console.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptionHandles.push(subscription);\n    return function () {\n      var i = _this.subscriptionHandles.indexOf(subscription);\n\n      if (i >= 0) {\n        _this.subscriptionHandles.splice(i, 1);\n\n        subscription.unsubscribe();\n      }\n    };\n  }; // Note: if the query is not active (there are no subscribers), the promise\n  // will return null immediately.\n\n\n  ObservableQuery.prototype.setOptions = function (opts) {\n    var oldOptions = this.options;\n    this.options = Object.assign({}, this.options, opts);\n\n    if (opts.pollInterval) {\n      this.startPolling(opts.pollInterval);\n    } else if (opts.pollInterval === 0) {\n      this.stopPolling();\n    } // If fetchPolicy went from cache-only to something else, or from something else to network-only\n\n\n    var tryFetch = oldOptions.fetchPolicy !== 'network-only' && opts.fetchPolicy === 'network-only' || oldOptions.fetchPolicy === 'cache-only' && opts.fetchPolicy !== 'cache-only' || oldOptions.fetchPolicy === 'standby' && opts.fetchPolicy !== 'standby' || false;\n    return this.setVariables(this.options.variables, tryFetch, opts.fetchResults);\n  };\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: if the variables have not changed, the promise will return the old\n   * results immediately, and the `next` callback will *not* fire.\n   *\n   * Note: if the query is not active (there are no subscribers), the promise\n   * will return null immediately.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   *\n   * @param tryFetch: Try and fetch new results even if the variables haven't\n   * changed (we may still just hit the store, but if there's nothing in there\n   * this will refetch)\n   *\n   * @param fetchResults: Option to ignore fetching results when updating variables\n   *\n   */\n\n\n  ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n    if (tryFetch === void 0) {\n      tryFetch = false;\n    }\n\n    if (fetchResults === void 0) {\n      fetchResults = true;\n    } // since setVariables restarts the subscription, we reset the tornDown status\n\n\n    this.isTornDown = false;\n    var newVariables = variables ? variables : this.variables;\n\n    if (isEqual(newVariables, this.variables) && !tryFetch) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      if (this.observers.length === 0 || !fetchResults) {\n        return new Promise(function (resolve) {\n          return resolve();\n        });\n      }\n\n      return this.result();\n    } else {\n      this.variables = newVariables;\n      this.options.variables = newVariables; // See comment above\n\n      if (this.observers.length === 0) {\n        return new Promise(function (resolve) {\n          return resolve();\n        });\n      } // Use the same options as before, but with new variables\n\n\n      return this.queryManager.fetchQuery(this.queryId, __assign({}, this.options, {\n        variables: this.variables\n      })).then(function (result) {\n        return maybeDeepFreeze(result);\n      });\n    }\n  };\n\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var _a = this.queryManager.getQueryWithPreviousResult(this.queryId),\n        previousResult = _a.previousResult,\n        variables = _a.variables,\n        document = _a.document;\n\n    var newResult = tryFunctionOrLogError(function () {\n      return mapFn(previousResult, {\n        variables: variables\n      });\n    });\n\n    if (newResult) {\n      this.queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n      this.queryManager.broadcastQueries();\n    }\n  };\n\n  ObservableQuery.prototype.stopPolling = function () {\n    if (this.isCurrentlyPolling) {\n      this.scheduler.stopPollingQuery(this.queryId);\n      this.options.pollInterval = undefined;\n      this.isCurrentlyPolling = false;\n    }\n  };\n\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    if (this.options.fetchPolicy === 'cache-first' || this.options.fetchPolicy === 'cache-only') {\n      throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n    }\n\n    if (this.isCurrentlyPolling) {\n      this.scheduler.stopPollingQuery(this.queryId);\n      this.isCurrentlyPolling = false;\n    }\n\n    this.options.pollInterval = pollInterval;\n    this.isCurrentlyPolling = true;\n    this.scheduler.startPollingQuery(this.options, this.queryId);\n  };\n\n  ObservableQuery.prototype.onSubscribe = function (observer) {\n    var _this = this; // Zen Observable has its own error function, in order to log correctly\n    // we need to declare a custom error if nothing is passed\n\n\n    if (observer._subscription && observer._subscription._observer && !observer._subscription._observer.error) {\n      observer._subscription._observer.error = function (error) {\n        console.error('Unhandled error', error.message, error.stack);\n      };\n    }\n\n    this.observers.push(observer); // Deliver initial result\n\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError); // setup the query if it hasn't been done before\n\n    if (this.observers.length === 1) this.setUpQuery();\n    return function () {\n      _this.observers = _this.observers.filter(function (obs) {\n        return obs !== observer;\n      });\n\n      if (_this.observers.length === 0) {\n        _this.tearDownQuery();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setUpQuery = function () {\n    var _this = this;\n\n    if (this.shouldSubscribe) {\n      this.queryManager.addObservableQuery(this.queryId, this);\n    }\n\n    if (!!this.options.pollInterval) {\n      if (this.options.fetchPolicy === 'cache-first' || this.options.fetchPolicy === 'cache-only') {\n        throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n      }\n\n      this.isCurrentlyPolling = true;\n      this.scheduler.startPollingQuery(this.options, this.queryId);\n    }\n\n    var observer = {\n      next: function next(result) {\n        _this.lastResult = result;\n\n        _this.observers.forEach(function (obs) {\n          return obs.next && obs.next(result);\n        });\n      },\n      error: function error(_error2) {\n        _this.lastError = _error2;\n\n        _this.observers.forEach(function (obs) {\n          return obs.error && obs.error(_error2);\n        });\n      }\n    };\n    this.queryManager.startQuery(this.queryId, this.options, this.queryManager.queryListenerForObserver(this.queryId, this.options, observer));\n  };\n\n  ObservableQuery.prototype.tearDownQuery = function () {\n    this.isTornDown = true;\n\n    if (this.isCurrentlyPolling) {\n      this.scheduler.stopPollingQuery(this.queryId);\n      this.isCurrentlyPolling = false;\n    } // stop all active GraphQL subscriptions\n\n\n    this.subscriptionHandles.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptionHandles = [];\n    this.queryManager.removeObservableQuery(this.queryId);\n    this.queryManager.stopQuery(this.queryId);\n    this.observers = [];\n  };\n\n  return ObservableQuery;\n}(Observable);\n\nexport { ObservableQuery };","// The QueryScheduler is supposed to be a mechanism that schedules polling queries such that\n// they are clustered into the time slots of the QueryBatcher and are batched together. It\n// also makes sure that for a given polling query, if one instance of the query is inflight,\n// another instance will not be fired until the query returns or times out. We do this because\n// another query fires while one is already in flight, the data will stay in the \"loading\" state\n// even after the first query has returned.\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { FetchType } from '../core/types';\nimport { ObservableQuery } from '../core/ObservableQuery';\nimport { NetworkStatus } from '../core/networkStatus';\n\nvar QueryScheduler =\n/** @class */\nfunction () {\n  function QueryScheduler(_a) {\n    var queryManager = _a.queryManager,\n        ssrMode = _a.ssrMode; // Map going from queryIds to query options that are in flight.\n\n    this.inFlightQueries = {}; // Map going from query ids to the query options associated with those queries. Contains all of\n    // the queries, both in flight and not in flight.\n\n    this.registeredQueries = {}; // Map going from polling interval with to the query ids that fire on that interval.\n    // These query ids are associated with a set of options in the this.registeredQueries.\n\n    this.intervalQueries = {}; // Map going from polling interval widths to polling timers.\n\n    this.pollingTimers = {};\n    this.ssrMode = false;\n    this.queryManager = queryManager;\n    this.ssrMode = ssrMode || false;\n  }\n\n  QueryScheduler.prototype.checkInFlight = function (queryId) {\n    var query = this.queryManager.queryStore.get(queryId);\n    return query && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;\n  };\n\n  QueryScheduler.prototype.fetchQuery = function (queryId, options, fetchType) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.queryManager.fetchQuery(queryId, options, fetchType).then(function (result) {\n        resolve(result);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  };\n\n  QueryScheduler.prototype.startPollingQuery = function (options, queryId, listener) {\n    if (!options.pollInterval) {\n      throw new Error('Attempted to start a polling query without a polling interval.');\n    } // Do not poll in SSR mode\n\n\n    if (this.ssrMode) return queryId;\n    this.registeredQueries[queryId] = options;\n\n    if (listener) {\n      this.queryManager.addQueryListener(queryId, listener);\n    }\n\n    this.addQueryOnInterval(queryId, options);\n    return queryId;\n  };\n\n  QueryScheduler.prototype.stopPollingQuery = function (queryId) {\n    // Remove the query options from one of the registered queries.\n    // The polling function will then take care of not firing it anymore.\n    delete this.registeredQueries[queryId];\n  }; // Fires the all of the queries on a particular interval. Called on a setInterval.\n\n\n  QueryScheduler.prototype.fetchQueriesOnInterval = function (interval) {\n    var _this = this; // XXX this \"filter\" here is nasty, because it does two things at the same time.\n    // 1. remove queries that have stopped polling\n    // 2. call fetchQueries for queries that are polling and not in flight.\n    // TODO: refactor this to make it cleaner\n\n\n    this.intervalQueries[interval] = this.intervalQueries[interval].filter(function (queryId) {\n      // If queryOptions can't be found from registeredQueries or if it has a\n      // different interval, it means that this queryId is no longer registered\n      // and should be removed from the list of queries firing on this interval.\n      //\n      // We don't remove queries from intervalQueries immediately in\n      // stopPollingQuery so that we can keep the timer consistent when queries\n      // are removed and replaced, and to avoid quadratic behavior when stopping\n      // many queries.\n      if (!(_this.registeredQueries.hasOwnProperty(queryId) && _this.registeredQueries[queryId].pollInterval === interval)) {\n        return false;\n      } // Don't fire this instance of the polling query is one of the instances is already in\n      // flight.\n\n\n      if (_this.checkInFlight(queryId)) {\n        return true;\n      }\n\n      var queryOptions = _this.registeredQueries[queryId];\n\n      var pollingOptions = __assign({}, queryOptions);\n\n      pollingOptions.fetchPolicy = 'network-only'; // don't let unhandled rejections happen\n\n      _this.fetchQuery(queryId, pollingOptions, FetchType.poll).catch(function () {});\n\n      return true;\n    });\n\n    if (this.intervalQueries[interval].length === 0) {\n      clearInterval(this.pollingTimers[interval]);\n      delete this.intervalQueries[interval];\n    }\n  }; // Adds a query on a particular interval to this.intervalQueries and then fires\n  // that query with all the other queries executing on that interval. Note that the query id\n  // and query options must have been added to this.registeredQueries before this function is called.\n\n\n  QueryScheduler.prototype.addQueryOnInterval = function (queryId, queryOptions) {\n    var _this = this;\n\n    var interval = queryOptions.pollInterval;\n\n    if (!interval) {\n      throw new Error(\"A poll interval is required to start polling query with id '\" + queryId + \"'.\");\n    } // If there are other queries on this interval, this query will just fire with those\n    // and we don't need to create a new timer.\n\n\n    if (this.intervalQueries.hasOwnProperty(interval.toString()) && this.intervalQueries[interval].length > 0) {\n      this.intervalQueries[interval].push(queryId);\n    } else {\n      this.intervalQueries[interval] = [queryId]; // set up the timer for the function that will handle this interval\n\n      this.pollingTimers[interval] = setInterval(function () {\n        _this.fetchQueriesOnInterval(interval);\n      }, interval);\n    }\n  }; // Used only for unit testing.\n\n\n  QueryScheduler.prototype.registerPollingQuery = function (queryOptions) {\n    if (!queryOptions.pollInterval) {\n      throw new Error('Attempted to register a non-polling query with the scheduler.');\n    }\n\n    return new ObservableQuery({\n      scheduler: this,\n      options: queryOptions\n    });\n  };\n\n  return QueryScheduler;\n}();\n\nexport { QueryScheduler };","var MutationStore =\n/** @class */\nfunction () {\n  function MutationStore() {\n    this.store = {};\n  }\n\n  MutationStore.prototype.getStore = function () {\n    return this.store;\n  };\n\n  MutationStore.prototype.get = function (mutationId) {\n    return this.store[mutationId];\n  };\n\n  MutationStore.prototype.initMutation = function (mutationId, mutationString, variables) {\n    this.store[mutationId] = {\n      mutationString: mutationString,\n      variables: variables || {},\n      loading: true,\n      error: null\n    };\n  };\n\n  MutationStore.prototype.markMutationError = function (mutationId, error) {\n    var mutation = this.store[mutationId];\n\n    if (!mutation) {\n      return;\n    }\n\n    mutation.loading = false;\n    mutation.error = error;\n  };\n\n  MutationStore.prototype.markMutationResult = function (mutationId) {\n    var mutation = this.store[mutationId];\n\n    if (!mutation) {\n      return;\n    }\n\n    mutation.loading = false;\n    mutation.error = null;\n  };\n\n  MutationStore.prototype.reset = function () {\n    this.store = {};\n  };\n\n  return MutationStore;\n}();\n\nexport { MutationStore };","var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { print } from 'graphql/language/printer';\nimport { isEqual } from 'apollo-utilities';\nimport { NetworkStatus } from '../core/networkStatus';\n\nvar QueryStore =\n/** @class */\nfunction () {\n  function QueryStore() {\n    this.store = {};\n  }\n\n  QueryStore.prototype.getStore = function () {\n    return this.store;\n  };\n\n  QueryStore.prototype.get = function (queryId) {\n    return this.store[queryId];\n  };\n\n  QueryStore.prototype.initQuery = function (query) {\n    var previousQuery = this.store[query.queryId];\n\n    if (previousQuery && previousQuery.document !== query.document && print(previousQuery.document) !== print(query.document)) {\n      // XXX we're throwing an error here to catch bugs where a query gets overwritten by a new one.\n      // we should implement a separate action for refetching so that QUERY_INIT may never overwrite\n      // an existing query (see also: https://github.com/apollostack/apollo-client/issues/732)\n      throw new Error('Internal Error: may not update existing query string in store');\n    }\n\n    var isSetVariables = false;\n    var previousVariables = null;\n\n    if (query.storePreviousVariables && previousQuery && previousQuery.networkStatus !== NetworkStatus.loading // if the previous query was still loading, we don't want to remember it at all.\n    ) {\n        if (!isEqual(previousQuery.variables, query.variables)) {\n          isSetVariables = true;\n          previousVariables = previousQuery.variables;\n        }\n      } // TODO break this out into a separate function\n\n\n    var networkStatus;\n\n    if (isSetVariables) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch; // TODO: can we determine setVariables here if it's a refetch and the variables have changed?\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var graphQLErrors = [];\n\n    if (previousQuery && previousQuery.graphQLErrors) {\n      graphQLErrors = previousQuery.graphQLErrors;\n    } // XXX right now if QUERY_INIT is fired twice, like in a refetch situation, we just overwrite\n    // the store. We probably want a refetch action instead, because I suspect that if you refetch\n    // before the initial fetch is done, you'll get an error.\n\n\n    this.store[query.queryId] = {\n      document: query.document,\n      variables: query.variables,\n      previousVariables: previousVariables,\n      networkError: null,\n      graphQLErrors: graphQLErrors,\n      networkStatus: networkStatus,\n      metadata: query.metadata\n    }; // If the action had a `moreForQueryId` property then we need to set the\n    // network status on that query as well to `fetchMore`.\n    //\n    // We have a complement to this if statement in the query result and query\n    // error action branch, but importantly *not* in the client result branch.\n    // This is because the implementation of `fetchMore` *always* sets\n    // `fetchPolicy` to `network-only` so we would never have a client result.\n\n    if (typeof query.fetchMoreForQueryId === 'string' && this.store[query.fetchMoreForQueryId]) {\n      this.store[query.fetchMoreForQueryId].networkStatus = NetworkStatus.fetchMore;\n    }\n  };\n\n  QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n    if (!this.store[queryId]) return;\n    this.store[queryId].networkError = null;\n    this.store[queryId].graphQLErrors = result.errors && result.errors.length ? result.errors : [];\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = NetworkStatus.ready; // If we have a `fetchMoreForQueryId` then we need to update the network\n    // status for that query. See the branch for query initialization for more\n    // explanation about this process.\n\n    if (typeof fetchMoreForQueryId === 'string' && this.store[fetchMoreForQueryId]) {\n      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n    }\n  };\n\n  QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n    if (!this.store[queryId]) return;\n    this.store[queryId].networkError = error;\n    this.store[queryId].networkStatus = NetworkStatus.error; // If we have a `fetchMoreForQueryId` then we need to update the network\n    // status for that query. See the branch for query initialization for more\n    // explanation about this process.\n\n    if (typeof fetchMoreForQueryId === 'string') {\n      this.markQueryResultClient(fetchMoreForQueryId, true);\n    }\n  };\n\n  QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n    if (!this.store[queryId]) return;\n    this.store[queryId].networkError = null;\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = complete ? NetworkStatus.ready : NetworkStatus.loading;\n  };\n\n  QueryStore.prototype.stopQuery = function (queryId) {\n    delete this.store[queryId];\n  };\n\n  QueryStore.prototype.reset = function (observableQueryIds) {\n    var _this = this; // keep only the queries with query ids that are associated with observables\n\n\n    this.store = Object.keys(this.store).filter(function (queryId) {\n      return observableQueryIds.indexOf(queryId) > -1;\n    }).reduce(function (res, key) {\n      // XXX set loading to true so listeners don't trigger unless they want results with partial data\n      res[key] = __assign({}, _this.store[key], {\n        networkStatus: NetworkStatus.loading\n      });\n      return res;\n    }, {});\n  };\n\n  return QueryStore;\n}();\n\nexport { QueryStore };","var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { execute, ApolloLink } from 'apollo-link';\nimport { print } from 'graphql/language/printer';\nimport { DedupLink as Deduplicator } from 'apollo-link-dedup';\nimport { assign, getDefaultValues, getMutationDefinition, getOperationDefinition, getOperationName, getQueryDefinition, isProduction, maybeDeepFreeze, hasDirectives } from 'apollo-utilities';\nimport { QueryScheduler } from '../scheduler/scheduler';\nimport { isApolloError, ApolloError } from '../errors/ApolloError';\nimport { Observable } from '../util/Observable';\nimport { MutationStore } from '../data/mutations';\nimport { QueryStore } from '../data/queries';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { FetchType } from './types';\nimport { graphQLResultHasError } from 'apollo-utilities';\nvar defaultQueryInfo = {\n  listeners: [],\n  invalidated: false,\n  document: null,\n  newData: null,\n  lastRequestId: null,\n  observableQuery: null,\n  subscriptions: []\n};\n\nvar QueryManager =\n/** @class */\nfunction () {\n  function QueryManager(_a) {\n    var link = _a.link,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        store = _a.store,\n        _c = _a.onBroadcast,\n        onBroadcast = _c === void 0 ? function () {\n      return undefined;\n    } : _c,\n        _d = _a.ssrMode,\n        ssrMode = _d === void 0 ? false : _d;\n    this.mutationStore = new MutationStore();\n    this.queryStore = new QueryStore(); // let's not start at zero to avoid pain with bad checks\n\n    this.idCounter = 1; // XXX merge with ObservableQuery but that needs to be expanded to support mutations and\n    // subscriptions as well\n\n    this.queries = new Map(); // A map going from a requestId to a promise that has not yet been resolved. We use this to keep\n    // track of queries that are inflight and reject them in case some\n    // destabalizing action occurs (e.g. reset of the Apollo store).\n\n    this.fetchQueryPromises = new Map(); // A map going from the name of a query to an observer issued for it by watchQuery. This is\n    // generally used to refetches for refetchQueries and to update mutation results through\n    // updateQueries.\n\n    this.queryIdsByName = {};\n    this.link = link;\n    this.deduplicator = ApolloLink.from([new Deduplicator(), link]);\n    this.queryDeduplication = queryDeduplication;\n    this.dataStore = store;\n    this.onBroadcast = onBroadcast;\n    this.scheduler = new QueryScheduler({\n      queryManager: this,\n      ssrMode: ssrMode\n    });\n  }\n\n  QueryManager.prototype.mutate = function (_a) {\n    var _this = this;\n\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueriesByName = _a.updateQueries,\n        _b = _a.refetchQueries,\n        refetchQueries = _b === void 0 ? [] : _b,\n        updateWithProxyFn = _a.update,\n        _c = _a.errorPolicy,\n        errorPolicy = _c === void 0 ? 'none' : _c,\n        fetchPolicy = _a.fetchPolicy,\n        _d = _a.context,\n        context = _d === void 0 ? {} : _d;\n\n    if (!mutation) {\n      throw new Error('mutation option is required. You must specify your GraphQL document in the mutation option.');\n    }\n\n    if (fetchPolicy && fetchPolicy !== 'no-cache') {\n      throw new Error(\"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n    }\n\n    var mutationId = this.generateQueryId();\n    var cache = this.dataStore.getCache();\n    mutation = cache.transformDocument(mutation), variables = assign({}, getDefaultValues(getMutationDefinition(mutation)), variables);\n    var mutationString = print(mutation);\n    this.setQuery(mutationId, function () {\n      return {\n        document: mutation\n      };\n    }); // Create a map of update queries by id to the query instead of by name.\n\n    var generateUpdateQueriesInfo = function generateUpdateQueriesInfo() {\n      var ret = {};\n\n      if (updateQueriesByName) {\n        Object.keys(updateQueriesByName).forEach(function (queryName) {\n          return (_this.queryIdsByName[queryName] || []).forEach(function (queryId) {\n            ret[queryId] = {\n              updater: updateQueriesByName[queryName],\n              query: _this.queryStore.get(queryId)\n            };\n          });\n        });\n      }\n\n      return ret;\n    };\n\n    this.mutationStore.initMutation(mutationId, mutationString, variables);\n    this.dataStore.markMutationInit({\n      mutationId: mutationId,\n      document: mutation,\n      variables: variables || {},\n      updateQueries: generateUpdateQueriesInfo(),\n      update: updateWithProxyFn,\n      optimisticResponse: optimisticResponse\n    });\n    this.broadcastQueries();\n    return new Promise(function (resolve, reject) {\n      var storeResult;\n      var error;\n\n      var operation = _this.buildOperationForLink(mutation, variables, __assign({}, context, {\n        optimisticResponse: optimisticResponse\n      }));\n\n      execute(_this.link, operation).subscribe({\n        next: function next(result) {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            error = new ApolloError({\n              graphQLErrors: result.errors\n            });\n            return;\n          }\n\n          _this.mutationStore.markMutationResult(mutationId);\n\n          if (fetchPolicy !== 'no-cache') {\n            _this.dataStore.markMutationResult({\n              mutationId: mutationId,\n              result: result,\n              document: mutation,\n              variables: variables || {},\n              updateQueries: generateUpdateQueriesInfo(),\n              update: updateWithProxyFn\n            });\n          }\n\n          storeResult = result;\n        },\n        error: function error(err) {\n          _this.mutationStore.markMutationError(mutationId, err);\n\n          _this.dataStore.markMutationComplete({\n            mutationId: mutationId,\n            optimisticResponse: optimisticResponse\n          });\n\n          _this.broadcastQueries();\n\n          _this.setQuery(mutationId, function () {\n            return {\n              document: undefined\n            };\n          });\n\n          reject(new ApolloError({\n            networkError: err\n          }));\n        },\n        complete: function complete() {\n          if (error) {\n            _this.mutationStore.markMutationError(mutationId, error);\n          }\n\n          _this.dataStore.markMutationComplete({\n            mutationId: mutationId,\n            optimisticResponse: optimisticResponse\n          });\n\n          _this.broadcastQueries();\n\n          if (error) {\n            reject(error);\n            return;\n          } // allow for conditional refetches\n          // XXX do we want to make this the only API one day?\n\n\n          if (typeof refetchQueries === 'function') {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (refetchQueries) {\n            refetchQueries.forEach(function (refetchQuery) {\n              if (typeof refetchQuery === 'string') {\n                _this.refetchQueryByName(refetchQuery);\n\n                return;\n              }\n\n              _this.query({\n                query: refetchQuery.query,\n                variables: refetchQuery.variables,\n                fetchPolicy: 'network-only'\n              });\n            });\n          }\n\n          _this.setQuery(mutationId, function () {\n            return {\n              document: undefined\n            };\n          });\n\n          if (errorPolicy === 'ignore' && storeResult && graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          resolve(storeResult);\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, // This allows us to track if this is a query spawned by a `fetchMore`\n  // call for another query. We need this data to compute the `fetchMore`\n  // network status for the query this is fetching for.\n  fetchMoreForQueryId) {\n    var _this = this;\n\n    var _a = options.variables,\n        variables = _a === void 0 ? {} : _a,\n        _b = options.metadata,\n        metadata = _b === void 0 ? null : _b,\n        _c = options.fetchPolicy,\n        fetchPolicy = _c === void 0 ? 'cache-first' : _c;\n    var cache = this.dataStore.getCache();\n    var query = cache.transformDocument(options.query);\n    var storeResult;\n    var needToFetch = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache'; // If this is not a force fetch, we want to diff the query against the\n    // store before we fetch it from the network interface.\n    // TODO we hit the cache even if the policy is network-first. This could be unnecessary if the network is up.\n\n    if (fetchType !== FetchType.refetch && fetchPolicy !== 'network-only' && fetchPolicy !== 'no-cache') {\n      var _d = this.dataStore.getCache().diff({\n        query: query,\n        variables: variables,\n        returnPartialData: true,\n        optimistic: false\n      }),\n          complete = _d.complete,\n          result = _d.result; // If we're in here, only fetch if we have missing fields\n\n\n      needToFetch = !complete || fetchPolicy === 'cache-and-network';\n      storeResult = result;\n    }\n\n    var shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby'; // we need to check to see if this is an operation that uses the @live directive\n\n    if (hasDirectives(['live'], query)) shouldFetch = true;\n    var requestId = this.generateRequestId(); // set up a watcher to listen to cache updates\n\n    var cancel = this.updateQueryWatch(queryId, query, options); // Initialize query in store with unique requestId\n\n    this.setQuery(queryId, function () {\n      return {\n        document: query,\n        lastRequestId: requestId,\n        invalidated: true,\n        cancel: cancel\n      };\n    });\n    this.invalidate(true, fetchMoreForQueryId);\n    this.queryStore.initQuery({\n      queryId: queryId,\n      document: query,\n      storePreviousVariables: shouldFetch,\n      variables: variables,\n      isPoll: fetchType === FetchType.poll,\n      isRefetch: fetchType === FetchType.refetch,\n      metadata: metadata,\n      fetchMoreForQueryId: fetchMoreForQueryId\n    });\n    this.broadcastQueries(); // If there is no part of the query we need to fetch from the server (or,\n    // fetchPolicy is cache-only), we just write the store result as the final result.\n\n    var shouldDispatchClientResult = !shouldFetch || fetchPolicy === 'cache-and-network';\n\n    if (shouldDispatchClientResult) {\n      this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n      this.invalidate(true, queryId, fetchMoreForQueryId);\n      this.broadcastQueries();\n    }\n\n    if (shouldFetch) {\n      var networkResult = this.fetchRequest({\n        requestId: requestId,\n        queryId: queryId,\n        document: query,\n        options: options,\n        fetchMoreForQueryId: fetchMoreForQueryId\n      }).catch(function (error) {\n        // This is for the benefit of `refetch` promises, which currently don't get their errors\n        // through the store like watchQuery observers do\n        if (isApolloError(error)) {\n          throw error;\n        } else {\n          var lastRequestId = _this.getQuery(queryId).lastRequestId;\n\n          if (requestId >= (lastRequestId || 1)) {\n            _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n\n            _this.invalidate(true, queryId, fetchMoreForQueryId);\n\n            _this.broadcastQueries();\n          }\n\n          _this.removeFetchQueryPromise(requestId);\n\n          throw new ApolloError({\n            networkError: error\n          });\n        }\n      }); // we don't return the promise for cache-and-network since it is already\n      // returned below from the cache\n\n      if (fetchPolicy !== 'cache-and-network') {\n        return networkResult;\n      } else {\n        // however we need to catch the error so it isn't unhandled in case of\n        // network error\n        networkResult.catch(function () {});\n      }\n    } // If we have no query to send to the server, we should return the result\n    // found within the store.\n\n\n    return Promise.resolve({\n      data: storeResult\n    });\n  }; // Returns a query listener that will update the given observer based on the\n  // results (or lack thereof) for a particular query.\n\n\n  QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n    var _this = this;\n\n    var previouslyHadError = false;\n    return function (queryStoreValue, newData) {\n      // we're going to take a look at the data, so the query is no longer invalidated\n      _this.invalidate(false, queryId); // The query store value can be undefined in the event of a store\n      // reset.\n\n\n      if (!queryStoreValue) return;\n\n      var observableQuery = _this.getQuery(queryId).observableQuery;\n\n      var fetchPolicy = observableQuery ? observableQuery.options.fetchPolicy : options.fetchPolicy; // don't watch the store for queries on standby\n\n      if (fetchPolicy === 'standby') return;\n      var errorPolicy = observableQuery ? observableQuery.options.errorPolicy : options.errorPolicy;\n      var lastResult = observableQuery ? observableQuery.getLastResult() : null;\n      var lastError = observableQuery ? observableQuery.getLastError() : null;\n      var shouldNotifyIfLoading = !newData && queryStoreValue.previousVariables != null || fetchPolicy === 'cache-only' || fetchPolicy === 'cache-and-network'; // if this caused by a cache broadcast but the query is still in flight\n      // don't notify the observer\n      // if (\n      //   isCacheBroadcast &&\n      //   isNetworkRequestInFlight(queryStoreValue.networkStatus)\n      // ) {\n      //   shouldNotifyIfLoading = false;\n      // }\n\n      var networkStatusChanged = Boolean(lastResult && queryStoreValue.networkStatus !== lastResult.networkStatus);\n      var errorStatusChanged = errorPolicy && (lastError && lastError.graphQLErrors) !== queryStoreValue.graphQLErrors && errorPolicy !== 'none';\n\n      if (!isNetworkRequestInFlight(queryStoreValue.networkStatus) || networkStatusChanged && options.notifyOnNetworkStatusChange || shouldNotifyIfLoading) {\n        // If we have either a GraphQL error or a network error, we create\n        // an error and tell the observer about it.\n        if ((!errorPolicy || errorPolicy === 'none') && queryStoreValue.graphQLErrors && queryStoreValue.graphQLErrors.length > 0 || queryStoreValue.networkError) {\n          var apolloError_1 = new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError\n          });\n          previouslyHadError = true;\n\n          if (observer.error) {\n            try {\n              observer.error(apolloError_1);\n            } catch (e) {\n              // Throw error outside this control flow to avoid breaking Apollo's state\n              setTimeout(function () {\n                throw e;\n              }, 0);\n            }\n          } else {\n            // Throw error outside this control flow to avoid breaking Apollo's state\n            setTimeout(function () {\n              throw apolloError_1;\n            }, 0);\n\n            if (!isProduction()) {\n              /* tslint:disable-next-line */\n              console.info('An unhandled error was thrown because no error handler is registered ' + 'for the query ' + print(queryStoreValue.document));\n            }\n          }\n\n          return;\n        }\n\n        try {\n          var data = void 0;\n          var isMissing = void 0;\n\n          if (newData) {\n            // clear out the latest new data, since we're now using it\n            _this.setQuery(queryId, function () {\n              return {\n                newData: null\n              };\n            });\n\n            data = newData.result;\n            isMissing = !newData.complete || false;\n          } else {\n            if (lastResult && lastResult.data && !errorStatusChanged) {\n              data = lastResult.data;\n              isMissing = false;\n            } else {\n              var document_1 = _this.getQuery(queryId).document;\n\n              var readResult = _this.dataStore.getCache().diff({\n                query: document_1,\n                variables: queryStoreValue.previousVariables || queryStoreValue.variables,\n                optimistic: true\n              });\n\n              data = readResult.result;\n              isMissing = !readResult.complete;\n            }\n          }\n\n          var resultFromStore = void 0; // If there is some data missing and the user has told us that they\n          // do not tolerate partial data then we want to return the previous\n          // result and mark it as stale.\n\n          if (isMissing && fetchPolicy !== 'cache-only') {\n            resultFromStore = {\n              data: lastResult && lastResult.data,\n              loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n              networkStatus: queryStoreValue.networkStatus,\n              stale: true\n            };\n          } else {\n            resultFromStore = {\n              data: data,\n              loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n              networkStatus: queryStoreValue.networkStatus,\n              stale: false\n            };\n          } // if the query wants updates on errors we need to add it to the result\n\n\n          if (errorPolicy === 'all' && queryStoreValue.graphQLErrors && queryStoreValue.graphQLErrors.length > 0) {\n            resultFromStore.errors = queryStoreValue.graphQLErrors;\n          }\n\n          if (observer.next) {\n            var isDifferentResult = !(lastResult && resultFromStore && lastResult.networkStatus === resultFromStore.networkStatus && lastResult.stale === resultFromStore.stale && // We can do a strict equality check here because we include a `previousResult`\n            // with `readQueryFromStore`. So if the results are the same they will be\n            // referentially equal.\n            lastResult.data === resultFromStore.data);\n\n            if (isDifferentResult || previouslyHadError) {\n              try {\n                observer.next(maybeDeepFreeze(resultFromStore));\n              } catch (e) {\n                // Throw error outside this control flow to avoid breaking Apollo's state\n                setTimeout(function () {\n                  throw e;\n                }, 0);\n              }\n            }\n          }\n\n          previouslyHadError = false;\n        } catch (error) {\n          previouslyHadError = true;\n          if (observer.error) observer.error(new ApolloError({\n            networkError: error\n          }));\n          return;\n        }\n      }\n    };\n  }; // The shouldSubscribe option is a temporary fix that tells us whether watchQuery was called\n  // directly (i.e. through ApolloClient) or through the query method within QueryManager.\n  // Currently, the query method uses watchQuery in order to handle non-network errors correctly\n  // but we don't want to keep track observables issued for the query method since those aren't\n  // supposed to be refetched in the event of a store reset. Once we unify error handling for\n  // network errors and non-network errors, the shouldSubscribe option will go away.\n\n\n  QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n    if (shouldSubscribe === void 0) {\n      shouldSubscribe = true;\n    }\n\n    if (options.fetchPolicy === 'standby') {\n      throw new Error('client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n    } // get errors synchronously\n\n\n    var queryDefinition = getQueryDefinition(options.query); // assign variable default values if supplied\n\n    if (queryDefinition.variableDefinitions && queryDefinition.variableDefinitions.length) {\n      var defaultValues = getDefaultValues(queryDefinition);\n      options.variables = assign({}, defaultValues, options.variables);\n    }\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var transformedOptions = __assign({}, options);\n\n    return new ObservableQuery({\n      scheduler: this.scheduler,\n      options: transformedOptions,\n      shouldSubscribe: shouldSubscribe\n    });\n  };\n\n  QueryManager.prototype.query = function (options) {\n    var _this = this;\n\n    if (!options.query) {\n      throw new Error('query option is required. You must specify your GraphQL document ' + 'in the query option.');\n    }\n\n    if (options.query.kind !== 'Document') {\n      throw new Error('You must wrap the query string in a \"gql\" tag.');\n    }\n\n    if (options.returnPartialData) {\n      throw new Error('returnPartialData option only supported on watchQuery.');\n    }\n\n    if (options.pollInterval) {\n      throw new Error('pollInterval option only supported on watchQuery.');\n    }\n\n    var requestId = this.idCounter;\n    return new Promise(function (resolve, reject) {\n      _this.addFetchQueryPromise(requestId, resolve, reject);\n\n      return _this.watchQuery(options, false).result().then(function (result) {\n        _this.removeFetchQueryPromise(requestId);\n\n        resolve(result);\n      }).catch(function (error) {\n        _this.removeFetchQueryPromise(requestId);\n\n        reject(error);\n      });\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    var queryId = this.idCounter.toString();\n    this.idCounter++;\n    return queryId;\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.queryStore.stopQuery(queryId);\n    this.invalidate(true, queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.addQueryListener = function (queryId, listener) {\n    this.setQuery(queryId, function (_a) {\n      var _b = _a.listeners,\n          listeners = _b === void 0 ? [] : _b;\n      return {\n        listeners: listeners.concat([listener]),\n        invalidate: false\n      };\n    });\n  };\n\n  QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n    var _this = this;\n\n    var cancel = this.getQuery(queryId).cancel;\n    if (cancel) cancel();\n\n    var previousResult = function previousResult() {\n      var previousResult = null;\n\n      var observableQuery = _this.getQuery(queryId).observableQuery;\n\n      if (observableQuery) {\n        var lastResult = observableQuery.getLastResult();\n\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n\n      return previousResult;\n    };\n\n    return this.dataStore.getCache().watch({\n      query: document,\n      variables: options.variables,\n      optimistic: true,\n      previousResult: previousResult,\n      callback: function callback(newData) {\n        _this.setQuery(queryId, function () {\n          return {\n            invalidated: true,\n            newData: newData\n          };\n        });\n      }\n    });\n  }; // Adds a promise to this.fetchQueryPromises for a given request ID.\n\n\n  QueryManager.prototype.addFetchQueryPromise = function (requestId, resolve, reject) {\n    this.fetchQueryPromises.set(requestId.toString(), {\n      resolve: resolve,\n      reject: reject\n    });\n  }; // Removes the promise in this.fetchQueryPromises for a particular request ID.\n\n\n  QueryManager.prototype.removeFetchQueryPromise = function (requestId) {\n    this.fetchQueryPromises.delete(requestId.toString());\n  }; // Adds an ObservableQuery to this.observableQueries and to this.observableQueriesByName.\n\n\n  QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: observableQuery\n      };\n    }); // Insert the ObservableQuery into this.observableQueriesByName if the query has a name\n\n    var queryDef = getQueryDefinition(observableQuery.options.query);\n\n    if (queryDef.name && queryDef.name.value) {\n      var queryName = queryDef.name.value; // XXX we may we want to warn the user about query name conflicts in the future\n\n      this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];\n      this.queryIdsByName[queryName].push(observableQuery.queryId);\n    }\n  };\n\n  QueryManager.prototype.removeObservableQuery = function (queryId) {\n    var _a = this.getQuery(queryId),\n        observableQuery = _a.observableQuery,\n        cancel = _a.cancel;\n\n    if (cancel) cancel();\n    if (!observableQuery) return;\n    var definition = getQueryDefinition(observableQuery.options.query);\n    var queryName = definition.name ? definition.name.value : null;\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: null\n      };\n    });\n\n    if (queryName) {\n      this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {\n        return !(observableQuery.queryId === val);\n      });\n    }\n  };\n\n  QueryManager.prototype.clearStore = function () {\n    // Before we have sent the reset action to the store,\n    // we can no longer rely on the results returned by in-flight\n    // requests since these may depend on values that previously existed\n    // in the data portion of the store. So, we cancel the promises and observers\n    // that we have issued so far and not yet resolved (in the case of\n    // queries).\n    this.fetchQueryPromises.forEach(function (_a) {\n      var reject = _a.reject;\n      reject(new Error('Store reset while query was in flight(not completed in link chain)'));\n    });\n    var resetIds = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (observableQuery) resetIds.push(queryId);\n    });\n    this.queryStore.reset(resetIds);\n    this.mutationStore.reset(); // begin removing data from the store\n\n    var reset = this.dataStore.reset();\n    return reset;\n  };\n\n  QueryManager.prototype.resetStore = function () {\n    var _this = this; // Similarly, we have to have to refetch each of the queries currently being\n    // observed. We refetch instead of error'ing on these since the assumption is that\n    // resetting the store doesn't eliminate the need for the queries currently being\n    // watched. If there is an existing query in flight when the store is reset,\n    // the promise for it will be rejected and its results will not be written to the\n    // store.\n\n\n    return this.clearStore().then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n\n  QueryManager.prototype.getObservableQueryPromises = function (includeStandby) {\n    var _this = this;\n\n    var observableQueryPromises = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (!observableQuery) return;\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n\n      if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n\n      _this.setQuery(queryId, function () {\n        return {\n          newData: null\n        };\n      });\n\n      _this.invalidate(true, queryId);\n    });\n    return observableQueryPromises;\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var observableQueryPromises = this.getObservableQueryPromises(includeStandby);\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.startQuery = function (queryId, options, listener) {\n    this.addQueryListener(queryId, listener);\n    this.fetchQuery(queryId, options) // `fetchQuery` returns a Promise. In case of a failure it should be caucht or else the\n    // console will show an `Uncaught (in promise)` message. Ignore the error for now.\n    .catch(function () {\n      return undefined;\n    });\n    return queryId;\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (options) {\n    var _this = this;\n\n    var query = options.query;\n    var cache = this.dataStore.getCache();\n    var transformedDoc = cache.transformDocument(query);\n    var variables = assign({}, getDefaultValues(getOperationDefinition(query)), options.variables);\n    var sub;\n    var observers = [];\n    return new Observable(function (observer) {\n      observers.push(observer); // If this is the first observer, actually initiate the network subscription\n\n      if (observers.length === 1) {\n        var handler = {\n          next: function next(result) {\n            _this.dataStore.markSubscriptionResult(result, transformedDoc, variables);\n\n            _this.broadcastQueries(); // It's slightly awkward that the data for subscriptions doesn't come from the store.\n\n\n            observers.forEach(function (obs) {\n              // XXX I'd prefer a different way to handle errors for subscriptions\n              if (obs.next) obs.next(result);\n            });\n          },\n          error: function error(_error) {\n            observers.forEach(function (obs) {\n              if (obs.error) obs.error(_error);\n            });\n          }\n        }; // TODO: Should subscriptions also accept a `context` option to pass\n        // through to links?\n\n        var operation = _this.buildOperationForLink(transformedDoc, variables);\n\n        sub = execute(_this.link, operation).subscribe(handler);\n      }\n\n      return function () {\n        observers = observers.filter(function (obs) {\n          return obs !== observer;\n        }); // If we removed the last observer, tear down the network subscription\n\n        if (observers.length === 0 && sub) {\n          sub.unsubscribe();\n        }\n      };\n    });\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryInStore(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    var subscriptions = this.getQuery(queryId).subscriptions; // teardown all links\n\n    subscriptions.forEach(function (x) {\n      return x.unsubscribe();\n    });\n    this.queries.delete(queryId);\n  };\n\n  QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = true;\n    }\n\n    var _a = observableQuery.options,\n        variables = _a.variables,\n        query = _a.query;\n    var lastResult = observableQuery.getLastResult();\n    var newData = this.getQuery(observableQuery.queryId).newData; // XXX test this\n\n    if (newData) {\n      return maybeDeepFreeze({\n        data: newData.result,\n        partial: false\n      });\n    } else {\n      try {\n        // the query is brand new, so we read from the store to see if anything is there\n        var data = this.dataStore.getCache().read({\n          query: query,\n          variables: variables,\n          previousResult: lastResult ? lastResult.data : undefined,\n          optimistic: optimistic\n        });\n        return maybeDeepFreeze({\n          data: data,\n          partial: false\n        });\n      } catch (e) {\n        return maybeDeepFreeze({\n          data: {},\n          partial: true\n        });\n      }\n    }\n  };\n\n  QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n    var observableQuery;\n\n    if (typeof queryIdOrObservable === 'string') {\n      var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n\n      if (!foundObserveableQuery) {\n        throw new Error(\"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n      }\n\n      observableQuery = foundObserveableQuery;\n    } else {\n      observableQuery = queryIdOrObservable;\n    }\n\n    var _a = observableQuery.options,\n        variables = _a.variables,\n        query = _a.query;\n    var data = this.getCurrentQueryResult(observableQuery, false).data;\n    return {\n      previousResult: data,\n      variables: variables,\n      document: query\n    };\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    var _this = this;\n\n    this.onBroadcast();\n    this.queries.forEach(function (info, id) {\n      if (!info.invalidated || !info.listeners) return;\n      info.listeners // it's possible for the listener to be undefined if the query is being stopped\n      // See here for more detail: https://github.com/apollostack/apollo-client/issues/231\n      .filter(function (x) {\n        return !!x;\n      }).forEach(function (listener) {\n        listener(_this.queryStore.get(id), info.newData);\n      });\n    });\n  }; // Takes a request id, query id, a query document and information associated with the query\n  // and send it to the network interface. Returns\n  // a promise for the result associated with that request.\n\n\n  QueryManager.prototype.fetchRequest = function (_a) {\n    var _this = this;\n\n    var requestId = _a.requestId,\n        queryId = _a.queryId,\n        document = _a.document,\n        options = _a.options,\n        fetchMoreForQueryId = _a.fetchMoreForQueryId;\n    var variables = options.variables,\n        context = options.context,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? 'none' : _b,\n        fetchPolicy = options.fetchPolicy;\n    var operation = this.buildOperationForLink(document, variables, __assign({}, context, {\n      // TODO: Should this be included for all entry points via\n      // buildOperationForLink?\n      forceFetch: !this.queryDeduplication\n    }));\n    var resultFromStore;\n    var errorsFromStore;\n    return new Promise(function (resolve, reject) {\n      _this.addFetchQueryPromise(requestId, resolve, reject);\n\n      var subscription = execute(_this.deduplicator, operation).subscribe({\n        next: function next(result) {\n          // default the lastRequestId to 1\n          var lastRequestId = _this.getQuery(queryId).lastRequestId;\n\n          if (requestId >= (lastRequestId || 1)) {\n            if (fetchPolicy !== 'no-cache') {\n              try {\n                _this.dataStore.markQueryResult(result, document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n              } catch (e) {\n                reject(e);\n                return;\n              }\n            } else {\n              _this.setQuery(queryId, function () {\n                return {\n                  newData: {\n                    result: result.data,\n                    complete: true\n                  }\n                };\n              });\n            }\n\n            _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n\n            _this.invalidate(true, queryId, fetchMoreForQueryId);\n\n            _this.broadcastQueries();\n          }\n\n          if (result.errors && errorPolicy === 'none') {\n            reject(new ApolloError({\n              graphQLErrors: result.errors\n            }));\n            return;\n          } else if (errorPolicy === 'all') {\n            errorsFromStore = result.errors;\n          }\n\n          if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n            // We don't write fetchMore results to the store because this would overwrite\n            // the original result in case an @connection directive is used.\n            resultFromStore = result.data;\n          } else {\n            try {\n              // ensure result is combined with data already in store\n              resultFromStore = _this.dataStore.getCache().read({\n                variables: variables,\n                query: document,\n                optimistic: false\n              }); // this will throw an error if there are missing fields in\n              // the results which can happen with errors from the server.\n              // tslint:disable-next-line\n            } catch (e) {}\n          }\n        },\n        error: function error(_error2) {\n          _this.removeFetchQueryPromise(requestId);\n\n          _this.setQuery(queryId, function (_a) {\n            var subscriptions = _a.subscriptions;\n            return {\n              subscriptions: subscriptions.filter(function (x) {\n                return x !== subscription;\n              })\n            };\n          });\n\n          reject(_error2);\n        },\n        complete: function complete() {\n          _this.removeFetchQueryPromise(requestId);\n\n          _this.setQuery(queryId, function (_a) {\n            var subscriptions = _a.subscriptions;\n            return {\n              subscriptions: subscriptions.filter(function (x) {\n                return x !== subscription;\n              })\n            };\n          });\n\n          resolve({\n            data: resultFromStore,\n            errors: errorsFromStore,\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            stale: false\n          });\n        }\n      });\n\n      _this.setQuery(queryId, function (_a) {\n        var subscriptions = _a.subscriptions;\n        return {\n          subscriptions: subscriptions.concat([subscription])\n        };\n      });\n    });\n  }; // Refetches a query given that query's name. Refetches\n  // all ObservableQuery instances associated with the query name.\n\n\n  QueryManager.prototype.refetchQueryByName = function (queryName) {\n    var _this = this;\n\n    var refetchedQueries = this.queryIdsByName[queryName]; // early return if the query named does not exist (not yet fetched)\n    // this used to warn but it may be inteneded behavoir to try and refetch\n    // un called queries because they could be on different routes\n\n    if (refetchedQueries === undefined) return;\n    return Promise.all(refetchedQueries.map(function (id) {\n      return _this.getQuery(id).observableQuery;\n    }).filter(function (x) {\n      return !!x;\n    }).map(function (x) {\n      return x.refetch();\n    }));\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    var requestId = this.idCounter;\n    this.idCounter++;\n    return requestId;\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    return this.queries.get(queryId) || __assign({}, defaultQueryInfo);\n  };\n\n  QueryManager.prototype.setQuery = function (queryId, updater) {\n    var prev = this.getQuery(queryId);\n\n    var newInfo = __assign({}, prev, updater(prev));\n\n    this.queries.set(queryId, newInfo);\n  };\n\n  QueryManager.prototype.invalidate = function (invalidated, queryId, fetchMoreForQueryId) {\n    if (queryId) this.setQuery(queryId, function () {\n      return {\n        invalidated: invalidated\n      };\n    });\n\n    if (fetchMoreForQueryId) {\n      this.setQuery(fetchMoreForQueryId, function () {\n        return {\n          invalidated: invalidated\n        };\n      });\n    }\n  };\n\n  QueryManager.prototype.buildOperationForLink = function (document, variables, extraContext) {\n    var cache = this.dataStore.getCache();\n    return {\n      query: cache.transformForLink ? cache.transformForLink(document) : document,\n      variables: variables,\n      operationName: getOperationName(document) || undefined,\n      context: __assign({}, extraContext, {\n        cache: cache,\n        // getting an entry's cache key is useful for cacheResolvers & state-link\n        getCacheKey: function getCacheKey(obj) {\n          if (cache.config) {\n            // on the link, we just want the id string, not the full id value from toIdValue\n            return cache.config.dataIdFromObject(obj);\n          } else {\n            throw new Error('To use context.getCacheKey, you need to use a cache that has a configurable dataIdFromObject, like apollo-cache-inmemory.');\n          }\n        }\n      })\n    };\n  };\n\n  return QueryManager;\n}();\n\nexport { QueryManager };","import { getOperationName, tryFunctionOrLogError, graphQLResultHasError } from 'apollo-utilities';\n\nvar DataStore =\n/** @class */\nfunction () {\n  function DataStore(initialCache) {\n    this.cache = initialCache;\n  }\n\n  DataStore.prototype.getCache = function () {\n    return this.cache;\n  };\n\n  DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n    if (ignoreErrors === void 0) {\n      ignoreErrors = false;\n    }\n\n    var writeWithErrors = !graphQLResultHasError(result);\n\n    if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n      writeWithErrors = true;\n    }\n\n    if (!fetchMoreForQueryId && writeWithErrors) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_QUERY',\n        query: document,\n        variables: variables\n      });\n    }\n  };\n\n  DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n    // the subscription interface should handle not sending us results we no longer subscribe to.\n    // XXX I don't think we ever send in an object with errors, but we might in the future...\n    if (!graphQLResultHasError(result)) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_SUBSCRIPTION',\n        query: document,\n        variables: variables\n      });\n    }\n  };\n\n  DataStore.prototype.markMutationInit = function (mutation) {\n    var _this = this;\n\n    if (mutation.optimisticResponse) {\n      var optimistic_1;\n\n      if (typeof mutation.optimisticResponse === 'function') {\n        optimistic_1 = mutation.optimisticResponse(mutation.variables);\n      } else {\n        optimistic_1 = mutation.optimisticResponse;\n      }\n\n      var changeFn_1 = function changeFn_1() {\n        _this.markMutationResult({\n          mutationId: mutation.mutationId,\n          result: {\n            data: optimistic_1\n          },\n          document: mutation.document,\n          variables: mutation.variables,\n          updateQueries: mutation.updateQueries,\n          update: mutation.update\n        });\n      };\n\n      this.cache.recordOptimisticTransaction(function (c) {\n        var orig = _this.cache;\n        _this.cache = c;\n\n        try {\n          changeFn_1();\n        } finally {\n          _this.cache = orig;\n        }\n      }, mutation.mutationId);\n    }\n  };\n\n  DataStore.prototype.markMutationResult = function (mutation) {\n    var _this = this; // Incorporate the result from this mutation into the store\n\n\n    if (!graphQLResultHasError(mutation.result)) {\n      var cacheWrites_1 = [];\n      cacheWrites_1.push({\n        result: mutation.result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      });\n\n      if (mutation.updateQueries) {\n        Object.keys(mutation.updateQueries).filter(function (id) {\n          return mutation.updateQueries[id];\n        }).forEach(function (queryId) {\n          var _a = mutation.updateQueries[queryId],\n              query = _a.query,\n              updater = _a.updater; // Read the current query result from the store.\n\n          var _b = _this.cache.diff({\n            query: query.document,\n            variables: query.variables,\n            returnPartialData: true,\n            optimistic: false\n          }),\n              currentQueryResult = _b.result,\n              complete = _b.complete;\n\n          if (!complete) {\n            return;\n          } // Run our reducer using the current query result and the mutation result.\n\n\n          var nextQueryResult = tryFunctionOrLogError(function () {\n            return updater(currentQueryResult, {\n              mutationResult: mutation.result,\n              queryName: getOperationName(query.document) || undefined,\n              queryVariables: query.variables\n            });\n          }); // Write the modified result back into the store if we got a new result.\n\n          if (nextQueryResult) {\n            cacheWrites_1.push({\n              result: nextQueryResult,\n              dataId: 'ROOT_QUERY',\n              query: query.document,\n              variables: query.variables\n            });\n          }\n        });\n      }\n\n      this.cache.performTransaction(function (c) {\n        cacheWrites_1.forEach(function (write) {\n          return c.write(write);\n        });\n      }); // If the mutation has some writes associated with it then we need to\n      // apply those writes to the store by running this reducer again with a\n      // write action.\n\n      var update_1 = mutation.update;\n\n      if (update_1) {\n        this.cache.performTransaction(function (c) {\n          tryFunctionOrLogError(function () {\n            return update_1(c, mutation.result);\n          });\n        });\n      }\n    }\n  };\n\n  DataStore.prototype.markMutationComplete = function (_a) {\n    var mutationId = _a.mutationId,\n        optimisticResponse = _a.optimisticResponse;\n    if (!optimisticResponse) return;\n    this.cache.removeOptimistic(mutationId);\n  };\n\n  DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n    this.cache.write({\n      result: newResult,\n      dataId: 'ROOT_QUERY',\n      variables: variables,\n      query: document\n    });\n  };\n\n  DataStore.prototype.reset = function () {\n    return this.cache.reset();\n  };\n\n  return DataStore;\n}();\n\nexport { DataStore };","var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { ApolloLink, execute } from 'apollo-link';\nimport { isProduction, removeConnectionDirectiveFromDocument } from 'apollo-utilities';\nimport { QueryManager } from './core/QueryManager';\nimport { DataStore } from './data/store';\nimport { version } from './version';\nvar hasSuggestedDevtools = false;\nvar supportedDirectives = new ApolloLink(function (operation, forward) {\n  operation.query = removeConnectionDirectiveFromDocument(operation.query);\n  return forward(operation);\n});\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\n\nvar ApolloClient =\n/** @class */\nfunction () {\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   */\n  function ApolloClient(options) {\n    var _this = this;\n\n    this.defaultOptions = {};\n    this.resetStoreCallbacks = [];\n    var link = options.link,\n        cache = options.cache,\n        _a = options.ssrMode,\n        ssrMode = _a === void 0 ? false : _a,\n        _b = options.ssrForceFetchDelay,\n        ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n        connectToDevTools = options.connectToDevTools,\n        _c = options.queryDeduplication,\n        queryDeduplication = _c === void 0 ? true : _c,\n        defaultOptions = options.defaultOptions;\n\n    if (!link || !cache) {\n      throw new Error(\"\\n        In order to initialize Apollo Client, you must specify link & cache properties on the config object.\\n        This is part of the required upgrade when migrating from Apollo Client 1.0 to Apollo Client 2.0.\\n        For more information, please visit:\\n          https://www.apollographql.com/docs/react/basics/setup.html\\n        to help you get started.\\n      \");\n    } // remove apollo-client supported directives\n\n\n    this.link = supportedDirectives.concat(link);\n    this.cache = cache;\n    this.store = new DataStore(cache);\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.ssrMode = ssrMode;\n    this.defaultOptions = defaultOptions || {};\n\n    if (ssrForceFetchDelay) {\n      setTimeout(function () {\n        return _this.disableNetworkFetches = false;\n      }, ssrForceFetchDelay);\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this); // Attach the client instance to window to let us be found by chrome devtools, but only in\n    // development mode\n\n    var defaultConnectToDevTools = !isProduction() && typeof window !== 'undefined' && !window.__APOLLO_CLIENT__;\n\n    if (typeof connectToDevTools === 'undefined' ? defaultConnectToDevTools : connectToDevTools && typeof window !== 'undefined') {\n      window.__APOLLO_CLIENT__ = this;\n    }\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n\n\n    if (!hasSuggestedDevtools && !isProduction()) {\n      hasSuggestedDevtools = true;\n\n      if (typeof window !== 'undefined' && window.document && window.top === window.self) {\n        // First check if devtools is not installed\n        if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n          // Only for Chrome\n          if (window.navigator && window.navigator.userAgent.indexOf('Chrome') > -1) {\n            // tslint:disable-next-line\n            console.debug('Download the Apollo DevTools ' + 'for a better development experience: ' + 'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n          }\n        }\n      }\n    }\n\n    this.version = version;\n  }\n  /**\n   * This watches the results of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer.\n   * <p /><p />\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   * <p /><p />\n   * For example, suppose you call watchQuery on a GraphQL query that fetches an person's\n   * first name and last name and this person has a particular object identifer, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and his/her first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   * <p /><p />\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   *\n   */\n\n\n  ApolloClient.prototype.watchQuery = function (options) {\n    this.initQueryManager();\n\n    if (this.defaultOptions.watchQuery) {\n      options = __assign({}, this.defaultOptions.watchQuery, options);\n    } // XXX Overwriting options is probably not the best way to do this long term...\n\n\n    if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options = __assign({}, options, {\n        fetchPolicy: 'cache-first'\n      });\n    }\n\n    return this.queryManager.watchQuery(options);\n  };\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n\n\n  ApolloClient.prototype.query = function (options) {\n    this.initQueryManager();\n\n    if (this.defaultOptions.query) {\n      options = __assign({}, this.defaultOptions.query, options);\n    }\n\n    if (options.fetchPolicy === 'cache-and-network') {\n      throw new Error('cache-and-network fetchPolicy can only be used with watchQuery');\n    } // XXX Overwriting options is probably not the best way to do this long\n    // term...\n\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = __assign({}, options, {\n        fetchPolicy: 'cache-first'\n      });\n    }\n\n    return this.queryManager.query(options);\n  };\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n\n\n  ApolloClient.prototype.mutate = function (options) {\n    this.initQueryManager();\n\n    if (this.defaultOptions.mutate) {\n      options = __assign({}, this.defaultOptions.mutate, options);\n    }\n\n    return this.queryManager.mutate(options);\n  };\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n\n\n  ApolloClient.prototype.subscribe = function (options) {\n    this.initQueryManager();\n    return this.queryManager.startGraphQLSubscription(options);\n  };\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   */\n\n\n  ApolloClient.prototype.readQuery = function (options) {\n    return this.initProxy().readQuery(options);\n  };\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n\n\n  ApolloClient.prototype.readFragment = function (options) {\n    return this.initProxy().readFragment(options);\n  };\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n\n\n  ApolloClient.prototype.writeQuery = function (options) {\n    var result = this.initProxy().writeQuery(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n\n\n  ApolloClient.prototype.writeFragment = function (options) {\n    var result = this.initProxy().writeFragment(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n  /**\n   * Sugar for writeQuery & writeFragment\n   * This method will construct a query from the data object passed in.\n   * If no id is supplied, writeData will write the data to the root.\n   * If an id is supplied, writeData will write a fragment to the object\n   * specified by the id in the store.\n   *\n   * Since you aren't passing in a query to check the shape of the data,\n   * you must pass in an object that conforms to the shape of valid GraphQL data.\n   */\n\n\n  ApolloClient.prototype.writeData = function (options) {\n    var result = this.initProxy().writeData(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n\n  ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n    this.devToolsHookCb = cb;\n  };\n\n  ApolloClient.prototype.__requestRaw = function (payload) {\n    return execute(this.link, payload);\n  };\n  /**\n   * This initializes the query manager that tracks queries and the cache\n   */\n\n\n  ApolloClient.prototype.initQueryManager = function () {\n    var _this = this;\n\n    if (this.queryManager) return;\n    this.queryManager = new QueryManager({\n      link: this.link,\n      store: this.store,\n      queryDeduplication: this.queryDeduplication,\n      ssrMode: this.ssrMode,\n      onBroadcast: function onBroadcast() {\n        if (_this.devToolsHookCb) {\n          _this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: _this.queryManager.queryStore.getStore(),\n              mutations: _this.queryManager.mutationStore.getStore()\n            },\n            dataWithOptimisticResults: _this.cache.extract(true)\n          });\n        }\n      }\n    });\n  };\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You’ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n\n\n  ApolloClient.prototype.resetStore = function () {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.queryManager ? _this.queryManager.clearStore() : Promise.resolve(null);\n    }).then(function () {\n      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    }).then(function () {\n      return _this.queryManager && _this.queryManager.reFetchObservableQueries ? _this.queryManager.reFetchObservableQueries() : Promise.resolve(null);\n    });\n  };\n  /**\n   * Allows callbacks to be registered that are executed with the store is reset.\n   * onResetStore returns an unsubscribe function for removing your registered callbacks.\n   */\n\n\n  ApolloClient.prototype.onResetStore = function (cb) {\n    var _this = this;\n\n    this.resetStoreCallbacks.push(cb);\n    return function () {\n      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n\n\n  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n    return this.queryManager ? this.queryManager.reFetchObservableQueries(includeStandby) : Promise.resolve(null);\n  };\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n\n\n  ApolloClient.prototype.extract = function (optimistic) {\n    return this.initProxy().extract(optimistic);\n  };\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n\n\n  ApolloClient.prototype.restore = function (serializedState) {\n    return this.initProxy().restore(serializedState);\n  };\n  /**\n   * Initializes a data proxy for this client instance if one does not already\n   * exist and returns either a previously initialized proxy instance or the\n   * newly initialized instance.\n   */\n\n\n  ApolloClient.prototype.initProxy = function () {\n    if (!this.proxy) {\n      this.initQueryManager();\n      this.proxy = this.cache;\n    }\n\n    return this.proxy;\n  };\n\n  return ApolloClient;\n}();\n\nexport default ApolloClient;","export { print as printAST } from 'graphql/language/printer';\nexport { ObservableQuery } from './core/ObservableQuery';\nexport { NetworkStatus } from './core/networkStatus';\nexport * from './core/types';\nexport { ApolloError } from './errors/ApolloError';\nimport ApolloClient from './ApolloClient'; // export the client as both default and named\n\nexport { ApolloClient };\nexport default ApolloClient;","var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { ApolloLink, Observable } from 'apollo-link';\n/*\n * Expects context to contain the forceFetch field if no dedup\n */\n\nvar DedupLink =\n/** @class */\nfunction (_super) {\n  __extends(DedupLink, _super);\n\n  function DedupLink() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.inFlightRequestObservables = new Map();\n    _this.subscribers = new Map();\n    return _this;\n  }\n\n  DedupLink.prototype.request = function (operation, forward) {\n    var _this = this; // sometimes we might not want to deduplicate a request, for example when we want to force fetch it.\n\n\n    if (operation.getContext().forceFetch) {\n      return forward(operation);\n    }\n\n    var key = operation.toKey();\n\n    var cleanup = function cleanup(key) {\n      _this.inFlightRequestObservables.delete(key);\n\n      var prev = _this.subscribers.get(key);\n\n      return prev;\n    };\n\n    if (!this.inFlightRequestObservables.get(key)) {\n      // this is a new request, i.e. we haven't deduplicated it yet\n      // call the next link\n      var singleObserver_1 = forward(operation);\n      var subscription_1;\n      var sharedObserver = new Observable(function (observer) {\n        // this will still be called by each subscriber regardless of\n        // deduplication status\n        var prev = _this.subscribers.get(key);\n\n        if (!prev) prev = {\n          next: [],\n          error: [],\n          complete: []\n        };\n\n        _this.subscribers.set(key, {\n          next: prev.next.concat([observer.next.bind(observer)]),\n          error: prev.error.concat([observer.error.bind(observer)]),\n          complete: prev.complete.concat([observer.complete.bind(observer)])\n        });\n\n        if (!subscription_1) {\n          subscription_1 = singleObserver_1.subscribe({\n            next: function next(result) {\n              var prev = cleanup(key);\n\n              _this.subscribers.delete(key);\n\n              if (prev) {\n                prev.next.forEach(function (next) {\n                  return next(result);\n                });\n                prev.complete.forEach(function (complete) {\n                  return complete();\n                });\n              }\n            },\n            error: function error(_error) {\n              var prev = cleanup(key);\n\n              _this.subscribers.delete(key);\n\n              if (prev) prev.error.forEach(function (err) {\n                return err(_error);\n              });\n            }\n          });\n        }\n\n        return function () {\n          if (subscription_1) subscription_1.unsubscribe();\n\n          _this.inFlightRequestObservables.delete(key);\n        };\n      });\n      this.inFlightRequestObservables.set(key, sharedObserver);\n    } // return shared Observable\n\n\n    return this.inFlightRequestObservables.get(key);\n  };\n\n  return DedupLink;\n}(ApolloLink);\n\nexport { DedupLink };","export * from './dedupLink';","\"use strict\";\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _index = require(\"./index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _graphql = require(\"./graphql\");\n\nvar _graphql2 = _interopRequireDefault(_graphql);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n(0, _graphql2.default)().forEach(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      name = _ref2[0],\n      params = _ref2[1];\n\n  return (0, _index2.default)(name, params);\n});","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require(\"./index\");\n\nexports.default = function () {\n  return [[\"Name\", {\n    builder: [\"value\"],\n    fields: {\n      value: {\n        optional: false,\n        validate: (0, _index.assertValueType)(\"string\")\n      }\n    },\n    aliases: [\"AST\"]\n  }], [\"Document\", {\n    builder: [\"definitions\"],\n    fields: {\n      definitions: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Definition\"))\n      }\n    },\n    aliases: [\"AST\"]\n  }], [\"OperationDefinition\", {\n    builder: [\"operation\", \"selectionSet\", \"name\", \"variableDefinitions\", \"directives\"],\n    fields: {\n      operation: {\n        optional: false,\n        validate: (0, _index.assertValueType)(\"string\")\n      },\n      selectionSet: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"SelectionSet\")\n      },\n      name: {\n        optional: true,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      variableDefinitions: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"VariableDefinition\"))\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\", \"Definition\"]\n  }], [\"VariableDefinition\", {\n    builder: [\"variable\", \"type\", \"defaultValue\"],\n    fields: {\n      variable: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Variable\")\n      },\n      type: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Type\")\n      },\n      defaultValue: {\n        optional: true,\n        validate: (0, _index.assertNodeType)(\"Value\")\n      }\n    },\n    aliases: [\"AST\"]\n  }], [\"Variable\", {\n    builder: [\"name\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      }\n    },\n    aliases: [\"AST\", \"Value\"]\n  }], [\"SelectionSet\", {\n    builder: [\"selections\"],\n    fields: {\n      selections: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Selection\"))\n      }\n    },\n    aliases: [\"AST\"]\n  }], [\"Field\", {\n    builder: [\"name\", \"alias\", \"arguments\", \"directives\", \"selectionSet\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      alias: {\n        optional: true,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      arguments: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Argument\"))\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      },\n      selectionSet: {\n        optional: true,\n        validate: (0, _index.assertNodeType)(\"SelectionSet\")\n      }\n    },\n    aliases: [\"AST\", \"Selection\"]\n  }], [\"Argument\", {\n    builder: [\"name\", \"value\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      value: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Value\")\n      }\n    },\n    aliases: [\"AST\"]\n  }], [\"FragmentSpread\", {\n    builder: [\"name\", \"directives\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\", \"Selection\"]\n  }], [\"InlineFragment\", {\n    builder: [\"selectionSet\", \"typeCondition\", \"directives\"],\n    fields: {\n      selectionSet: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"SelectionSet\")\n      },\n      typeCondition: {\n        optional: true,\n        validate: (0, _index.assertNodeType)(\"NamedType\")\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\", \"Selection\"]\n  }], [\"FragmentDefinition\", {\n    builder: [\"name\", \"typeCondition\", \"selectionSet\", \"directives\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      typeCondition: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"NamedType\")\n      },\n      selectionSet: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"SelectionSet\")\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\", \"Definition\"]\n  }], [\"IntValue\", {\n    builder: [\"value\"],\n    fields: {\n      value: {\n        optional: false,\n        validate: (0, _index.assertValueType)(\"string\")\n      }\n    },\n    aliases: [\"AST\", \"Value\"]\n  }], [\"FloatValue\", {\n    builder: [\"value\"],\n    fields: {\n      value: {\n        optional: false,\n        validate: (0, _index.assertValueType)(\"string\")\n      }\n    },\n    aliases: [\"AST\", \"Value\"]\n  }], [\"StringValue\", {\n    builder: [\"value\"],\n    fields: {\n      value: {\n        optional: false,\n        validate: (0, _index.assertValueType)(\"string\")\n      }\n    },\n    aliases: [\"AST\", \"Value\"]\n  }], [\"BooleanValue\", {\n    builder: [\"value\"],\n    fields: {\n      value: {\n        optional: false,\n        validate: (0, _index.assertValueType)(\"boolean\")\n      }\n    },\n    aliases: [\"AST\", \"Value\"]\n  }], [\"NullValue\", {\n    builder: [],\n    fields: {},\n    aliases: [\"AST\", \"Value\"]\n  }], [\"EnumValue\", {\n    builder: [\"value\"],\n    fields: {\n      value: {\n        optional: false,\n        validate: (0, _index.assertValueType)(\"string\")\n      }\n    },\n    aliases: [\"AST\", \"Value\"]\n  }], [\"ListValue\", {\n    builder: [\"values\"],\n    fields: {\n      values: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Value\"))\n      }\n    },\n    aliases: [\"AST\", \"Value\"]\n  }], [\"ObjectValue\", {\n    builder: [\"fields\"],\n    fields: {\n      fields: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"ObjectField\"))\n      }\n    },\n    aliases: [\"AST\", \"Value\"]\n  }], [\"ObjectField\", {\n    builder: [\"name\", \"value\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      value: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Value\")\n      }\n    },\n    aliases: [\"AST\"]\n  }], [\"Directive\", {\n    builder: [\"name\", \"arguments\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      arguments: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Argument\"))\n      }\n    },\n    aliases: [\"AST\"]\n  }], [\"NamedType\", {\n    builder: [\"name\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      }\n    },\n    aliases: [\"AST\", \"Type\"]\n  }], [\"ListType\", {\n    builder: [\"type\"],\n    fields: {\n      type: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Type\")\n      }\n    },\n    aliases: [\"AST\", \"Type\"]\n  }], [\"NonNullType\", {\n    builder: [\"type\"],\n    fields: {\n      type: {\n        optional: false,\n        validate: (0, _index.assertOneOf)(\"NamedType\", \"ListType\")\n      }\n    },\n    aliases: [\"AST\", \"Type\"]\n  }], [\"SchemaDefinition\", {\n    builder: [\"directives\", \"operationTypes\"],\n    fields: {\n      directives: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      },\n      operationTypes: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"OperationTypeDefinition\"))\n      }\n    },\n    aliases: [\"AST\", \"TypeSystemDefinition\"]\n  }], [\"OperationTypeDefinition\", {\n    builder: [\"operation\", \"type\"],\n    fields: {\n      operation: {\n        optional: false,\n        validate: (0, _index.assertValueType)(\"string\")\n      },\n      type: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"NamedType\")\n      }\n    },\n    aliases: [\"AST\"]\n  }], [\"ScalarTypeDefinition\", {\n    builder: [\"name\", \"directives\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\", \"TypeDefinition\"]\n  }], [\"ObjectTypeDefinition\", {\n    builder: [\"name\", \"fields\", \"interfaces\", \"directives\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      fields: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"FieldDefinition\"))\n      },\n      interfaces: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"NamedType\"))\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\", \"TypeDefinition\"]\n  }], [\"FieldDefinition\", {\n    builder: [\"name\", \"arguments\", \"type\", \"directives\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      arguments: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"InputValueDefinition\"))\n      },\n      type: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Type\")\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\"]\n  }], [\"InputValueDefinition\", {\n    builder: [\"name\", \"type\", \"defaultValue\", \"directives\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      type: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Type\")\n      },\n      defaultValue: {\n        optional: true,\n        validate: (0, _index.assertNodeType)(\"Value\")\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\"]\n  }], [\"InterfaceTypeDefinition\", {\n    builder: [\"name\", \"fields\", \"directives\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      fields: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"FieldDefinition\"))\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\", \"TypeDefinition\"]\n  }], [\"UnionTypeDefinition\", {\n    builder: [\"name\", \"types\", \"directives\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      types: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"NamedType\"))\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\", \"TypeDefinition\"]\n  }], [\"EnumTypeDefinition\", {\n    builder: [\"name\", \"values\", \"directives\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      values: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"EnumValueDefinition\"))\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\", \"TypeDefinition\"]\n  }], [\"EnumValueDefinition\", {\n    builder: [\"name\", \"directives\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\"]\n  }], [\"InputObjectTypeDefinition\", {\n    builder: [\"name\", \"fields\", \"directives\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      fields: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"InputValueDefinition\"))\n      },\n      directives: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Directive\"))\n      }\n    },\n    aliases: [\"AST\", \"TypeDefinition\"]\n  }], [\"TypeExtensionDefinition\", {\n    builder: [\"definition\"],\n    fields: {\n      definition: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"ObjectTypeDefinition\")\n      }\n    },\n    aliases: [\"AST\", \"TypeSystemDefinition\"]\n  }], [\"DirectiveDefinition\", {\n    builder: [\"name\", \"locations\", \"arguments\"],\n    fields: {\n      name: {\n        optional: false,\n        validate: (0, _index.assertNodeType)(\"Name\")\n      },\n      locations: {\n        optional: false,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"Name\"))\n      },\n      arguments: {\n        optional: true,\n        validate: (0, _index.assertArrayOf)((0, _index.assertNodeType)(\"InputValueDefinition\"))\n      }\n    },\n    aliases: [\"AST\", \"TypeSystemDefinition\"]\n  }]];\n};\n/* These are auto-generated definitions: Please do not edit this file directly */","/* global define */\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n\n  function sanitizeRule(rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n\n\n  function restoreCase(word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token; // Upper cased words. E.g. \"HELLO\".\n\n    if (word === word.toUpperCase()) return token.toUpperCase(); // Title cased words. E.g. \"Title\".\n\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    } // Lower cased words. E.g. \"test\".\n\n\n    return token.toLowerCase();\n  }\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n\n\n  function interpolate(str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n\n\n  function replace(word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n\n\n  function sanitizeWord(token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length; // Iterate over the sanitization rules and use the first one to match.\n\n    while (len--) {\n      var rule = rules[len];\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n\n\n  function replaceWord(replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase(); // Check against the keep object map.\n\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      } // Check against the replacement map for a direct word replacement.\n\n\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      } // Run all the rules against the word.\n\n\n      return sanitizeWord(token, word, rules);\n    };\n  }\n  /**\n   * Check if a word is part of the map.\n   */\n\n\n  function checkWord(replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word\n   * @param  {number}  count\n   * @param  {boolean} inclusive\n   * @return {string}\n   */\n\n\n  function pluralize(word, count, inclusive) {\n    var pluralized = count === 1 ? pluralize.singular(word) : pluralize.plural(word);\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n\n\n  pluralize.plural = replaceWord(irregularSingles, irregularPlurals, pluralRules);\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n\n  pluralize.isPlural = checkWord(irregularSingles, irregularPlurals, pluralRules);\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n\n  pluralize.singular = replaceWord(irregularPlurals, irregularSingles, singularRules);\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n\n  pluralize.isSingular = checkWord(irregularPlurals, irregularSingles, singularRules);\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n\n\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n\n\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    } // Set singular and plural references for the word.\n\n\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n\n\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n  /**\n   * Irregular rules.\n   */\n\n\n  [// Pronouns.\n  ['I', 'we'], ['me', 'us'], ['he', 'they'], ['she', 'they'], ['them', 'them'], ['myself', 'ourselves'], ['yourself', 'yourselves'], ['itself', 'themselves'], ['herself', 'themselves'], ['himself', 'themselves'], ['themself', 'themselves'], ['is', 'are'], ['was', 'were'], ['has', 'have'], ['this', 'these'], ['that', 'those'], // Words ending in with a consonant and `o`.\n  ['echo', 'echoes'], ['dingo', 'dingoes'], ['volcano', 'volcanoes'], ['tornado', 'tornadoes'], ['torpedo', 'torpedoes'], // Ends with `us`.\n  ['genus', 'genera'], ['viscus', 'viscera'], // Ends with `ma`.\n  ['stigma', 'stigmata'], ['stoma', 'stomata'], ['dogma', 'dogmata'], ['lemma', 'lemmata'], ['schema', 'schemata'], ['anathema', 'anathemata'], // Other irregular rules.\n  ['ox', 'oxen'], ['axe', 'axes'], ['die', 'dice'], ['yes', 'yeses'], ['foot', 'feet'], ['eave', 'eaves'], ['goose', 'geese'], ['tooth', 'teeth'], ['quiz', 'quizzes'], ['human', 'humans'], ['proof', 'proofs'], ['carve', 'carves'], ['valve', 'valves'], ['looey', 'looies'], ['thief', 'thieves'], ['groove', 'grooves'], ['pickaxe', 'pickaxes'], ['whiskey', 'whiskies']].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n  /**\n   * Pluralization rules.\n   */\n\n  [[/s?$/i, 's'], [/[^\\u0000-\\u007F]$/i, '$0'], [/([^aeiou]ese)$/i, '$1'], [/(ax|test)is$/i, '$1es'], [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'], [/(e[mn]u)s?$/i, '$1s'], [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'], [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'], [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'], [/(seraph|cherub)(?:im)?$/i, '$1im'], [/(her|at|gr)o$/i, '$1oes'], [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'], [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'], [/sis$/i, 'ses'], [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'], [/([^aeiouy]|qu)y$/i, '$1ies'], [/([^ch][ieo][ln])ey$/i, '$1ies'], [/(x|ch|ss|sh|zz)$/i, '$1es'], [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'], [/(m|l)(?:ice|ouse)$/i, '$1ice'], [/(pe)(?:rson|ople)$/i, '$1ople'], [/(child)(?:ren)?$/i, '$1ren'], [/eaux$/i, '$0'], [/m[ae]n$/i, 'men'], ['thou', 'you']].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n  /**\n   * Singularization rules.\n   */\n\n  [[/s$/i, ''], [/(ss)$/i, '$1'], [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'], [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'], [/ies$/i, 'y'], [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'], [/\\b(mon|smil)ies$/i, '$1ey'], [/(m|l)ice$/i, '$1ouse'], [/(seraph|cherub)im$/i, '$1'], [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'], [/(analy|ba|diagno|parenthe|progno|synop|the|empha|cri)(?:sis|ses)$/i, '$1sis'], [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'], [/(test)(?:is|es)$/i, '$1is'], [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'], [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'], [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'], [/(alumn|alg|vertebr)ae$/i, '$1a'], [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'], [/(matr|append)ices$/i, '$1ix'], [/(pe)(rson|ople)$/i, '$1rson'], [/(child)ren$/i, '$1'], [/(eau)x?$/i, '$1'], [/men$/i, 'man']].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n  /**\n   * Uncountable rules.\n   */\n\n  [// Singular words with no plurals.\n  'adulthood', 'advice', 'agenda', 'aid', 'alcohol', 'ammo', 'anime', 'athletics', 'audio', 'bison', 'blood', 'bream', 'buffalo', 'butter', 'carp', 'cash', 'chassis', 'chess', 'clothing', 'cod', 'commerce', 'cooperation', 'corps', 'debris', 'diabetes', 'digestion', 'elk', 'energy', 'equipment', 'excretion', 'expertise', 'flounder', 'fun', 'gallows', 'garbage', 'graffiti', 'headquarters', 'health', 'herpes', 'highjinks', 'homework', 'housework', 'information', 'jeans', 'justice', 'kudos', 'labour', 'literature', 'machinery', 'mackerel', 'mail', 'media', 'mews', 'moose', 'music', 'manga', 'news', 'pike', 'plankton', 'pliers', 'pollution', 'premises', 'rain', 'research', 'rice', 'salmon', 'scissors', 'series', 'sewage', 'shambles', 'shrimp', 'species', 'staff', 'swine', 'tennis', 'traffic', 'transporation', 'trout', 'tuna', 'wealth', 'welfare', 'whiting', 'wildebeest', 'wildlife', 'you', // Regexes.\n  /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n  /deer$/i, // \"deer\", \"reindeer\"\n  /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n  /measles$/i, /o[iu]s$/i, // \"carnivorous\"\n  /pox$/i, // \"chickpox\", \"smallpox\"\n  /sheep$/i].forEach(pluralize.addUncountableRule);\n  return pluralize;\n});","\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__export(require(\"apollo-client\"));\n\n__export(require(\"apollo-link\"));\n\nvar apollo_link_http_1 = require(\"apollo-link-http\");\n\nexports.HttpLink = apollo_link_http_1.HttpLink;\n\n__export(require(\"apollo-cache-inmemory\"));\n\nvar apollo_cache_inmemory_1 = require(\"apollo-cache-inmemory\");\n\nexports.InMemoryCache = apollo_cache_inmemory_1.InMemoryCache;\n\nvar graphql_tag_1 = require(\"graphql-tag\");\n\nexports.gql = graphql_tag_1.default;\n\nvar apollo_client_1 = require(\"apollo-client\");\n\nvar DefaultClient = function (_super) {\n  __extends(DefaultClient, _super);\n\n  function DefaultClient(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = this;\n\n    if (!config.cache) config.cache = new apollo_cache_inmemory_1.InMemoryCache();\n    if (!config.link) config.link = new apollo_link_http_1.HttpLink({\n      uri: '/graphql'\n    });\n    _this = _super.call(this, config) || this;\n    return _this;\n  }\n\n  return DefaultClient;\n}(apollo_client_1.default);\n\nexports.default = DefaultClient;","module.exports = require('./lib/Observable.js').Observable;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // === Symbol Support ===\n\n\nvar hasSymbols = function hasSymbols() {\n  return typeof Symbol === 'function';\n};\n\nvar hasSymbol = function hasSymbol(name) {\n  return hasSymbols() && Boolean(Symbol[name]);\n};\n\nvar getSymbol = function getSymbol(name) {\n  return hasSymbol(name) ? Symbol[name] : '@@' + name;\n};\n\nif (hasSymbols() && !hasSymbol('observable')) {\n  Symbol.observable = Symbol('observable');\n} // === Abstract Operations ===\n\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n  if (value == null) return undefined;\n  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n\n  if (ctor !== undefined) {\n    ctor = ctor[getSymbol('species')];\n\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction isObservable(x) {\n  return x instanceof Observable; // SPEC: Brand check\n}\n\nfunction hostReportError(e) {\n  if (hostReportError.log) {\n    hostReportError.log(e);\n  } else {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nfunction enqueue(fn) {\n  Promise.resolve().then(function () {\n    try {\n      fn();\n    } catch (e) {\n      hostReportError(e);\n    }\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  var cleanup = subscription._cleanup;\n  if (cleanup === undefined) return;\n  subscription._cleanup = undefined;\n\n  if (!cleanup) {\n    return;\n  }\n\n  try {\n    if (typeof cleanup === 'function') {\n      cleanup();\n    } else {\n      var unsubscribe = getMethod(cleanup, 'unsubscribe');\n\n      if (unsubscribe) {\n        unsubscribe.call(cleanup);\n      }\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n}\n\nfunction closeSubscription(subscription) {\n  subscription._observer = undefined;\n  subscription._queue = undefined;\n  subscription._state = 'closed';\n}\n\nfunction flushSubscription(subscription) {\n  var queue = subscription._queue;\n\n  if (!queue) {\n    return;\n  }\n\n  subscription._queue = undefined;\n  subscription._state = 'ready';\n\n  for (var i = 0; i < queue.length; ++i) {\n    notifySubscription(subscription, queue[i].type, queue[i].value);\n    if (subscription._state === 'closed') break;\n  }\n}\n\nfunction notifySubscription(subscription, type, value) {\n  subscription._state = 'running';\n  var observer = subscription._observer;\n\n  try {\n    var m = getMethod(observer, type);\n\n    switch (type) {\n      case 'next':\n        if (m) m.call(observer, value);\n        break;\n\n      case 'error':\n        closeSubscription(subscription);\n        if (m) m.call(observer, value);else throw value;\n        break;\n\n      case 'complete':\n        closeSubscription(subscription);\n        if (m) m.call(observer);\n        break;\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';\n}\n\nfunction onNotify(subscription, type, value) {\n  if (subscription._state === 'closed') return;\n\n  if (subscription._state === 'buffering') {\n    subscription._queue.push({\n      type: type,\n      value: value\n    });\n\n    return;\n  }\n\n  if (subscription._state !== 'ready') {\n    subscription._state = 'buffering';\n    subscription._queue = [{\n      type: type,\n      value: value\n    }];\n    enqueue(function () {\n      return flushSubscription(subscription);\n    });\n    return;\n  }\n\n  notifySubscription(subscription, type, value);\n}\n\nvar Subscription = function () {\n  function Subscription(observer, subscriber) {\n    _classCallCheck(this, Subscription); // ASSERT: observer is an object\n    // ASSERT: subscriber is callable\n\n\n    this._cleanup = undefined;\n    this._observer = observer;\n    this._queue = undefined;\n    this._state = 'initializing';\n    var subscriptionObserver = new SubscriptionObserver(this);\n\n    try {\n      this._cleanup = subscriber.call(undefined, subscriptionObserver);\n    } catch (e) {\n      subscriptionObserver.error(e);\n    }\n\n    if (this._state === 'initializing') this._state = 'ready';\n  }\n\n  _createClass(Subscription, [{\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      if (this._state !== 'closed') {\n        closeSubscription(this);\n        cleanupSubscription(this);\n      }\n    }\n  }, {\n    key: 'closed',\n    get: function get() {\n      return this._state === 'closed';\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar SubscriptionObserver = function () {\n  function SubscriptionObserver(subscription) {\n    _classCallCheck(this, SubscriptionObserver);\n\n    this._subscription = subscription;\n  }\n\n  _createClass(SubscriptionObserver, [{\n    key: 'next',\n    value: function next(value) {\n      onNotify(this._subscription, 'next', value);\n    }\n  }, {\n    key: 'error',\n    value: function error(value) {\n      onNotify(this._subscription, 'error', value);\n    }\n  }, {\n    key: 'complete',\n    value: function complete() {\n      onNotify(this._subscription, 'complete');\n    }\n  }, {\n    key: 'closed',\n    get: function get() {\n      return this._subscription._state === 'closed';\n    }\n  }]);\n\n  return SubscriptionObserver;\n}();\n\nvar Observable = exports.Observable = function () {\n  function Observable(subscriber) {\n    _classCallCheck(this, Observable);\n\n    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');\n    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');\n    this._subscriber = subscriber;\n  }\n\n  _createClass(Observable, [{\n    key: 'subscribe',\n    value: function subscribe(observer) {\n      if (typeof observer !== 'object' || observer === null) {\n        observer = {\n          next: observer,\n          error: arguments[1],\n          complete: arguments[2]\n        };\n      }\n\n      return new Subscription(observer, this._subscriber);\n    }\n  }, {\n    key: 'forEach',\n    value: function forEach(fn) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (typeof fn !== 'function') {\n          reject(new TypeError(fn + ' is not a function'));\n          return;\n        }\n\n        function done() {\n          subscription.unsubscribe();\n          resolve();\n        }\n\n        var subscription = _this.subscribe({\n          next: function next(value) {\n            try {\n              fn(value, done);\n            } catch (e) {\n              reject(e);\n              subscription.unsubscribe();\n            }\n          },\n          error: reject,\n          complete: resolve\n        });\n      });\n    }\n  }, {\n    key: 'map',\n    value: function map(fn) {\n      var _this2 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        return _this2.subscribe({\n          next: function next(value) {\n            try {\n              value = fn(value);\n            } catch (e) {\n              return observer.error(e);\n            }\n\n            observer.next(value);\n          },\n          error: function error(e) {\n            observer.error(e);\n          },\n          complete: function complete() {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'filter',\n    value: function filter(fn) {\n      var _this3 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        return _this3.subscribe({\n          next: function next(value) {\n            try {\n              if (!fn(value)) return;\n            } catch (e) {\n              return observer.error(e);\n            }\n\n            observer.next(value);\n          },\n          error: function error(e) {\n            observer.error(e);\n          },\n          complete: function complete() {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'reduce',\n    value: function reduce(fn) {\n      var _this4 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      var hasSeed = arguments.length > 1;\n      var hasValue = false;\n      var seed = arguments[1];\n      var acc = seed;\n      return new C(function (observer) {\n        return _this4.subscribe({\n          next: function next(value) {\n            var first = !hasValue;\n            hasValue = true;\n\n            if (!first || hasSeed) {\n              try {\n                acc = fn(acc, value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            } else {\n              acc = value;\n            }\n          },\n          error: function error(e) {\n            observer.error(e);\n          },\n          complete: function complete() {\n            if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));\n            observer.next(acc);\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'concat',\n    value: function concat() {\n      var _this5 = this;\n\n      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        var subscription = void 0;\n\n        function startNext(next) {\n          subscription = next.subscribe({\n            next: function next(v) {\n              observer.next(v);\n            },\n            error: function error(e) {\n              observer.error(e);\n            },\n            complete: function complete() {\n              if (sources.length === 0) {\n                subscription = undefined;\n                observer.complete();\n              } else {\n                startNext(C.from(sources.shift()));\n              }\n            }\n          });\n        }\n\n        startNext(_this5);\n        return function () {\n          if (subscription) {\n            subscription = undefined;\n            subscription.unsubscribe();\n          }\n        };\n      });\n    }\n  }, {\n    key: 'flatMap',\n    value: function flatMap(fn) {\n      var _this6 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        var subscriptions = [];\n\n        var outer = _this6.subscribe({\n          next: function next(value) {\n            if (fn) {\n              try {\n                value = fn(value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            }\n\n            var inner = C.from(value).subscribe({\n              next: function next(value) {\n                observer.next(value);\n              },\n              error: function error(e) {\n                observer.error(e);\n              },\n              complete: function complete() {\n                var i = subscriptions.indexOf(inner);\n                if (i >= 0) subscriptions.splice(i, 1);\n                completeIfDone();\n              }\n            });\n            subscriptions.push(inner);\n          },\n          error: function error(e) {\n            observer.error(e);\n          },\n          complete: function complete() {\n            completeIfDone();\n          }\n        });\n\n        function completeIfDone() {\n          if (outer.closed && subscriptions.length === 0) observer.complete();\n        }\n\n        return function () {\n          subscriptions.forEach(function (s) {\n            return s.unsubscribe();\n          });\n          outer.unsubscribe();\n        };\n      });\n    }\n  }, {\n    key: getSymbol('observable'),\n    value: function value() {\n      return this;\n    }\n  }], [{\n    key: 'from',\n    value: function from(x) {\n      var C = typeof this === 'function' ? this : Observable;\n      if (x == null) throw new TypeError(x + ' is not an object');\n      var method = getMethod(x, getSymbol('observable'));\n\n      if (method) {\n        var observable = method.call(x);\n        if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');\n        if (isObservable(observable) && observable.constructor === C) return observable;\n        return new C(function (observer) {\n          return observable.subscribe(observer);\n        });\n      }\n\n      if (hasSymbol('iterator')) {\n        method = getMethod(x, getSymbol('iterator'));\n\n        if (method) {\n          return new C(function (observer) {\n            enqueue(function () {\n              if (observer.closed) return;\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var item = _step.value;\n                  observer.next(item);\n                  if (observer.closed) return;\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              observer.complete();\n            });\n          });\n        }\n      }\n\n      if (Array.isArray(x)) {\n        return new C(function (observer) {\n          enqueue(function () {\n            if (observer.closed) return;\n\n            for (var i = 0; i < x.length; ++i) {\n              observer.next(x[i]);\n              if (observer.closed) return;\n            }\n\n            observer.complete();\n          });\n        });\n      }\n\n      throw new TypeError(x + ' is not observable');\n    }\n  }, {\n    key: 'of',\n    value: function of() {\n      for (var _len2 = arguments.length, items = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        items[_key2] = arguments[_key2];\n      }\n\n      var C = typeof this === 'function' ? this : Observable;\n      return new C(function (observer) {\n        enqueue(function () {\n          if (observer.closed) return;\n\n          for (var i = 0; i < items.length; ++i) {\n            observer.next(items[i]);\n            if (observer.closed) return;\n          }\n\n          observer.complete();\n        });\n      });\n    }\n  }, {\n    key: getSymbol('species'),\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return Observable;\n}();\n\nif (hasSymbols()) {\n  Object.defineProperty(Observable, Symbol('extensions'), {\n    value: {\n      symbol: getSymbol('observable'),\n      hostReportError: hostReportError\n    },\n    configurabe: true\n  });\n}","import { assign } from './util/assign';\nimport { valueToObjectRepresentation } from './storeUtils';\nexport function getMutationDefinition(doc) {\n  checkDocument(doc);\n  var mutationDef = doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.operation === 'mutation';\n  })[0];\n\n  if (!mutationDef) {\n    throw new Error('Must contain a mutation definition.');\n  }\n\n  return mutationDef;\n} // Checks the document for errors and throws an exception if there is an error.\n\nexport function checkDocument(doc) {\n  if (doc.kind !== 'Document') {\n    throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  }\n\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== 'FragmentDefinition';\n  }).map(function (definition) {\n    if (definition.kind !== 'OperationDefinition') {\n      throw new Error(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n    }\n\n    return definition;\n  });\n\n  if (operations.length > 1) {\n    throw new Error(\"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n  }\n}\nexport function getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  })[0];\n}\nexport function getOperationDefinitionOrDie(document) {\n  var def = getOperationDefinition(document);\n\n  if (!def) {\n    throw new Error(\"GraphQL document is missing an operation\");\n  }\n\n  return def;\n}\nexport function getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n} // Returns the FragmentDefinitions from a particular document as an array\n\nexport function getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'FragmentDefinition';\n  });\n}\nexport function getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n\n  if (!queryDef || queryDef.operation !== 'query') {\n    throw new Error('Must contain a query definition.');\n  }\n\n  return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n  if (doc.kind !== 'Document') {\n    throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  }\n\n  if (doc.definitions.length > 1) {\n    throw new Error('Fragment must have exactly one definition.');\n  }\n\n  var fragmentDef = doc.definitions[0];\n\n  if (fragmentDef.kind !== 'FragmentDefinition') {\n    throw new Error('Must be a fragment definition.');\n  }\n\n  return fragmentDef;\n}\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\n\nexport function getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n\n    if (definition.kind === 'OperationDefinition') {\n      var operation = definition.operation;\n\n      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {\n        return definition;\n      }\n    }\n\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new Error('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n} // Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\n\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getDefaultValues(definition) {\n  if (definition && definition.variableDefinitions && definition.variableDefinitions.length) {\n    var defaultValues = definition.variableDefinitions.filter(function (_a) {\n      var defaultValue = _a.defaultValue;\n      return defaultValue;\n    }).map(function (_a) {\n      var variable = _a.variable,\n          defaultValue = _a.defaultValue;\n      var defaultValueObj = {};\n      valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n      return defaultValueObj;\n    });\n    return assign.apply(void 0, [{}].concat(defaultValues));\n  }\n\n  return {};\n}\n/**\n * Returns the names of all variables declared by the operation.\n */\n\nexport function variablesInOperation(operation) {\n  var names = new Set();\n\n  if (operation.variableDefinitions) {\n    for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n      var definition = _a[_i];\n      names.add(definition.variable.name.value);\n    }\n  }\n\n  return names;\n}","'use strict';\n\nmodule.exports = function (data, opts) {\n  if (!opts) opts = {};\n  if (typeof opts === 'function') opts = {\n    cmp: opts\n  };\n  var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;\n\n  var cmp = opts.cmp && function (f) {\n    return function (node) {\n      return function (a, b) {\n        var aobj = {\n          key: a,\n          value: node[a]\n        };\n        var bobj = {\n          key: b,\n          value: node[b]\n        };\n        return f(aobj, bobj);\n      };\n    };\n  }(opts.cmp);\n\n  var seen = [];\n  return function stringify(node) {\n    if (node && node.toJSON && typeof node.toJSON === 'function') {\n      node = node.toJSON();\n    }\n\n    if (node === undefined) return;\n    if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n    if (typeof node !== 'object') return JSON.stringify(node);\n    var i, out;\n\n    if (Array.isArray(node)) {\n      out = '[';\n\n      for (i = 0; i < node.length; i++) {\n        if (i) out += ',';\n        out += stringify(node[i]) || 'null';\n      }\n\n      return out + ']';\n    }\n\n    if (node === null) return 'null';\n\n    if (seen.indexOf(node) !== -1) {\n      if (cycles) return JSON.stringify('__cycle__');\n      throw new TypeError('Converting circular structure to JSON');\n    }\n\n    var seenIndex = seen.push(node) - 1;\n    var keys = Object.keys(node).sort(cmp && cmp(node));\n    out = '';\n\n    for (i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = stringify(node[key]);\n      if (!value) continue;\n      if (out) out += ',';\n      out += JSON.stringify(key) + ':' + value;\n    }\n\n    seen.splice(seenIndex, 1);\n    return '{' + out + '}';\n  }(data);\n};","export function assign(target) {\n  var sources = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    sources[_i - 1] = arguments[_i];\n  }\n\n  sources.forEach(function (source) {\n    if (typeof source === 'undefined' || source === null) {\n      return;\n    }\n\n    Object.keys(source).forEach(function (key) {\n      target[key] = source[key];\n    });\n  });\n  return target;\n}","exports.version = \"2.3.5\";","exports.version = \"2.2.8\";","var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { print } from 'graphql/language/printer';\nvar defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: false\n};\nvar defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: '*/*',\n  'content-type': 'application/json'\n};\nvar defaultOptions = {\n  method: 'POST'\n};\nexport var fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions\n};\nexport var throwServerError = function throwServerError(response, result, message) {\n  var error = new Error(message);\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n}; //TODO: when conditional types come in ts 2.8, operations should be a generic type that extends Operation | Array<Operation>\n\nexport var parseAndCheckHttpResponse = function parseAndCheckHttpResponse(operations) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        var parseError = err;\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        return Promise.reject(parseError);\n      }\n    }).then(function (result) {\n      if (response.status >= 300) {\n        //Network error\n        throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n      } //TODO should really error per response in a Batch based on properties\n      //    - could be done in a validation link\n\n\n      if (!Array.isArray(result) && !result.hasOwnProperty('data') && !result.hasOwnProperty('errors')) {\n        //Data error\n        throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations) ? operations.map(function (op) {\n          return op.operationName;\n        }) : operations.operationName) + \"'.\");\n      }\n\n      return result;\n    });\n  };\n};\nexport var checkFetcher = function checkFetcher(fetcher) {\n  if (!fetcher && typeof fetch === 'undefined') {\n    var library = 'unfetch';\n    if (typeof window === 'undefined') library = 'node-fetch';\n    throw new Error(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n  }\n};\nexport var createSignalIfSupported = function createSignalIfSupported() {\n  if (typeof AbortController === 'undefined') return {\n    controller: false,\n    signal: false\n  };\n  var controller = new AbortController();\n  var signal = controller.signal;\n  return {\n    controller: controller,\n    signal: signal\n  };\n};\nexport var selectHttpOptionsAndBody = function selectHttpOptionsAndBody(operation, fallbackConfig) {\n  var configs = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n\n  var options = __assign({}, fallbackConfig.options, {\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials\n  });\n\n  var http = fallbackConfig.http;\n  /*\n   * use the rest of the configs to populate the options\n   * configs later in the list will overwrite earlier fields\n   */\n\n  configs.forEach(function (config) {\n    options = __assign({}, options, config.options, {\n      headers: __assign({}, options.headers, config.headers)\n    });\n    if (config.credentials) options.credentials = config.credentials;\n    http = __assign({}, http, config.http);\n  }); //The body depends on the http options\n\n  var operationName = operation.operationName,\n      extensions = operation.extensions,\n      variables = operation.variables,\n      query = operation.query;\n  var body = {\n    operationName: operationName,\n    variables: variables\n  };\n  if (http.includeExtensions) body.extensions = extensions; // not sending the query (i.e persisted queries)\n\n  if (http.includeQuery) body.query = print(query);\n  return {\n    options: options,\n    body: body\n  };\n};\nexport var serializeFetchParameter = function serializeFetchParameter(p, label) {\n  var serialized;\n\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    var parseError = new Error(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n    parseError.parseError = e;\n    throw parseError;\n  }\n\n  return serialized;\n}; //selects \"/graphql\" by default\n\nexport var selectURI = function selectURI(operation, fallbackURI) {\n  var context = operation.getContext();\n  var contextURI = context.uri;\n\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === 'function') {\n    return fallbackURI(operation);\n  } else {\n    return fallbackURI || '/graphql';\n  }\n};","var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ApolloLink, Observable, fromError } from 'apollo-link';\nimport { serializeFetchParameter, selectURI, parseAndCheckHttpResponse, checkFetcher, selectHttpOptionsAndBody, createSignalIfSupported, fallbackHttpConfig } from 'apollo-link-http-common';\nexport var createHttpLink = function createHttpLink(linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n\n  var _a = linkOptions.uri,\n      uri = _a === void 0 ? '/graphql' : _a,\n      // use default global fetch is nothing passed in\n  fetcher = linkOptions.fetch,\n      includeExtensions = linkOptions.includeExtensions,\n      useGETForQueries = linkOptions.useGETForQueries,\n      requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]); // dev warnings to ensure fetch is present\n\n\n  checkFetcher(fetcher); //fetcher is set here rather than the destructuring to ensure fetch is\n  //declared before referencing it. Reference in the destructuring would cause\n  //a ReferenceError\n\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: context.headers\n    }; //uses fallback, link, and then context to build options\n\n    var _a = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _a.options,\n        body = _a.body;\n\n    var controller;\n\n    if (!options.signal) {\n      var _b = createSignalIfSupported(),\n          _controller = _b.controller,\n          signal = _b.signal;\n\n      controller = _controller;\n      if (controller) options.signal = signal;\n    } // If requested, set method to GET if there are no mutations.\n\n\n    var definitionIsMutation = function definitionIsMutation(d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      var _c = rewriteURIForGET(chosenURI, body),\n          newURI = _c.newURI,\n          parseError = _c.parseError;\n\n      if (parseError) {\n        return fromError(parseError);\n      }\n\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(function (observer) {\n      fetcher(chosenURI, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        // we have data and can send it to back up the link chain\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        // fetch was cancelled so its already been cleaned up in the unsubscribe\n        if (err.name === 'AbortError') return; // if it is a network error, BUT there is graphql result info\n        // fire the next observer before calling error\n        // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n        // to pass to UI\n        // this should only happen if we *also* have data as part of the response key per\n        // the spec\n\n        if (err.result && err.result.errors && err.result.data) {\n          // if we dont' call next, the UI can only show networkError because AC didn't\n          // get andy graphqlErrors\n          // this is graphql execution result info (i.e errors and possibly data)\n          // this is because there is no formal spec how errors should translate to\n          // http status codes. So an auth error (401) could have both data\n          // from a public field, errors from a private field, and a status of 401\n          // {\n          //  user { // this will have errors\n          //    firstName\n          //  }\n          //  products { // this is public so will have data\n          //    cost\n          //  }\n          // }\n          //\n          // the result of above *could* look like this:\n          // {\n          //   data: { products: [{ cost: \"$10\" }] },\n          //   errors: [{\n          //      message: 'your session has timed out',\n          //      path: []\n          //   }]\n          // }\n          // status code of above would be a 401\n          // in the UI you want to show data where you can, errors as data where you can\n          // and use correct http status codes\n          observer.next(err.result);\n        }\n\n        observer.error(err);\n      });\n      return function () {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n}; // For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\n\nfunction rewriteURIForGET(chosenURI, body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  var queryParams = [];\n\n  var addQueryParam = function addQueryParam(key, value) {\n    queryParams.push(key + \"=\" + encodeURIComponent(value));\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n\n  if (body.variables) {\n    var serializedVariables = void 0;\n\n    try {\n      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('variables', serializedVariables);\n  }\n\n  if (body.extensions) {\n    var serializedExtensions = void 0;\n\n    try {\n      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('extensions', serializedExtensions);\n  } // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n\n\n  var fragment = '',\n      preFragment = chosenURI;\n  var fragmentStart = chosenURI.indexOf('#');\n\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n\n  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return {\n    newURI: newURI\n  };\n}\n\nvar HttpLink =\n/** @class */\nfunction (_super) {\n  __extends(HttpLink, _super);\n\n  function HttpLink(opts) {\n    return _super.call(this, createHttpLink(opts).request) || this;\n  }\n\n  return HttpLink;\n}(ApolloLink);\n\nexport { HttpLink };","export * from './httpLink';","/**\n * Performs a deep equality check on two JavaScript values.\n */\nexport function isEqual(a, b) {\n  // If the two values are strictly equal, we are good.\n  if (a === b) {\n    return true;\n  } // Dates are equivalent if their time values are equal.\n\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() === b.getTime();\n  } // If a and b are both objects, we will compare their properties. This will compare arrays as\n  // well.\n\n\n  if (a != null && typeof a === 'object' && b != null && typeof b === 'object') {\n    // Compare all of the keys in `a`. If one of the keys has a different value, or that key does\n    // not exist in `b` return false immediately.\n    for (var key in a) {\n      if (Object.prototype.hasOwnProperty.call(a, key)) {\n        if (!Object.prototype.hasOwnProperty.call(b, key)) {\n          return false;\n        }\n\n        if (!isEqual(a[key], b[key])) {\n          return false;\n        }\n      }\n    } // Look through all the keys in `b`. If `b` has a key that `a` does not, return false.\n\n\n    for (var key in b) {\n      if (!Object.prototype.hasOwnProperty.call(a, key)) {\n        return false;\n      }\n    } // If we made it this far the objects are equal!\n\n\n    return true;\n  } // Otherwise the values are not equal.\n\n\n  return false;\n}","import { isDevelopment, isTest } from './environment'; // Taken (mostly) from https://github.com/substack/deep-freeze to avoid\n// import hassles with rollup.\n\nfunction deepFreeze(o) {\n  Object.freeze(o);\n  Object.getOwnPropertyNames(o).forEach(function (prop) {\n    if (o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n  return o;\n}\n\nexport function maybeDeepFreeze(obj) {\n  if (isDevelopment() || isTest()) {\n    // Polyfilled Symbols potentially cause infinite / very deep recursion while deep freezing\n    // which is known to crash IE11 (https://github.com/apollographql/apollo-client/issues/3043).\n    var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';\n\n    if (!symbolIsPolyfilled) {\n      return deepFreeze(obj);\n    }\n  }\n\n  return obj;\n}","export function tryFunctionOrLogError(f) {\n  try {\n    return f();\n  } catch (e) {\n    if (console.error) {\n      console.error(e);\n    }\n  }\n}\nexport function graphQLResultHasError(result) {\n  return result.errors && result.errors.length;\n}","import { argumentsObjectFromField } from './storeUtils';\nexport function getDirectiveInfoFromField(field, variables) {\n  if (field.directives && field.directives.length) {\n    var directiveObj_1 = {};\n    field.directives.forEach(function (directive) {\n      directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);\n    });\n    return directiveObj_1;\n  }\n\n  return null;\n}\nexport function shouldInclude(selection, variables) {\n  if (variables === void 0) {\n    variables = {};\n  }\n\n  if (!selection.directives) {\n    return true;\n  }\n\n  var res = true;\n  selection.directives.forEach(function (directive) {\n    // TODO should move this validation to GraphQL validation once that's implemented.\n    if (directive.name.value !== 'skip' && directive.name.value !== 'include') {\n      // Just don't worry about directives we don't understand\n      return;\n    } //evaluate the \"if\" argument and skip (i.e. return undefined) if it evaluates to true.\n\n\n    var directiveArguments = directive.arguments || [];\n    var directiveName = directive.name.value;\n\n    if (directiveArguments.length !== 1) {\n      throw new Error(\"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n    }\n\n    var ifArgument = directiveArguments[0];\n\n    if (!ifArgument.name || ifArgument.name.value !== 'if') {\n      throw new Error(\"Invalid argument for the @\" + directiveName + \" directive.\");\n    }\n\n    var ifValue = directiveArguments[0].value;\n    var evaledValue = false;\n\n    if (!ifValue || ifValue.kind !== 'BooleanValue') {\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      if (ifValue.kind !== 'Variable') {\n        throw new Error(\"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n      } else {\n        evaledValue = variables[ifValue.name.value];\n\n        if (evaledValue === undefined) {\n          throw new Error(\"Invalid variable referenced in @\" + directiveName + \" directive.\");\n        }\n      }\n    } else {\n      evaledValue = ifValue.value;\n    }\n\n    if (directiveName === 'skip') {\n      evaledValue = !evaledValue;\n    }\n\n    if (!evaledValue) {\n      res = false;\n    }\n  });\n  return res;\n}\nexport function flattenSelections(selection) {\n  if (!selection.selectionSet || !(selection.selectionSet.selections.length > 0)) return [selection];\n  return [selection].concat(selection.selectionSet.selections.map(function (selectionNode) {\n    return [selectionNode].concat(flattenSelections(selectionNode));\n  }).reduce(function (selections, selected) {\n    return selections.concat(selected);\n  }, []));\n}\nexport function getDirectiveNames(doc) {\n  // operation => [names of directives];\n  var directiveNames = doc.definitions.filter(function (definition) {\n    return definition.selectionSet && definition.selectionSet.selections;\n  }) // operation => [[Selection]]\n  .map(function (x) {\n    return flattenSelections(x);\n  }) // [[Selection]] => [Selection]\n  .reduce(function (selections, selected) {\n    return selections.concat(selected);\n  }, []) // [Selection] => [Selection with Directives]\n  .filter(function (selection) {\n    return selection.directives && selection.directives.length > 0;\n  }) // [Selection with Directives] => [[Directives]]\n  .map(function (selection) {\n    return selection.directives;\n  }) // [[Directives]] => [Directives]\n  .reduce(function (directives, directive) {\n    return directives.concat(directive);\n  }, []) // [Directives] => [Name]\n  .map(function (directive) {\n    return directive.name.value;\n  });\n  return directiveNames;\n}\nexport function hasDirectives(names, doc) {\n  return getDirectiveNames(doc).some(function (name) {\n    return names.indexOf(name) > -1;\n  });\n}","export var FetchType;\n\n(function (FetchType) {\n  FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n  FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n  FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));","/**\n * The current status of a query’s execution in our system.\n */\nexport var NetworkStatus;\n\n(function (NetworkStatus) {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n\n  NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n\n  NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n\n  NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n\n  NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n\n  NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n\n  NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\n\n\nexport function isNetworkRequestInFlight(networkStatus) {\n  return networkStatus < 7;\n}","var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // This simplified polyfill attempts to follow the ECMAScript Observable proposal.\n// See https://github.com/zenparsing/es-observable\n\n\nimport { Observable as LinkObservable } from 'apollo-link';\nimport $$observable from 'symbol-observable'; // rxjs interopt\n\nvar Observable =\n/** @class */\nfunction (_super) {\n  __extends(Observable, _super);\n\n  function Observable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Observable.prototype[$$observable] = function () {\n    return this;\n  };\n\n  Observable.prototype['@@observable'] = function () {\n    return this;\n  };\n\n  return Observable;\n}(LinkObservable);\n\nexport { Observable };","var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nexport function isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n} // Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\n\nvar generateErrorMessage = function generateErrorMessage(err) {\n  var message = ''; // If we have GraphQL errors present, add that to the error message.\n\n  if (Array.isArray(err.graphQLErrors) && err.graphQLErrors.length !== 0) {\n    err.graphQLErrors.forEach(function (graphQLError) {\n      var errorMessage = graphQLError ? graphQLError.message : 'Error message not found.';\n      message += \"GraphQL error: \" + errorMessage + \"\\n\";\n    });\n  }\n\n  if (err.networkError) {\n    message += 'Network error: ' + err.networkError.message + '\\n';\n  } // strip newline from the end of the message\n\n\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nvar ApolloError =\n/** @class */\nfunction (_super) {\n  __extends(ApolloError, _super); // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n\n\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n        networkError = _a.networkError,\n        errorMessage = _a.errorMessage,\n        extraInfo = _a.extraInfo;\n\n    var _this = _super.call(this, errorMessage) || this;\n\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.networkError = networkError || null;\n\n    if (!errorMessage) {\n      _this.message = generateErrorMessage(_this);\n    } else {\n      _this.message = errorMessage;\n    }\n\n    _this.extraInfo = extraInfo; // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n\n  return ApolloError;\n}(Error);\n\nexport { ApolloError };","var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { isEqual, tryFunctionOrLogError, maybeDeepFreeze } from 'apollo-utilities';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { Observable } from '../util/Observable';\nimport { ApolloError } from '../errors/ApolloError';\nimport { FetchType } from './types';\nexport var hasError = function hasError(storeValue, policy) {\n  if (policy === void 0) {\n    policy = 'none';\n  }\n\n  return storeValue && (storeValue.graphQLErrors && storeValue.graphQLErrors.length > 0 && policy === 'none' || storeValue.networkError);\n};\n\nvar ObservableQuery =\n/** @class */\nfunction (_super) {\n  __extends(ObservableQuery, _super);\n\n  function ObservableQuery(_a) {\n    var scheduler = _a.scheduler,\n        options = _a.options,\n        _b = _a.shouldSubscribe,\n        shouldSubscribe = _b === void 0 ? true : _b;\n\n    var _this = _super.call(this, function (observer) {\n      return _this.onSubscribe(observer);\n    }) || this; // active state\n\n\n    _this.isCurrentlyPolling = false;\n    _this.isTornDown = false; // query information\n\n    _this.options = options;\n    _this.variables = options.variables || {};\n    _this.queryId = scheduler.queryManager.generateQueryId();\n    _this.shouldSubscribe = shouldSubscribe; // related classes\n\n    _this.scheduler = scheduler;\n    _this.queryManager = scheduler.queryManager; // interal data stores\n\n    _this.observers = [];\n    _this.subscriptionHandles = [];\n    return _this;\n  }\n\n  ObservableQuery.prototype.result = function () {\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      var subscription;\n      var observer = {\n        next: function next(result) {\n          resolve(result); // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n\n          if (!that.observers.some(function (obs) {\n            return obs !== observer;\n          })) {\n            that.queryManager.removeQuery(that.queryId);\n          }\n\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: function error(_error) {\n          reject(_error);\n        }\n      };\n      subscription = that.subscribe(observer);\n    });\n  };\n  /**\n   * Return the result of the query from the local cache as well as some fetching status\n   * `loading` and `networkStatus` allow to know if a request is in flight\n   * `partial` lets you know if the result from the local cache is complete or partial\n   * @return {result: Object, loading: boolean, networkStatus: number, partial: boolean}\n   */\n\n\n  ObservableQuery.prototype.currentResult = function () {\n    if (this.isTornDown) {\n      return {\n        data: this.lastError ? {} : this.lastResult ? this.lastResult.data : {},\n        error: this.lastError,\n        loading: false,\n        networkStatus: NetworkStatus.error\n      };\n    }\n\n    var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n\n    if (hasError(queryStoreValue, this.options.errorPolicy)) {\n      return {\n        data: {},\n        loading: false,\n        networkStatus: queryStoreValue.networkStatus,\n        error: new ApolloError({\n          graphQLErrors: queryStoreValue.graphQLErrors,\n          networkError: queryStoreValue.networkError\n        })\n      };\n    }\n\n    var _a = this.queryManager.getCurrentQueryResult(this),\n        data = _a.data,\n        partial = _a.partial;\n\n    var queryLoading = !queryStoreValue || queryStoreValue.networkStatus === NetworkStatus.loading; // We need to be careful about the loading state we show to the user, to try\n    // and be vaguely in line with what the user would have seen from .subscribe()\n    // but to still provide useful information synchronously when the query\n    // will not end up hitting the server.\n    // See more: https://github.com/apollostack/apollo-client/issues/707\n    // Basically: is there a query in flight right now (modolo the next tick)?\n\n    var loading = this.options.fetchPolicy === 'network-only' && queryLoading || partial && this.options.fetchPolicy !== 'cache-only'; // if there is nothing in the query store, it means this query hasn't fired yet or it has been cleaned up. Therefore the\n    // network status is dependent on queryLoading.\n\n    var networkStatus;\n\n    if (queryStoreValue) {\n      networkStatus = queryStoreValue.networkStatus;\n    } else {\n      networkStatus = loading ? NetworkStatus.loading : NetworkStatus.ready;\n    }\n\n    var result = {\n      data: data,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    };\n\n    if (queryStoreValue && queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n      result.errors = queryStoreValue.graphQLErrors;\n    }\n\n    if (!partial) {\n      var stale = false;\n      this.lastResult = __assign({}, result, {\n        stale: stale\n      });\n    }\n\n    return __assign({}, result, {\n      partial: partial\n    });\n  }; // Returns the last result that observer.next was called with. This is not the same as\n  // currentResult! If you're not sure which you need, then you probably need currentResult.\n\n\n  ObservableQuery.prototype.getLastResult = function () {\n    return this.lastResult;\n  };\n\n  ObservableQuery.prototype.getLastError = function () {\n    return this.lastError;\n  };\n\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.lastResult;\n    delete this.lastError;\n    this.isTornDown = false;\n  };\n\n  ObservableQuery.prototype.refetch = function (variables) {\n    var fetchPolicy = this.options.fetchPolicy; // early return if trying to read from cache during refetch\n\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(new Error('cache-only fetchPolicy option should not be used together with query refetch.'));\n    }\n\n    if (!isEqual(this.variables, variables)) {\n      // update observable variables\n      this.variables = Object.assign({}, this.variables, variables);\n    }\n\n    if (!isEqual(this.options.variables, this.variables)) {\n      // Update the existing options with new variables\n      this.options.variables = Object.assign({}, this.options.variables, this.variables);\n    } // Override fetchPolicy for this call only\n    // only network-only and no-cache are safe to use\n\n\n    var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n\n    var combinedOptions = __assign({}, this.options, {\n      fetchPolicy: isNetworkFetchPolicy ? fetchPolicy : 'network-only'\n    });\n\n    return this.queryManager.fetchQuery(this.queryId, combinedOptions, FetchType.refetch).then(function (result) {\n      return maybeDeepFreeze(result);\n    });\n  };\n\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this; // early return if no update Query\n\n\n    if (!fetchMoreOptions.updateQuery) {\n      throw new Error('updateQuery option is required. This function defines how to update the query data with the new results.');\n    }\n\n    var combinedOptions;\n    return Promise.resolve().then(function () {\n      var qid = _this.queryManager.generateQueryId();\n\n      if (fetchMoreOptions.query) {\n        // fetch a new query\n        combinedOptions = fetchMoreOptions;\n      } else {\n        // fetch the same query with a possibly new variables\n        combinedOptions = __assign({}, _this.options, fetchMoreOptions, {\n          variables: Object.assign({}, _this.variables, fetchMoreOptions.variables)\n        });\n      }\n\n      combinedOptions.fetchPolicy = 'network-only';\n      return _this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, _this.queryId);\n    }).then(function (fetchMoreResult) {\n      _this.updateQuery(function (previousResult) {\n        return fetchMoreOptions.updateQuery(previousResult, {\n          fetchMoreResult: fetchMoreResult.data,\n          variables: combinedOptions.variables\n        });\n      });\n\n      return fetchMoreResult;\n    });\n  }; // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n\n\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables\n    }).subscribe({\n      next: function next(data) {\n        if (options.updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return options.updateQuery(previous, {\n              subscriptionData: data,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function error(err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n\n        console.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptionHandles.push(subscription);\n    return function () {\n      var i = _this.subscriptionHandles.indexOf(subscription);\n\n      if (i >= 0) {\n        _this.subscriptionHandles.splice(i, 1);\n\n        subscription.unsubscribe();\n      }\n    };\n  }; // Note: if the query is not active (there are no subscribers), the promise\n  // will return null immediately.\n\n\n  ObservableQuery.prototype.setOptions = function (opts) {\n    var oldOptions = this.options;\n    this.options = Object.assign({}, this.options, opts);\n\n    if (opts.pollInterval) {\n      this.startPolling(opts.pollInterval);\n    } else if (opts.pollInterval === 0) {\n      this.stopPolling();\n    } // If fetchPolicy went from cache-only to something else, or from something else to network-only\n\n\n    var tryFetch = oldOptions.fetchPolicy !== 'network-only' && opts.fetchPolicy === 'network-only' || oldOptions.fetchPolicy === 'cache-only' && opts.fetchPolicy !== 'cache-only' || oldOptions.fetchPolicy === 'standby' && opts.fetchPolicy !== 'standby' || false;\n    return this.setVariables(this.options.variables, tryFetch, opts.fetchResults);\n  };\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: if the variables have not changed, the promise will return the old\n   * results immediately, and the `next` callback will *not* fire.\n   *\n   * Note: if the query is not active (there are no subscribers), the promise\n   * will return null immediately.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   *\n   * @param tryFetch: Try and fetch new results even if the variables haven't\n   * changed (we may still just hit the store, but if there's nothing in there\n   * this will refetch)\n   *\n   * @param fetchResults: Option to ignore fetching results when updating variables\n   *\n   */\n\n\n  ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n    if (tryFetch === void 0) {\n      tryFetch = false;\n    }\n\n    if (fetchResults === void 0) {\n      fetchResults = true;\n    } // since setVariables restarts the subscription, we reset the tornDown status\n\n\n    this.isTornDown = false;\n    var newVariables = variables ? variables : this.variables;\n\n    if (isEqual(newVariables, this.variables) && !tryFetch) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      if (this.observers.length === 0 || !fetchResults) {\n        return new Promise(function (resolve) {\n          return resolve();\n        });\n      }\n\n      return this.result();\n    } else {\n      this.variables = newVariables;\n      this.options.variables = newVariables; // See comment above\n\n      if (this.observers.length === 0) {\n        return new Promise(function (resolve) {\n          return resolve();\n        });\n      } // Use the same options as before, but with new variables\n\n\n      return this.queryManager.fetchQuery(this.queryId, __assign({}, this.options, {\n        variables: this.variables\n      })).then(function (result) {\n        return maybeDeepFreeze(result);\n      });\n    }\n  };\n\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var _a = this.queryManager.getQueryWithPreviousResult(this.queryId),\n        previousResult = _a.previousResult,\n        variables = _a.variables,\n        document = _a.document;\n\n    var newResult = tryFunctionOrLogError(function () {\n      return mapFn(previousResult, {\n        variables: variables\n      });\n    });\n\n    if (newResult) {\n      this.queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n      this.queryManager.broadcastQueries();\n    }\n  };\n\n  ObservableQuery.prototype.stopPolling = function () {\n    if (this.isCurrentlyPolling) {\n      this.scheduler.stopPollingQuery(this.queryId);\n      this.options.pollInterval = undefined;\n      this.isCurrentlyPolling = false;\n    }\n  };\n\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    if (this.options.fetchPolicy === 'cache-first' || this.options.fetchPolicy === 'cache-only') {\n      throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n    }\n\n    if (this.isCurrentlyPolling) {\n      this.scheduler.stopPollingQuery(this.queryId);\n      this.isCurrentlyPolling = false;\n    }\n\n    this.options.pollInterval = pollInterval;\n    this.isCurrentlyPolling = true;\n    this.scheduler.startPollingQuery(this.options, this.queryId);\n  };\n\n  ObservableQuery.prototype.onSubscribe = function (observer) {\n    var _this = this; // Zen Observable has its own error function, in order to log correctly\n    // we need to declare a custom error if nothing is passed\n\n\n    if (observer._subscription && observer._subscription._observer && !observer._subscription._observer.error) {\n      observer._subscription._observer.error = function (error) {\n        console.error('Unhandled error', error.message, error.stack);\n      };\n    }\n\n    this.observers.push(observer); // Deliver initial result\n\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError); // setup the query if it hasn't been done before\n\n    if (this.observers.length === 1) this.setUpQuery();\n    return function () {\n      _this.observers = _this.observers.filter(function (obs) {\n        return obs !== observer;\n      });\n\n      if (_this.observers.length === 0) {\n        _this.tearDownQuery();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setUpQuery = function () {\n    var _this = this;\n\n    if (this.shouldSubscribe) {\n      this.queryManager.addObservableQuery(this.queryId, this);\n    }\n\n    if (!!this.options.pollInterval) {\n      if (this.options.fetchPolicy === 'cache-first' || this.options.fetchPolicy === 'cache-only') {\n        throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n      }\n\n      this.isCurrentlyPolling = true;\n      this.scheduler.startPollingQuery(this.options, this.queryId);\n    }\n\n    var observer = {\n      next: function next(result) {\n        _this.lastResult = result;\n\n        _this.observers.forEach(function (obs) {\n          return obs.next && obs.next(result);\n        });\n      },\n      error: function error(_error2) {\n        _this.lastError = _error2;\n\n        _this.observers.forEach(function (obs) {\n          return obs.error && obs.error(_error2);\n        });\n      }\n    };\n    this.queryManager.startQuery(this.queryId, this.options, this.queryManager.queryListenerForObserver(this.queryId, this.options, observer));\n  };\n\n  ObservableQuery.prototype.tearDownQuery = function () {\n    this.isTornDown = true;\n\n    if (this.isCurrentlyPolling) {\n      this.scheduler.stopPollingQuery(this.queryId);\n      this.isCurrentlyPolling = false;\n    } // stop all active GraphQL subscriptions\n\n\n    this.subscriptionHandles.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptionHandles = [];\n    this.queryManager.removeObservableQuery(this.queryId);\n    this.queryManager.stopQuery(this.queryId);\n    this.observers = [];\n  };\n\n  return ObservableQuery;\n}(Observable);\n\nexport { ObservableQuery };","// The QueryScheduler is supposed to be a mechanism that schedules polling queries such that\n// they are clustered into the time slots of the QueryBatcher and are batched together. It\n// also makes sure that for a given polling query, if one instance of the query is inflight,\n// another instance will not be fired until the query returns or times out. We do this because\n// another query fires while one is already in flight, the data will stay in the \"loading\" state\n// even after the first query has returned.\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { FetchType } from '../core/types';\nimport { ObservableQuery } from '../core/ObservableQuery';\nimport { NetworkStatus } from '../core/networkStatus';\n\nvar QueryScheduler =\n/** @class */\nfunction () {\n  function QueryScheduler(_a) {\n    var queryManager = _a.queryManager,\n        ssrMode = _a.ssrMode; // Map going from queryIds to query options that are in flight.\n\n    this.inFlightQueries = {}; // Map going from query ids to the query options associated with those queries. Contains all of\n    // the queries, both in flight and not in flight.\n\n    this.registeredQueries = {}; // Map going from polling interval with to the query ids that fire on that interval.\n    // These query ids are associated with a set of options in the this.registeredQueries.\n\n    this.intervalQueries = {}; // Map going from polling interval widths to polling timers.\n\n    this.pollingTimers = {};\n    this.ssrMode = false;\n    this.queryManager = queryManager;\n    this.ssrMode = ssrMode || false;\n  }\n\n  QueryScheduler.prototype.checkInFlight = function (queryId) {\n    var query = this.queryManager.queryStore.get(queryId);\n    return query && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;\n  };\n\n  QueryScheduler.prototype.fetchQuery = function (queryId, options, fetchType) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.queryManager.fetchQuery(queryId, options, fetchType).then(function (result) {\n        resolve(result);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  };\n\n  QueryScheduler.prototype.startPollingQuery = function (options, queryId, listener) {\n    if (!options.pollInterval) {\n      throw new Error('Attempted to start a polling query without a polling interval.');\n    } // Do not poll in SSR mode\n\n\n    if (this.ssrMode) return queryId;\n    this.registeredQueries[queryId] = options;\n\n    if (listener) {\n      this.queryManager.addQueryListener(queryId, listener);\n    }\n\n    this.addQueryOnInterval(queryId, options);\n    return queryId;\n  };\n\n  QueryScheduler.prototype.stopPollingQuery = function (queryId) {\n    // Remove the query options from one of the registered queries.\n    // The polling function will then take care of not firing it anymore.\n    delete this.registeredQueries[queryId];\n  }; // Fires the all of the queries on a particular interval. Called on a setInterval.\n\n\n  QueryScheduler.prototype.fetchQueriesOnInterval = function (interval) {\n    var _this = this; // XXX this \"filter\" here is nasty, because it does two things at the same time.\n    // 1. remove queries that have stopped polling\n    // 2. call fetchQueries for queries that are polling and not in flight.\n    // TODO: refactor this to make it cleaner\n\n\n    this.intervalQueries[interval] = this.intervalQueries[interval].filter(function (queryId) {\n      // If queryOptions can't be found from registeredQueries or if it has a\n      // different interval, it means that this queryId is no longer registered\n      // and should be removed from the list of queries firing on this interval.\n      //\n      // We don't remove queries from intervalQueries immediately in\n      // stopPollingQuery so that we can keep the timer consistent when queries\n      // are removed and replaced, and to avoid quadratic behavior when stopping\n      // many queries.\n      if (!(_this.registeredQueries.hasOwnProperty(queryId) && _this.registeredQueries[queryId].pollInterval === interval)) {\n        return false;\n      } // Don't fire this instance of the polling query is one of the instances is already in\n      // flight.\n\n\n      if (_this.checkInFlight(queryId)) {\n        return true;\n      }\n\n      var queryOptions = _this.registeredQueries[queryId];\n\n      var pollingOptions = __assign({}, queryOptions);\n\n      pollingOptions.fetchPolicy = 'network-only'; // don't let unhandled rejections happen\n\n      _this.fetchQuery(queryId, pollingOptions, FetchType.poll).catch(function () {});\n\n      return true;\n    });\n\n    if (this.intervalQueries[interval].length === 0) {\n      clearInterval(this.pollingTimers[interval]);\n      delete this.intervalQueries[interval];\n    }\n  }; // Adds a query on a particular interval to this.intervalQueries and then fires\n  // that query with all the other queries executing on that interval. Note that the query id\n  // and query options must have been added to this.registeredQueries before this function is called.\n\n\n  QueryScheduler.prototype.addQueryOnInterval = function (queryId, queryOptions) {\n    var _this = this;\n\n    var interval = queryOptions.pollInterval;\n\n    if (!interval) {\n      throw new Error(\"A poll interval is required to start polling query with id '\" + queryId + \"'.\");\n    } // If there are other queries on this interval, this query will just fire with those\n    // and we don't need to create a new timer.\n\n\n    if (this.intervalQueries.hasOwnProperty(interval.toString()) && this.intervalQueries[interval].length > 0) {\n      this.intervalQueries[interval].push(queryId);\n    } else {\n      this.intervalQueries[interval] = [queryId]; // set up the timer for the function that will handle this interval\n\n      this.pollingTimers[interval] = setInterval(function () {\n        _this.fetchQueriesOnInterval(interval);\n      }, interval);\n    }\n  }; // Used only for unit testing.\n\n\n  QueryScheduler.prototype.registerPollingQuery = function (queryOptions) {\n    if (!queryOptions.pollInterval) {\n      throw new Error('Attempted to register a non-polling query with the scheduler.');\n    }\n\n    return new ObservableQuery({\n      scheduler: this,\n      options: queryOptions\n    });\n  };\n\n  return QueryScheduler;\n}();\n\nexport { QueryScheduler };","var MutationStore =\n/** @class */\nfunction () {\n  function MutationStore() {\n    this.store = {};\n  }\n\n  MutationStore.prototype.getStore = function () {\n    return this.store;\n  };\n\n  MutationStore.prototype.get = function (mutationId) {\n    return this.store[mutationId];\n  };\n\n  MutationStore.prototype.initMutation = function (mutationId, mutationString, variables) {\n    this.store[mutationId] = {\n      mutationString: mutationString,\n      variables: variables || {},\n      loading: true,\n      error: null\n    };\n  };\n\n  MutationStore.prototype.markMutationError = function (mutationId, error) {\n    var mutation = this.store[mutationId];\n\n    if (!mutation) {\n      return;\n    }\n\n    mutation.loading = false;\n    mutation.error = error;\n  };\n\n  MutationStore.prototype.markMutationResult = function (mutationId) {\n    var mutation = this.store[mutationId];\n\n    if (!mutation) {\n      return;\n    }\n\n    mutation.loading = false;\n    mutation.error = null;\n  };\n\n  MutationStore.prototype.reset = function () {\n    this.store = {};\n  };\n\n  return MutationStore;\n}();\n\nexport { MutationStore };","var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { print } from 'graphql/language/printer';\nimport { isEqual } from 'apollo-utilities';\nimport { NetworkStatus } from '../core/networkStatus';\n\nvar QueryStore =\n/** @class */\nfunction () {\n  function QueryStore() {\n    this.store = {};\n  }\n\n  QueryStore.prototype.getStore = function () {\n    return this.store;\n  };\n\n  QueryStore.prototype.get = function (queryId) {\n    return this.store[queryId];\n  };\n\n  QueryStore.prototype.initQuery = function (query) {\n    var previousQuery = this.store[query.queryId];\n\n    if (previousQuery && previousQuery.document !== query.document && print(previousQuery.document) !== print(query.document)) {\n      // XXX we're throwing an error here to catch bugs where a query gets overwritten by a new one.\n      // we should implement a separate action for refetching so that QUERY_INIT may never overwrite\n      // an existing query (see also: https://github.com/apollostack/apollo-client/issues/732)\n      throw new Error('Internal Error: may not update existing query string in store');\n    }\n\n    var isSetVariables = false;\n    var previousVariables = null;\n\n    if (query.storePreviousVariables && previousQuery && previousQuery.networkStatus !== NetworkStatus.loading // if the previous query was still loading, we don't want to remember it at all.\n    ) {\n        if (!isEqual(previousQuery.variables, query.variables)) {\n          isSetVariables = true;\n          previousVariables = previousQuery.variables;\n        }\n      } // TODO break this out into a separate function\n\n\n    var networkStatus;\n\n    if (isSetVariables) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch; // TODO: can we determine setVariables here if it's a refetch and the variables have changed?\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var graphQLErrors = [];\n\n    if (previousQuery && previousQuery.graphQLErrors) {\n      graphQLErrors = previousQuery.graphQLErrors;\n    } // XXX right now if QUERY_INIT is fired twice, like in a refetch situation, we just overwrite\n    // the store. We probably want a refetch action instead, because I suspect that if you refetch\n    // before the initial fetch is done, you'll get an error.\n\n\n    this.store[query.queryId] = {\n      document: query.document,\n      variables: query.variables,\n      previousVariables: previousVariables,\n      networkError: null,\n      graphQLErrors: graphQLErrors,\n      networkStatus: networkStatus,\n      metadata: query.metadata\n    }; // If the action had a `moreForQueryId` property then we need to set the\n    // network status on that query as well to `fetchMore`.\n    //\n    // We have a complement to this if statement in the query result and query\n    // error action branch, but importantly *not* in the client result branch.\n    // This is because the implementation of `fetchMore` *always* sets\n    // `fetchPolicy` to `network-only` so we would never have a client result.\n\n    if (typeof query.fetchMoreForQueryId === 'string' && this.store[query.fetchMoreForQueryId]) {\n      this.store[query.fetchMoreForQueryId].networkStatus = NetworkStatus.fetchMore;\n    }\n  };\n\n  QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n    if (!this.store[queryId]) return;\n    this.store[queryId].networkError = null;\n    this.store[queryId].graphQLErrors = result.errors && result.errors.length ? result.errors : [];\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = NetworkStatus.ready; // If we have a `fetchMoreForQueryId` then we need to update the network\n    // status for that query. See the branch for query initialization for more\n    // explanation about this process.\n\n    if (typeof fetchMoreForQueryId === 'string' && this.store[fetchMoreForQueryId]) {\n      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n    }\n  };\n\n  QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n    if (!this.store[queryId]) return;\n    this.store[queryId].networkError = error;\n    this.store[queryId].networkStatus = NetworkStatus.error; // If we have a `fetchMoreForQueryId` then we need to update the network\n    // status for that query. See the branch for query initialization for more\n    // explanation about this process.\n\n    if (typeof fetchMoreForQueryId === 'string') {\n      this.markQueryResultClient(fetchMoreForQueryId, true);\n    }\n  };\n\n  QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n    if (!this.store[queryId]) return;\n    this.store[queryId].networkError = null;\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = complete ? NetworkStatus.ready : NetworkStatus.loading;\n  };\n\n  QueryStore.prototype.stopQuery = function (queryId) {\n    delete this.store[queryId];\n  };\n\n  QueryStore.prototype.reset = function (observableQueryIds) {\n    var _this = this; // keep only the queries with query ids that are associated with observables\n\n\n    this.store = Object.keys(this.store).filter(function (queryId) {\n      return observableQueryIds.indexOf(queryId) > -1;\n    }).reduce(function (res, key) {\n      // XXX set loading to true so listeners don't trigger unless they want results with partial data\n      res[key] = __assign({}, _this.store[key], {\n        networkStatus: NetworkStatus.loading\n      });\n      return res;\n    }, {});\n  };\n\n  return QueryStore;\n}();\n\nexport { QueryStore };","var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { execute, ApolloLink } from 'apollo-link';\nimport { print } from 'graphql/language/printer';\nimport { DedupLink as Deduplicator } from 'apollo-link-dedup';\nimport { assign, getDefaultValues, getMutationDefinition, getOperationDefinition, getOperationName, getQueryDefinition, isProduction, maybeDeepFreeze, hasDirectives } from 'apollo-utilities';\nimport { QueryScheduler } from '../scheduler/scheduler';\nimport { isApolloError, ApolloError } from '../errors/ApolloError';\nimport { Observable } from '../util/Observable';\nimport { MutationStore } from '../data/mutations';\nimport { QueryStore } from '../data/queries';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { FetchType } from './types';\nimport { graphQLResultHasError } from 'apollo-utilities';\nvar defaultQueryInfo = {\n  listeners: [],\n  invalidated: false,\n  document: null,\n  newData: null,\n  lastRequestId: null,\n  observableQuery: null,\n  subscriptions: []\n};\n\nvar QueryManager =\n/** @class */\nfunction () {\n  function QueryManager(_a) {\n    var link = _a.link,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        store = _a.store,\n        _c = _a.onBroadcast,\n        onBroadcast = _c === void 0 ? function () {\n      return undefined;\n    } : _c,\n        _d = _a.ssrMode,\n        ssrMode = _d === void 0 ? false : _d;\n    this.mutationStore = new MutationStore();\n    this.queryStore = new QueryStore(); // let's not start at zero to avoid pain with bad checks\n\n    this.idCounter = 1; // XXX merge with ObservableQuery but that needs to be expanded to support mutations and\n    // subscriptions as well\n\n    this.queries = new Map(); // A map going from a requestId to a promise that has not yet been resolved. We use this to keep\n    // track of queries that are inflight and reject them in case some\n    // destabalizing action occurs (e.g. reset of the Apollo store).\n\n    this.fetchQueryPromises = new Map(); // A map going from the name of a query to an observer issued for it by watchQuery. This is\n    // generally used to refetches for refetchQueries and to update mutation results through\n    // updateQueries.\n\n    this.queryIdsByName = {};\n    this.link = link;\n    this.deduplicator = ApolloLink.from([new Deduplicator(), link]);\n    this.queryDeduplication = queryDeduplication;\n    this.dataStore = store;\n    this.onBroadcast = onBroadcast;\n    this.scheduler = new QueryScheduler({\n      queryManager: this,\n      ssrMode: ssrMode\n    });\n  }\n\n  QueryManager.prototype.mutate = function (_a) {\n    var _this = this;\n\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueriesByName = _a.updateQueries,\n        _b = _a.refetchQueries,\n        refetchQueries = _b === void 0 ? [] : _b,\n        updateWithProxyFn = _a.update,\n        _c = _a.errorPolicy,\n        errorPolicy = _c === void 0 ? 'none' : _c,\n        fetchPolicy = _a.fetchPolicy,\n        _d = _a.context,\n        context = _d === void 0 ? {} : _d;\n\n    if (!mutation) {\n      throw new Error('mutation option is required. You must specify your GraphQL document in the mutation option.');\n    }\n\n    if (fetchPolicy && fetchPolicy !== 'no-cache') {\n      throw new Error(\"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n    }\n\n    var mutationId = this.generateQueryId();\n    var cache = this.dataStore.getCache();\n    mutation = cache.transformDocument(mutation), variables = assign({}, getDefaultValues(getMutationDefinition(mutation)), variables);\n    var mutationString = print(mutation);\n    this.setQuery(mutationId, function () {\n      return {\n        document: mutation\n      };\n    }); // Create a map of update queries by id to the query instead of by name.\n\n    var generateUpdateQueriesInfo = function generateUpdateQueriesInfo() {\n      var ret = {};\n\n      if (updateQueriesByName) {\n        Object.keys(updateQueriesByName).forEach(function (queryName) {\n          return (_this.queryIdsByName[queryName] || []).forEach(function (queryId) {\n            ret[queryId] = {\n              updater: updateQueriesByName[queryName],\n              query: _this.queryStore.get(queryId)\n            };\n          });\n        });\n      }\n\n      return ret;\n    };\n\n    this.mutationStore.initMutation(mutationId, mutationString, variables);\n    this.dataStore.markMutationInit({\n      mutationId: mutationId,\n      document: mutation,\n      variables: variables || {},\n      updateQueries: generateUpdateQueriesInfo(),\n      update: updateWithProxyFn,\n      optimisticResponse: optimisticResponse\n    });\n    this.broadcastQueries();\n    return new Promise(function (resolve, reject) {\n      var storeResult;\n      var error;\n\n      var operation = _this.buildOperationForLink(mutation, variables, __assign({}, context, {\n        optimisticResponse: optimisticResponse\n      }));\n\n      execute(_this.link, operation).subscribe({\n        next: function next(result) {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            error = new ApolloError({\n              graphQLErrors: result.errors\n            });\n            return;\n          }\n\n          _this.mutationStore.markMutationResult(mutationId);\n\n          if (fetchPolicy !== 'no-cache') {\n            _this.dataStore.markMutationResult({\n              mutationId: mutationId,\n              result: result,\n              document: mutation,\n              variables: variables || {},\n              updateQueries: generateUpdateQueriesInfo(),\n              update: updateWithProxyFn\n            });\n          }\n\n          storeResult = result;\n        },\n        error: function error(err) {\n          _this.mutationStore.markMutationError(mutationId, err);\n\n          _this.dataStore.markMutationComplete({\n            mutationId: mutationId,\n            optimisticResponse: optimisticResponse\n          });\n\n          _this.broadcastQueries();\n\n          _this.setQuery(mutationId, function () {\n            return {\n              document: undefined\n            };\n          });\n\n          reject(new ApolloError({\n            networkError: err\n          }));\n        },\n        complete: function complete() {\n          if (error) {\n            _this.mutationStore.markMutationError(mutationId, error);\n          }\n\n          _this.dataStore.markMutationComplete({\n            mutationId: mutationId,\n            optimisticResponse: optimisticResponse\n          });\n\n          _this.broadcastQueries();\n\n          if (error) {\n            reject(error);\n            return;\n          } // allow for conditional refetches\n          // XXX do we want to make this the only API one day?\n\n\n          if (typeof refetchQueries === 'function') {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (refetchQueries) {\n            refetchQueries.forEach(function (refetchQuery) {\n              if (typeof refetchQuery === 'string') {\n                _this.refetchQueryByName(refetchQuery);\n\n                return;\n              }\n\n              _this.query({\n                query: refetchQuery.query,\n                variables: refetchQuery.variables,\n                fetchPolicy: 'network-only'\n              });\n            });\n          }\n\n          _this.setQuery(mutationId, function () {\n            return {\n              document: undefined\n            };\n          });\n\n          if (errorPolicy === 'ignore' && storeResult && graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          resolve(storeResult);\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, // This allows us to track if this is a query spawned by a `fetchMore`\n  // call for another query. We need this data to compute the `fetchMore`\n  // network status for the query this is fetching for.\n  fetchMoreForQueryId) {\n    var _this = this;\n\n    var _a = options.variables,\n        variables = _a === void 0 ? {} : _a,\n        _b = options.metadata,\n        metadata = _b === void 0 ? null : _b,\n        _c = options.fetchPolicy,\n        fetchPolicy = _c === void 0 ? 'cache-first' : _c;\n    var cache = this.dataStore.getCache();\n    var query = cache.transformDocument(options.query);\n    var storeResult;\n    var needToFetch = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache'; // If this is not a force fetch, we want to diff the query against the\n    // store before we fetch it from the network interface.\n    // TODO we hit the cache even if the policy is network-first. This could be unnecessary if the network is up.\n\n    if (fetchType !== FetchType.refetch && fetchPolicy !== 'network-only' && fetchPolicy !== 'no-cache') {\n      var _d = this.dataStore.getCache().diff({\n        query: query,\n        variables: variables,\n        returnPartialData: true,\n        optimistic: false\n      }),\n          complete = _d.complete,\n          result = _d.result; // If we're in here, only fetch if we have missing fields\n\n\n      needToFetch = !complete || fetchPolicy === 'cache-and-network';\n      storeResult = result;\n    }\n\n    var shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby'; // we need to check to see if this is an operation that uses the @live directive\n\n    if (hasDirectives(['live'], query)) shouldFetch = true;\n    var requestId = this.generateRequestId(); // set up a watcher to listen to cache updates\n\n    var cancel = this.updateQueryWatch(queryId, query, options); // Initialize query in store with unique requestId\n\n    this.setQuery(queryId, function () {\n      return {\n        document: query,\n        lastRequestId: requestId,\n        invalidated: true,\n        cancel: cancel\n      };\n    });\n    this.invalidate(true, fetchMoreForQueryId);\n    this.queryStore.initQuery({\n      queryId: queryId,\n      document: query,\n      storePreviousVariables: shouldFetch,\n      variables: variables,\n      isPoll: fetchType === FetchType.poll,\n      isRefetch: fetchType === FetchType.refetch,\n      metadata: metadata,\n      fetchMoreForQueryId: fetchMoreForQueryId\n    });\n    this.broadcastQueries(); // If there is no part of the query we need to fetch from the server (or,\n    // fetchPolicy is cache-only), we just write the store result as the final result.\n\n    var shouldDispatchClientResult = !shouldFetch || fetchPolicy === 'cache-and-network';\n\n    if (shouldDispatchClientResult) {\n      this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n      this.invalidate(true, queryId, fetchMoreForQueryId);\n      this.broadcastQueries();\n    }\n\n    if (shouldFetch) {\n      var networkResult = this.fetchRequest({\n        requestId: requestId,\n        queryId: queryId,\n        document: query,\n        options: options,\n        fetchMoreForQueryId: fetchMoreForQueryId\n      }).catch(function (error) {\n        // This is for the benefit of `refetch` promises, which currently don't get their errors\n        // through the store like watchQuery observers do\n        if (isApolloError(error)) {\n          throw error;\n        } else {\n          var lastRequestId = _this.getQuery(queryId).lastRequestId;\n\n          if (requestId >= (lastRequestId || 1)) {\n            _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n\n            _this.invalidate(true, queryId, fetchMoreForQueryId);\n\n            _this.broadcastQueries();\n          }\n\n          _this.removeFetchQueryPromise(requestId);\n\n          throw new ApolloError({\n            networkError: error\n          });\n        }\n      }); // we don't return the promise for cache-and-network since it is already\n      // returned below from the cache\n\n      if (fetchPolicy !== 'cache-and-network') {\n        return networkResult;\n      } else {\n        // however we need to catch the error so it isn't unhandled in case of\n        // network error\n        networkResult.catch(function () {});\n      }\n    } // If we have no query to send to the server, we should return the result\n    // found within the store.\n\n\n    return Promise.resolve({\n      data: storeResult\n    });\n  }; // Returns a query listener that will update the given observer based on the\n  // results (or lack thereof) for a particular query.\n\n\n  QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n    var _this = this;\n\n    var previouslyHadError = false;\n    return function (queryStoreValue, newData) {\n      // we're going to take a look at the data, so the query is no longer invalidated\n      _this.invalidate(false, queryId); // The query store value can be undefined in the event of a store\n      // reset.\n\n\n      if (!queryStoreValue) return;\n\n      var observableQuery = _this.getQuery(queryId).observableQuery;\n\n      var fetchPolicy = observableQuery ? observableQuery.options.fetchPolicy : options.fetchPolicy; // don't watch the store for queries on standby\n\n      if (fetchPolicy === 'standby') return;\n      var errorPolicy = observableQuery ? observableQuery.options.errorPolicy : options.errorPolicy;\n      var lastResult = observableQuery ? observableQuery.getLastResult() : null;\n      var lastError = observableQuery ? observableQuery.getLastError() : null;\n      var shouldNotifyIfLoading = !newData && queryStoreValue.previousVariables != null || fetchPolicy === 'cache-only' || fetchPolicy === 'cache-and-network'; // if this caused by a cache broadcast but the query is still in flight\n      // don't notify the observer\n      // if (\n      //   isCacheBroadcast &&\n      //   isNetworkRequestInFlight(queryStoreValue.networkStatus)\n      // ) {\n      //   shouldNotifyIfLoading = false;\n      // }\n\n      var networkStatusChanged = Boolean(lastResult && queryStoreValue.networkStatus !== lastResult.networkStatus);\n      var errorStatusChanged = errorPolicy && (lastError && lastError.graphQLErrors) !== queryStoreValue.graphQLErrors && errorPolicy !== 'none';\n\n      if (!isNetworkRequestInFlight(queryStoreValue.networkStatus) || networkStatusChanged && options.notifyOnNetworkStatusChange || shouldNotifyIfLoading) {\n        // If we have either a GraphQL error or a network error, we create\n        // an error and tell the observer about it.\n        if ((!errorPolicy || errorPolicy === 'none') && queryStoreValue.graphQLErrors && queryStoreValue.graphQLErrors.length > 0 || queryStoreValue.networkError) {\n          var apolloError_1 = new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError\n          });\n          previouslyHadError = true;\n\n          if (observer.error) {\n            try {\n              observer.error(apolloError_1);\n            } catch (e) {\n              // Throw error outside this control flow to avoid breaking Apollo's state\n              setTimeout(function () {\n                throw e;\n              }, 0);\n            }\n          } else {\n            // Throw error outside this control flow to avoid breaking Apollo's state\n            setTimeout(function () {\n              throw apolloError_1;\n            }, 0);\n\n            if (!isProduction()) {\n              /* tslint:disable-next-line */\n              console.info('An unhandled error was thrown because no error handler is registered ' + 'for the query ' + print(queryStoreValue.document));\n            }\n          }\n\n          return;\n        }\n\n        try {\n          var data = void 0;\n          var isMissing = void 0;\n\n          if (newData) {\n            // clear out the latest new data, since we're now using it\n            _this.setQuery(queryId, function () {\n              return {\n                newData: null\n              };\n            });\n\n            data = newData.result;\n            isMissing = !newData.complete || false;\n          } else {\n            if (lastResult && lastResult.data && !errorStatusChanged) {\n              data = lastResult.data;\n              isMissing = false;\n            } else {\n              var document_1 = _this.getQuery(queryId).document;\n\n              var readResult = _this.dataStore.getCache().diff({\n                query: document_1,\n                variables: queryStoreValue.previousVariables || queryStoreValue.variables,\n                optimistic: true\n              });\n\n              data = readResult.result;\n              isMissing = !readResult.complete;\n            }\n          }\n\n          var resultFromStore = void 0; // If there is some data missing and the user has told us that they\n          // do not tolerate partial data then we want to return the previous\n          // result and mark it as stale.\n\n          if (isMissing && fetchPolicy !== 'cache-only') {\n            resultFromStore = {\n              data: lastResult && lastResult.data,\n              loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n              networkStatus: queryStoreValue.networkStatus,\n              stale: true\n            };\n          } else {\n            resultFromStore = {\n              data: data,\n              loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n              networkStatus: queryStoreValue.networkStatus,\n              stale: false\n            };\n          } // if the query wants updates on errors we need to add it to the result\n\n\n          if (errorPolicy === 'all' && queryStoreValue.graphQLErrors && queryStoreValue.graphQLErrors.length > 0) {\n            resultFromStore.errors = queryStoreValue.graphQLErrors;\n          }\n\n          if (observer.next) {\n            var isDifferentResult = !(lastResult && resultFromStore && lastResult.networkStatus === resultFromStore.networkStatus && lastResult.stale === resultFromStore.stale && // We can do a strict equality check here because we include a `previousResult`\n            // with `readQueryFromStore`. So if the results are the same they will be\n            // referentially equal.\n            lastResult.data === resultFromStore.data);\n\n            if (isDifferentResult || previouslyHadError) {\n              try {\n                observer.next(maybeDeepFreeze(resultFromStore));\n              } catch (e) {\n                // Throw error outside this control flow to avoid breaking Apollo's state\n                setTimeout(function () {\n                  throw e;\n                }, 0);\n              }\n            }\n          }\n\n          previouslyHadError = false;\n        } catch (error) {\n          previouslyHadError = true;\n          if (observer.error) observer.error(new ApolloError({\n            networkError: error\n          }));\n          return;\n        }\n      }\n    };\n  }; // The shouldSubscribe option is a temporary fix that tells us whether watchQuery was called\n  // directly (i.e. through ApolloClient) or through the query method within QueryManager.\n  // Currently, the query method uses watchQuery in order to handle non-network errors correctly\n  // but we don't want to keep track observables issued for the query method since those aren't\n  // supposed to be refetched in the event of a store reset. Once we unify error handling for\n  // network errors and non-network errors, the shouldSubscribe option will go away.\n\n\n  QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n    if (shouldSubscribe === void 0) {\n      shouldSubscribe = true;\n    }\n\n    if (options.fetchPolicy === 'standby') {\n      throw new Error('client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n    } // get errors synchronously\n\n\n    var queryDefinition = getQueryDefinition(options.query); // assign variable default values if supplied\n\n    if (queryDefinition.variableDefinitions && queryDefinition.variableDefinitions.length) {\n      var defaultValues = getDefaultValues(queryDefinition);\n      options.variables = assign({}, defaultValues, options.variables);\n    }\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var transformedOptions = __assign({}, options);\n\n    return new ObservableQuery({\n      scheduler: this.scheduler,\n      options: transformedOptions,\n      shouldSubscribe: shouldSubscribe\n    });\n  };\n\n  QueryManager.prototype.query = function (options) {\n    var _this = this;\n\n    if (!options.query) {\n      throw new Error('query option is required. You must specify your GraphQL document ' + 'in the query option.');\n    }\n\n    if (options.query.kind !== 'Document') {\n      throw new Error('You must wrap the query string in a \"gql\" tag.');\n    }\n\n    if (options.returnPartialData) {\n      throw new Error('returnPartialData option only supported on watchQuery.');\n    }\n\n    if (options.pollInterval) {\n      throw new Error('pollInterval option only supported on watchQuery.');\n    }\n\n    var requestId = this.idCounter;\n    return new Promise(function (resolve, reject) {\n      _this.addFetchQueryPromise(requestId, resolve, reject);\n\n      return _this.watchQuery(options, false).result().then(function (result) {\n        _this.removeFetchQueryPromise(requestId);\n\n        resolve(result);\n      }).catch(function (error) {\n        _this.removeFetchQueryPromise(requestId);\n\n        reject(error);\n      });\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    var queryId = this.idCounter.toString();\n    this.idCounter++;\n    return queryId;\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.queryStore.stopQuery(queryId);\n    this.invalidate(true, queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.addQueryListener = function (queryId, listener) {\n    this.setQuery(queryId, function (_a) {\n      var _b = _a.listeners,\n          listeners = _b === void 0 ? [] : _b;\n      return {\n        listeners: listeners.concat([listener]),\n        invalidate: false\n      };\n    });\n  };\n\n  QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n    var _this = this;\n\n    var cancel = this.getQuery(queryId).cancel;\n    if (cancel) cancel();\n\n    var previousResult = function previousResult() {\n      var previousResult = null;\n\n      var observableQuery = _this.getQuery(queryId).observableQuery;\n\n      if (observableQuery) {\n        var lastResult = observableQuery.getLastResult();\n\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n\n      return previousResult;\n    };\n\n    return this.dataStore.getCache().watch({\n      query: document,\n      variables: options.variables,\n      optimistic: true,\n      previousResult: previousResult,\n      callback: function callback(newData) {\n        _this.setQuery(queryId, function () {\n          return {\n            invalidated: true,\n            newData: newData\n          };\n        });\n      }\n    });\n  }; // Adds a promise to this.fetchQueryPromises for a given request ID.\n\n\n  QueryManager.prototype.addFetchQueryPromise = function (requestId, resolve, reject) {\n    this.fetchQueryPromises.set(requestId.toString(), {\n      resolve: resolve,\n      reject: reject\n    });\n  }; // Removes the promise in this.fetchQueryPromises for a particular request ID.\n\n\n  QueryManager.prototype.removeFetchQueryPromise = function (requestId) {\n    this.fetchQueryPromises.delete(requestId.toString());\n  }; // Adds an ObservableQuery to this.observableQueries and to this.observableQueriesByName.\n\n\n  QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: observableQuery\n      };\n    }); // Insert the ObservableQuery into this.observableQueriesByName if the query has a name\n\n    var queryDef = getQueryDefinition(observableQuery.options.query);\n\n    if (queryDef.name && queryDef.name.value) {\n      var queryName = queryDef.name.value; // XXX we may we want to warn the user about query name conflicts in the future\n\n      this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];\n      this.queryIdsByName[queryName].push(observableQuery.queryId);\n    }\n  };\n\n  QueryManager.prototype.removeObservableQuery = function (queryId) {\n    var _a = this.getQuery(queryId),\n        observableQuery = _a.observableQuery,\n        cancel = _a.cancel;\n\n    if (cancel) cancel();\n    if (!observableQuery) return;\n    var definition = getQueryDefinition(observableQuery.options.query);\n    var queryName = definition.name ? definition.name.value : null;\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: null\n      };\n    });\n\n    if (queryName) {\n      this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {\n        return !(observableQuery.queryId === val);\n      });\n    }\n  };\n\n  QueryManager.prototype.clearStore = function () {\n    // Before we have sent the reset action to the store,\n    // we can no longer rely on the results returned by in-flight\n    // requests since these may depend on values that previously existed\n    // in the data portion of the store. So, we cancel the promises and observers\n    // that we have issued so far and not yet resolved (in the case of\n    // queries).\n    this.fetchQueryPromises.forEach(function (_a) {\n      var reject = _a.reject;\n      reject(new Error('Store reset while query was in flight(not completed in link chain)'));\n    });\n    var resetIds = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (observableQuery) resetIds.push(queryId);\n    });\n    this.queryStore.reset(resetIds);\n    this.mutationStore.reset(); // begin removing data from the store\n\n    var reset = this.dataStore.reset();\n    return reset;\n  };\n\n  QueryManager.prototype.resetStore = function () {\n    var _this = this; // Similarly, we have to have to refetch each of the queries currently being\n    // observed. We refetch instead of error'ing on these since the assumption is that\n    // resetting the store doesn't eliminate the need for the queries currently being\n    // watched. If there is an existing query in flight when the store is reset,\n    // the promise for it will be rejected and its results will not be written to the\n    // store.\n\n\n    return this.clearStore().then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n\n  QueryManager.prototype.getObservableQueryPromises = function (includeStandby) {\n    var _this = this;\n\n    var observableQueryPromises = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (!observableQuery) return;\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n\n      if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n\n      _this.setQuery(queryId, function () {\n        return {\n          newData: null\n        };\n      });\n\n      _this.invalidate(true, queryId);\n    });\n    return observableQueryPromises;\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var observableQueryPromises = this.getObservableQueryPromises(includeStandby);\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.startQuery = function (queryId, options, listener) {\n    this.addQueryListener(queryId, listener);\n    this.fetchQuery(queryId, options) // `fetchQuery` returns a Promise. In case of a failure it should be caucht or else the\n    // console will show an `Uncaught (in promise)` message. Ignore the error for now.\n    .catch(function () {\n      return undefined;\n    });\n    return queryId;\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (options) {\n    var _this = this;\n\n    var query = options.query;\n    var cache = this.dataStore.getCache();\n    var transformedDoc = cache.transformDocument(query);\n    var variables = assign({}, getDefaultValues(getOperationDefinition(query)), options.variables);\n    var sub;\n    var observers = [];\n    return new Observable(function (observer) {\n      observers.push(observer); // If this is the first observer, actually initiate the network subscription\n\n      if (observers.length === 1) {\n        var handler = {\n          next: function next(result) {\n            _this.dataStore.markSubscriptionResult(result, transformedDoc, variables);\n\n            _this.broadcastQueries(); // It's slightly awkward that the data for subscriptions doesn't come from the store.\n\n\n            observers.forEach(function (obs) {\n              // XXX I'd prefer a different way to handle errors for subscriptions\n              if (obs.next) obs.next(result);\n            });\n          },\n          error: function error(_error) {\n            observers.forEach(function (obs) {\n              if (obs.error) obs.error(_error);\n            });\n          }\n        }; // TODO: Should subscriptions also accept a `context` option to pass\n        // through to links?\n\n        var operation = _this.buildOperationForLink(transformedDoc, variables);\n\n        sub = execute(_this.link, operation).subscribe(handler);\n      }\n\n      return function () {\n        observers = observers.filter(function (obs) {\n          return obs !== observer;\n        }); // If we removed the last observer, tear down the network subscription\n\n        if (observers.length === 0 && sub) {\n          sub.unsubscribe();\n        }\n      };\n    });\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryInStore(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    var subscriptions = this.getQuery(queryId).subscriptions; // teardown all links\n\n    subscriptions.forEach(function (x) {\n      return x.unsubscribe();\n    });\n    this.queries.delete(queryId);\n  };\n\n  QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = true;\n    }\n\n    var _a = observableQuery.options,\n        variables = _a.variables,\n        query = _a.query;\n    var lastResult = observableQuery.getLastResult();\n    var newData = this.getQuery(observableQuery.queryId).newData; // XXX test this\n\n    if (newData) {\n      return maybeDeepFreeze({\n        data: newData.result,\n        partial: false\n      });\n    } else {\n      try {\n        // the query is brand new, so we read from the store to see if anything is there\n        var data = this.dataStore.getCache().read({\n          query: query,\n          variables: variables,\n          previousResult: lastResult ? lastResult.data : undefined,\n          optimistic: optimistic\n        });\n        return maybeDeepFreeze({\n          data: data,\n          partial: false\n        });\n      } catch (e) {\n        return maybeDeepFreeze({\n          data: {},\n          partial: true\n        });\n      }\n    }\n  };\n\n  QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n    var observableQuery;\n\n    if (typeof queryIdOrObservable === 'string') {\n      var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n\n      if (!foundObserveableQuery) {\n        throw new Error(\"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n      }\n\n      observableQuery = foundObserveableQuery;\n    } else {\n      observableQuery = queryIdOrObservable;\n    }\n\n    var _a = observableQuery.options,\n        variables = _a.variables,\n        query = _a.query;\n    var data = this.getCurrentQueryResult(observableQuery, false).data;\n    return {\n      previousResult: data,\n      variables: variables,\n      document: query\n    };\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    var _this = this;\n\n    this.onBroadcast();\n    this.queries.forEach(function (info, id) {\n      if (!info.invalidated || !info.listeners) return;\n      info.listeners // it's possible for the listener to be undefined if the query is being stopped\n      // See here for more detail: https://github.com/apollostack/apollo-client/issues/231\n      .filter(function (x) {\n        return !!x;\n      }).forEach(function (listener) {\n        listener(_this.queryStore.get(id), info.newData);\n      });\n    });\n  }; // Takes a request id, query id, a query document and information associated with the query\n  // and send it to the network interface. Returns\n  // a promise for the result associated with that request.\n\n\n  QueryManager.prototype.fetchRequest = function (_a) {\n    var _this = this;\n\n    var requestId = _a.requestId,\n        queryId = _a.queryId,\n        document = _a.document,\n        options = _a.options,\n        fetchMoreForQueryId = _a.fetchMoreForQueryId;\n    var variables = options.variables,\n        context = options.context,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? 'none' : _b,\n        fetchPolicy = options.fetchPolicy;\n    var operation = this.buildOperationForLink(document, variables, __assign({}, context, {\n      // TODO: Should this be included for all entry points via\n      // buildOperationForLink?\n      forceFetch: !this.queryDeduplication\n    }));\n    var resultFromStore;\n    var errorsFromStore;\n    return new Promise(function (resolve, reject) {\n      _this.addFetchQueryPromise(requestId, resolve, reject);\n\n      var subscription = execute(_this.deduplicator, operation).subscribe({\n        next: function next(result) {\n          // default the lastRequestId to 1\n          var lastRequestId = _this.getQuery(queryId).lastRequestId;\n\n          if (requestId >= (lastRequestId || 1)) {\n            if (fetchPolicy !== 'no-cache') {\n              try {\n                _this.dataStore.markQueryResult(result, document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n              } catch (e) {\n                reject(e);\n                return;\n              }\n            } else {\n              _this.setQuery(queryId, function () {\n                return {\n                  newData: {\n                    result: result.data,\n                    complete: true\n                  }\n                };\n              });\n            }\n\n            _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n\n            _this.invalidate(true, queryId, fetchMoreForQueryId);\n\n            _this.broadcastQueries();\n          }\n\n          if (result.errors && errorPolicy === 'none') {\n            reject(new ApolloError({\n              graphQLErrors: result.errors\n            }));\n            return;\n          } else if (errorPolicy === 'all') {\n            errorsFromStore = result.errors;\n          }\n\n          if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n            // We don't write fetchMore results to the store because this would overwrite\n            // the original result in case an @connection directive is used.\n            resultFromStore = result.data;\n          } else {\n            try {\n              // ensure result is combined with data already in store\n              resultFromStore = _this.dataStore.getCache().read({\n                variables: variables,\n                query: document,\n                optimistic: false\n              }); // this will throw an error if there are missing fields in\n              // the results which can happen with errors from the server.\n              // tslint:disable-next-line\n            } catch (e) {}\n          }\n        },\n        error: function error(_error2) {\n          _this.removeFetchQueryPromise(requestId);\n\n          _this.setQuery(queryId, function (_a) {\n            var subscriptions = _a.subscriptions;\n            return {\n              subscriptions: subscriptions.filter(function (x) {\n                return x !== subscription;\n              })\n            };\n          });\n\n          reject(_error2);\n        },\n        complete: function complete() {\n          _this.removeFetchQueryPromise(requestId);\n\n          _this.setQuery(queryId, function (_a) {\n            var subscriptions = _a.subscriptions;\n            return {\n              subscriptions: subscriptions.filter(function (x) {\n                return x !== subscription;\n              })\n            };\n          });\n\n          resolve({\n            data: resultFromStore,\n            errors: errorsFromStore,\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            stale: false\n          });\n        }\n      });\n\n      _this.setQuery(queryId, function (_a) {\n        var subscriptions = _a.subscriptions;\n        return {\n          subscriptions: subscriptions.concat([subscription])\n        };\n      });\n    });\n  }; // Refetches a query given that query's name. Refetches\n  // all ObservableQuery instances associated with the query name.\n\n\n  QueryManager.prototype.refetchQueryByName = function (queryName) {\n    var _this = this;\n\n    var refetchedQueries = this.queryIdsByName[queryName]; // early return if the query named does not exist (not yet fetched)\n    // this used to warn but it may be inteneded behavoir to try and refetch\n    // un called queries because they could be on different routes\n\n    if (refetchedQueries === undefined) return;\n    return Promise.all(refetchedQueries.map(function (id) {\n      return _this.getQuery(id).observableQuery;\n    }).filter(function (x) {\n      return !!x;\n    }).map(function (x) {\n      return x.refetch();\n    }));\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    var requestId = this.idCounter;\n    this.idCounter++;\n    return requestId;\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    return this.queries.get(queryId) || __assign({}, defaultQueryInfo);\n  };\n\n  QueryManager.prototype.setQuery = function (queryId, updater) {\n    var prev = this.getQuery(queryId);\n\n    var newInfo = __assign({}, prev, updater(prev));\n\n    this.queries.set(queryId, newInfo);\n  };\n\n  QueryManager.prototype.invalidate = function (invalidated, queryId, fetchMoreForQueryId) {\n    if (queryId) this.setQuery(queryId, function () {\n      return {\n        invalidated: invalidated\n      };\n    });\n\n    if (fetchMoreForQueryId) {\n      this.setQuery(fetchMoreForQueryId, function () {\n        return {\n          invalidated: invalidated\n        };\n      });\n    }\n  };\n\n  QueryManager.prototype.buildOperationForLink = function (document, variables, extraContext) {\n    var cache = this.dataStore.getCache();\n    return {\n      query: cache.transformForLink ? cache.transformForLink(document) : document,\n      variables: variables,\n      operationName: getOperationName(document) || undefined,\n      context: __assign({}, extraContext, {\n        cache: cache,\n        // getting an entry's cache key is useful for cacheResolvers & state-link\n        getCacheKey: function getCacheKey(obj) {\n          if (cache.config) {\n            // on the link, we just want the id string, not the full id value from toIdValue\n            return cache.config.dataIdFromObject(obj);\n          } else {\n            throw new Error('To use context.getCacheKey, you need to use a cache that has a configurable dataIdFromObject, like apollo-cache-inmemory.');\n          }\n        }\n      })\n    };\n  };\n\n  return QueryManager;\n}();\n\nexport { QueryManager };","import { getOperationName, tryFunctionOrLogError, graphQLResultHasError } from 'apollo-utilities';\n\nvar DataStore =\n/** @class */\nfunction () {\n  function DataStore(initialCache) {\n    this.cache = initialCache;\n  }\n\n  DataStore.prototype.getCache = function () {\n    return this.cache;\n  };\n\n  DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n    if (ignoreErrors === void 0) {\n      ignoreErrors = false;\n    }\n\n    var writeWithErrors = !graphQLResultHasError(result);\n\n    if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n      writeWithErrors = true;\n    }\n\n    if (!fetchMoreForQueryId && writeWithErrors) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_QUERY',\n        query: document,\n        variables: variables\n      });\n    }\n  };\n\n  DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n    // the subscription interface should handle not sending us results we no longer subscribe to.\n    // XXX I don't think we ever send in an object with errors, but we might in the future...\n    if (!graphQLResultHasError(result)) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_SUBSCRIPTION',\n        query: document,\n        variables: variables\n      });\n    }\n  };\n\n  DataStore.prototype.markMutationInit = function (mutation) {\n    var _this = this;\n\n    if (mutation.optimisticResponse) {\n      var optimistic_1;\n\n      if (typeof mutation.optimisticResponse === 'function') {\n        optimistic_1 = mutation.optimisticResponse(mutation.variables);\n      } else {\n        optimistic_1 = mutation.optimisticResponse;\n      }\n\n      var changeFn_1 = function changeFn_1() {\n        _this.markMutationResult({\n          mutationId: mutation.mutationId,\n          result: {\n            data: optimistic_1\n          },\n          document: mutation.document,\n          variables: mutation.variables,\n          updateQueries: mutation.updateQueries,\n          update: mutation.update\n        });\n      };\n\n      this.cache.recordOptimisticTransaction(function (c) {\n        var orig = _this.cache;\n        _this.cache = c;\n\n        try {\n          changeFn_1();\n        } finally {\n          _this.cache = orig;\n        }\n      }, mutation.mutationId);\n    }\n  };\n\n  DataStore.prototype.markMutationResult = function (mutation) {\n    var _this = this; // Incorporate the result from this mutation into the store\n\n\n    if (!graphQLResultHasError(mutation.result)) {\n      var cacheWrites_1 = [];\n      cacheWrites_1.push({\n        result: mutation.result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      });\n\n      if (mutation.updateQueries) {\n        Object.keys(mutation.updateQueries).filter(function (id) {\n          return mutation.updateQueries[id];\n        }).forEach(function (queryId) {\n          var _a = mutation.updateQueries[queryId],\n              query = _a.query,\n              updater = _a.updater; // Read the current query result from the store.\n\n          var _b = _this.cache.diff({\n            query: query.document,\n            variables: query.variables,\n            returnPartialData: true,\n            optimistic: false\n          }),\n              currentQueryResult = _b.result,\n              complete = _b.complete;\n\n          if (!complete) {\n            return;\n          } // Run our reducer using the current query result and the mutation result.\n\n\n          var nextQueryResult = tryFunctionOrLogError(function () {\n            return updater(currentQueryResult, {\n              mutationResult: mutation.result,\n              queryName: getOperationName(query.document) || undefined,\n              queryVariables: query.variables\n            });\n          }); // Write the modified result back into the store if we got a new result.\n\n          if (nextQueryResult) {\n            cacheWrites_1.push({\n              result: nextQueryResult,\n              dataId: 'ROOT_QUERY',\n              query: query.document,\n              variables: query.variables\n            });\n          }\n        });\n      }\n\n      this.cache.performTransaction(function (c) {\n        cacheWrites_1.forEach(function (write) {\n          return c.write(write);\n        });\n      }); // If the mutation has some writes associated with it then we need to\n      // apply those writes to the store by running this reducer again with a\n      // write action.\n\n      var update_1 = mutation.update;\n\n      if (update_1) {\n        this.cache.performTransaction(function (c) {\n          tryFunctionOrLogError(function () {\n            return update_1(c, mutation.result);\n          });\n        });\n      }\n    }\n  };\n\n  DataStore.prototype.markMutationComplete = function (_a) {\n    var mutationId = _a.mutationId,\n        optimisticResponse = _a.optimisticResponse;\n    if (!optimisticResponse) return;\n    this.cache.removeOptimistic(mutationId);\n  };\n\n  DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n    this.cache.write({\n      result: newResult,\n      dataId: 'ROOT_QUERY',\n      variables: variables,\n      query: document\n    });\n  };\n\n  DataStore.prototype.reset = function () {\n    return this.cache.reset();\n  };\n\n  return DataStore;\n}();\n\nexport { DataStore };","var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { ApolloLink, execute } from 'apollo-link';\nimport { isProduction, removeConnectionDirectiveFromDocument } from 'apollo-utilities';\nimport { QueryManager } from './core/QueryManager';\nimport { DataStore } from './data/store';\nimport { version } from './version';\nvar hasSuggestedDevtools = false;\nvar supportedDirectives = new ApolloLink(function (operation, forward) {\n  operation.query = removeConnectionDirectiveFromDocument(operation.query);\n  return forward(operation);\n});\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\n\nvar ApolloClient =\n/** @class */\nfunction () {\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   */\n  function ApolloClient(options) {\n    var _this = this;\n\n    this.defaultOptions = {};\n    this.resetStoreCallbacks = [];\n    var link = options.link,\n        cache = options.cache,\n        _a = options.ssrMode,\n        ssrMode = _a === void 0 ? false : _a,\n        _b = options.ssrForceFetchDelay,\n        ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n        connectToDevTools = options.connectToDevTools,\n        _c = options.queryDeduplication,\n        queryDeduplication = _c === void 0 ? true : _c,\n        defaultOptions = options.defaultOptions;\n\n    if (!link || !cache) {\n      throw new Error(\"\\n        In order to initialize Apollo Client, you must specify link & cache properties on the config object.\\n        This is part of the required upgrade when migrating from Apollo Client 1.0 to Apollo Client 2.0.\\n        For more information, please visit:\\n          https://www.apollographql.com/docs/react/basics/setup.html\\n        to help you get started.\\n      \");\n    } // remove apollo-client supported directives\n\n\n    this.link = supportedDirectives.concat(link);\n    this.cache = cache;\n    this.store = new DataStore(cache);\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.ssrMode = ssrMode;\n    this.defaultOptions = defaultOptions || {};\n\n    if (ssrForceFetchDelay) {\n      setTimeout(function () {\n        return _this.disableNetworkFetches = false;\n      }, ssrForceFetchDelay);\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this); // Attach the client instance to window to let us be found by chrome devtools, but only in\n    // development mode\n\n    var defaultConnectToDevTools = !isProduction() && typeof window !== 'undefined' && !window.__APOLLO_CLIENT__;\n\n    if (typeof connectToDevTools === 'undefined' ? defaultConnectToDevTools : connectToDevTools && typeof window !== 'undefined') {\n      window.__APOLLO_CLIENT__ = this;\n    }\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n\n\n    if (!hasSuggestedDevtools && !isProduction()) {\n      hasSuggestedDevtools = true;\n\n      if (typeof window !== 'undefined' && window.document && window.top === window.self) {\n        // First check if devtools is not installed\n        if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n          // Only for Chrome\n          if (window.navigator && window.navigator.userAgent.indexOf('Chrome') > -1) {\n            // tslint:disable-next-line\n            console.debug('Download the Apollo DevTools ' + 'for a better development experience: ' + 'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n          }\n        }\n      }\n    }\n\n    this.version = version;\n  }\n  /**\n   * This watches the results of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer.\n   * <p /><p />\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   * <p /><p />\n   * For example, suppose you call watchQuery on a GraphQL query that fetches an person's\n   * first name and last name and this person has a particular object identifer, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and his/her first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   * <p /><p />\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   *\n   */\n\n\n  ApolloClient.prototype.watchQuery = function (options) {\n    this.initQueryManager();\n\n    if (this.defaultOptions.watchQuery) {\n      options = __assign({}, this.defaultOptions.watchQuery, options);\n    } // XXX Overwriting options is probably not the best way to do this long term...\n\n\n    if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options = __assign({}, options, {\n        fetchPolicy: 'cache-first'\n      });\n    }\n\n    return this.queryManager.watchQuery(options);\n  };\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n\n\n  ApolloClient.prototype.query = function (options) {\n    this.initQueryManager();\n\n    if (this.defaultOptions.query) {\n      options = __assign({}, this.defaultOptions.query, options);\n    }\n\n    if (options.fetchPolicy === 'cache-and-network') {\n      throw new Error('cache-and-network fetchPolicy can only be used with watchQuery');\n    } // XXX Overwriting options is probably not the best way to do this long\n    // term...\n\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = __assign({}, options, {\n        fetchPolicy: 'cache-first'\n      });\n    }\n\n    return this.queryManager.query(options);\n  };\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n\n\n  ApolloClient.prototype.mutate = function (options) {\n    this.initQueryManager();\n\n    if (this.defaultOptions.mutate) {\n      options = __assign({}, this.defaultOptions.mutate, options);\n    }\n\n    return this.queryManager.mutate(options);\n  };\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n\n\n  ApolloClient.prototype.subscribe = function (options) {\n    this.initQueryManager();\n    return this.queryManager.startGraphQLSubscription(options);\n  };\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   */\n\n\n  ApolloClient.prototype.readQuery = function (options) {\n    return this.initProxy().readQuery(options);\n  };\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n\n\n  ApolloClient.prototype.readFragment = function (options) {\n    return this.initProxy().readFragment(options);\n  };\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n\n\n  ApolloClient.prototype.writeQuery = function (options) {\n    var result = this.initProxy().writeQuery(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n\n\n  ApolloClient.prototype.writeFragment = function (options) {\n    var result = this.initProxy().writeFragment(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n  /**\n   * Sugar for writeQuery & writeFragment\n   * This method will construct a query from the data object passed in.\n   * If no id is supplied, writeData will write the data to the root.\n   * If an id is supplied, writeData will write a fragment to the object\n   * specified by the id in the store.\n   *\n   * Since you aren't passing in a query to check the shape of the data,\n   * you must pass in an object that conforms to the shape of valid GraphQL data.\n   */\n\n\n  ApolloClient.prototype.writeData = function (options) {\n    var result = this.initProxy().writeData(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n\n  ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n    this.devToolsHookCb = cb;\n  };\n\n  ApolloClient.prototype.__requestRaw = function (payload) {\n    return execute(this.link, payload);\n  };\n  /**\n   * This initializes the query manager that tracks queries and the cache\n   */\n\n\n  ApolloClient.prototype.initQueryManager = function () {\n    var _this = this;\n\n    if (this.queryManager) return;\n    this.queryManager = new QueryManager({\n      link: this.link,\n      store: this.store,\n      queryDeduplication: this.queryDeduplication,\n      ssrMode: this.ssrMode,\n      onBroadcast: function onBroadcast() {\n        if (_this.devToolsHookCb) {\n          _this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: _this.queryManager.queryStore.getStore(),\n              mutations: _this.queryManager.mutationStore.getStore()\n            },\n            dataWithOptimisticResults: _this.cache.extract(true)\n          });\n        }\n      }\n    });\n  };\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You’ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n\n\n  ApolloClient.prototype.resetStore = function () {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.queryManager ? _this.queryManager.clearStore() : Promise.resolve(null);\n    }).then(function () {\n      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    }).then(function () {\n      return _this.queryManager && _this.queryManager.reFetchObservableQueries ? _this.queryManager.reFetchObservableQueries() : Promise.resolve(null);\n    });\n  };\n  /**\n   * Allows callbacks to be registered that are executed with the store is reset.\n   * onResetStore returns an unsubscribe function for removing your registered callbacks.\n   */\n\n\n  ApolloClient.prototype.onResetStore = function (cb) {\n    var _this = this;\n\n    this.resetStoreCallbacks.push(cb);\n    return function () {\n      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n\n\n  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n    return this.queryManager ? this.queryManager.reFetchObservableQueries(includeStandby) : Promise.resolve(null);\n  };\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n\n\n  ApolloClient.prototype.extract = function (optimistic) {\n    return this.initProxy().extract(optimistic);\n  };\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n\n\n  ApolloClient.prototype.restore = function (serializedState) {\n    return this.initProxy().restore(serializedState);\n  };\n  /**\n   * Initializes a data proxy for this client instance if one does not already\n   * exist and returns either a previously initialized proxy instance or the\n   * newly initialized instance.\n   */\n\n\n  ApolloClient.prototype.initProxy = function () {\n    if (!this.proxy) {\n      this.initQueryManager();\n      this.proxy = this.cache;\n    }\n\n    return this.proxy;\n  };\n\n  return ApolloClient;\n}();\n\nexport default ApolloClient;","/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep(value) {\n  // If the value is an array, create a new array where every item has been cloned.\n  if (Array.isArray(value)) {\n    return value.map(function (item) {\n      return cloneDeep(item);\n    });\n  } // If the value is an object, go through all of the object’s properties and add them to a new\n  // object.\n\n\n  if (value !== null && typeof value === 'object') {\n    var nextValue = {};\n\n    for (var key in value) {\n      if (value.hasOwnProperty(key)) {\n        nextValue[key] = cloneDeep(value[key]);\n      }\n    }\n\n    return nextValue;\n  } // Otherwise this is some primitive value and it is therefore immutable so we can just return it\n  // directly.\n\n\n  return value;\n}","import { cloneDeep } from './util/cloneDeep';\nimport { checkDocument, getOperationDefinitionOrDie, getFragmentDefinitions, createFragmentMap } from './getFromAST';\nvar TYPENAME_FIELD = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename'\n  }\n};\n\nfunction isNotEmpty(op, fragments) {\n  // keep selections that are still valid\n  return op.selectionSet.selections.filter(function (selectionSet) {\n    // anything that doesn't match the compound filter is okay\n    return !(selectionSet && // look into fragments to verify they should stay\n    selectionSet.kind === 'FragmentSpread' && // see if the fragment in the map is valid (recursively)\n    !isNotEmpty(fragments[selectionSet.name.value], fragments));\n  }).length > 0;\n}\n\nfunction getDirectiveMatcher(directives) {\n  return function directiveMatcher(directive) {\n    return directives.some(function (dir) {\n      if (dir.name && dir.name === directive.name.value) return true;\n      if (dir.test && dir.test(directive)) return true;\n      return false;\n    });\n  };\n}\n\nfunction addTypenameToSelectionSet(selectionSet, isRoot) {\n  if (isRoot === void 0) {\n    isRoot = false;\n  }\n\n  if (selectionSet.selections) {\n    if (!isRoot) {\n      var alreadyHasThisField = selectionSet.selections.some(function (selection) {\n        return selection.kind === 'Field' && selection.name.value === '__typename';\n      });\n\n      if (!alreadyHasThisField) {\n        selectionSet.selections.push(TYPENAME_FIELD);\n      }\n    }\n\n    selectionSet.selections.forEach(function (selection) {\n      // Must not add __typename if we're inside an introspection query\n      if (selection.kind === 'Field') {\n        if (selection.name.value.lastIndexOf('__', 0) !== 0 && selection.selectionSet) {\n          addTypenameToSelectionSet(selection.selectionSet);\n        }\n      } else if (selection.kind === 'InlineFragment') {\n        if (selection.selectionSet) {\n          addTypenameToSelectionSet(selection.selectionSet);\n        }\n      }\n    });\n  }\n}\n\nfunction removeDirectivesFromSelectionSet(directives, selectionSet) {\n  if (!selectionSet.selections) return selectionSet; // if any of the directives are set to remove this selectionSet, remove it\n\n  var agressiveRemove = directives.some(function (dir) {\n    return dir.remove;\n  });\n  selectionSet.selections = selectionSet.selections.map(function (selection) {\n    if (selection.kind !== 'Field' || !selection || !selection.directives) return selection;\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var remove;\n    selection.directives = selection.directives.filter(function (directive) {\n      var shouldKeep = !directiveMatcher(directive);\n      if (!remove && !shouldKeep && agressiveRemove) remove = true;\n      return shouldKeep;\n    });\n    return remove ? null : selection;\n  }).filter(function (x) {\n    return !!x;\n  });\n  selectionSet.selections.forEach(function (selection) {\n    if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') && selection.selectionSet) {\n      removeDirectivesFromSelectionSet(directives, selection.selectionSet);\n    }\n  });\n  return selectionSet;\n}\n\nexport function removeDirectivesFromDocument(directives, doc) {\n  var docClone = cloneDeep(doc);\n  docClone.definitions.forEach(function (definition) {\n    removeDirectivesFromSelectionSet(directives, definition.selectionSet);\n  });\n  var operation = getOperationDefinitionOrDie(docClone);\n  var fragments = createFragmentMap(getFragmentDefinitions(docClone));\n  return isNotEmpty(operation, fragments) ? docClone : null;\n}\nexport function addTypenameToDocument(doc) {\n  checkDocument(doc);\n  var docClone = cloneDeep(doc);\n  docClone.definitions.forEach(function (definition) {\n    var isRoot = definition.kind === 'OperationDefinition';\n    addTypenameToSelectionSet(definition.selectionSet, isRoot);\n  });\n  return docClone;\n}\nvar connectionRemoveConfig = {\n  test: function test(directive) {\n    var willRemove = directive.name.value === 'connection';\n\n    if (willRemove) {\n      if (!directive.arguments || !directive.arguments.some(function (arg) {\n        return arg.name.value === 'key';\n      })) {\n        console.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');\n      }\n    }\n\n    return willRemove;\n  }\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n  checkDocument(doc);\n  return removeDirectivesFromDocument([connectionRemoveConfig], doc);\n}\n\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n\n  if (!(selectionSet && selectionSet.selections)) {\n    return false;\n  }\n\n  var matchedSelections = selectionSet.selections.filter(function (selection) {\n    return hasDirectivesInSelection(directives, selection, nestedCheck);\n  });\n  return matchedSelections.length > 0;\n}\n\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n\n  if (selection.kind !== 'Field' || !selection) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  var directiveMatcher = getDirectiveMatcher(directives);\n  var matchedDirectives = selection.directives.filter(directiveMatcher);\n  return matchedDirectives.length > 0 || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\n\nfunction getDirectivesFromSelectionSet(directives, selectionSet) {\n  selectionSet.selections = selectionSet.selections.filter(function (selection) {\n    return hasDirectivesInSelection(directives, selection, true);\n  }).map(function (selection) {\n    if (hasDirectivesInSelection(directives, selection, false)) {\n      return selection;\n    }\n\n    if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') && selection.selectionSet) {\n      selection.selectionSet = getDirectivesFromSelectionSet(directives, selection.selectionSet);\n    }\n\n    return selection;\n  });\n  return selectionSet;\n}\n\nexport function getDirectivesFromDocument(directives, doc, includeAllFragments) {\n  if (includeAllFragments === void 0) {\n    includeAllFragments = false;\n  }\n\n  checkDocument(doc);\n  var docClone = cloneDeep(doc);\n  docClone.definitions = docClone.definitions.map(function (definition) {\n    if ((definition.kind === 'OperationDefinition' || definition.kind === 'FragmentDefinition' && !includeAllFragments) && definition.selectionSet) {\n      definition.selectionSet = getDirectivesFromSelectionSet(directives, definition.selectionSet);\n    }\n\n    return definition;\n  });\n  var operation = getOperationDefinitionOrDie(docClone);\n  var fragments = createFragmentMap(getFragmentDefinitions(docClone));\n  return isNotEmpty(operation, fragments) ? docClone : null;\n}","import { GraphQLError } from './GraphQLError';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError('Syntax Error: ' + description, undefined, source, [position]);\n}","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport invariant from '../jsutils/invariant';\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n */\n\nexport function formatError(error) {\n  !error ? invariant(0, 'Received null or undefined error.') : void 0;\n  return _extends({}, error.extensions, {\n    message: error.message || 'An unknown error occurred.',\n    locations: error.locations,\n    path: error.path\n  });\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport { GraphQLError } from './GraphQLError';\nexport { syntaxError } from './syntaxError';\nexport { locatedError } from './locatedError';\nexport { printError } from './printError';\nexport { formatError } from './formatError';","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  VARIABLE: 'Variable',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { visit } from './visitor';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n}\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue;\n    return variable + ': ' + type + wrap(' = ', defaultValue);\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      'fragment ' + name + wrap('(', join(variableDefinitions, ', '), ')') + ' ' + ('on ' + typeCondition + ' ' + wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + wrap('(', join(args, ', '), ')') + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  ScalarTypeExtension: function ScalarTypeExtension(_ref31) {\n    var name = _ref31.name,\n        directives = _ref31.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref32) {\n    var name = _ref32.name,\n        interfaces = _ref32.interfaces,\n        directives = _ref32.directives,\n        fields = _ref32.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives,\n        fields = _ref33.fields;\n    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref34) {\n    var name = _ref34.name,\n        directives = _ref34.directives,\n        types = _ref34.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref35) {\n    var name = _ref35.name,\n        directives = _ref35.directives,\n        values = _ref35.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        fields = _ref36.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  },\n  DirectiveDefinition: addDescription(function (_ref37) {\n    var name = _ref37.name,\n        args = _ref37.arguments,\n        locations = _ref37.locations;\n    return 'directive @' + name + wrap('(', join(args, ', '), ')') + ' on ' + join(locations, ' | ');\n  })\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return array && array.length !== 0 ? '{\\n' + indent(join(array, '\\n')) + '\\n}' : '';\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\n\n\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && '  ' + maybeString.replace(/\\n/g, '\\n  ');\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nfunction printBlockString(value, isDescription) {\n  var escaped = value.replace(/\"\"\"/g, '\\\\\"\"\"');\n  return (value[0] === ' ' || value[0] === '\\t') && value.indexOf('\\n') === -1 ? '\"\"\"' + escaped.replace(/\"$/, '\"\\n') + '\"\"\"' : '\"\"\"\\n' + (isDescription ? escaped : indent(escaped)) + '\\n\"\"\"';\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport default function invariant(condition, message) {\n  /* istanbul ignore else */\n  if (!condition) {\n    throw new Error(message);\n  }\n}","/**\n * A visitor is comprised of visit functions, which are called on each node\n * during the visitor's traversal.\n */\n\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations']\n};\n/**\n * A KeyMap describes each the traversable properties of each kind of node.\n */\n\nexport var BREAK = {};\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n  /* eslint-disable no-undef-init */\n\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var k in node) {\n            if (node.hasOwnProperty(k)) {\n              clone[k] = node[k];\n            }\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + JSON.stringify(node));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result = void 0;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { printError } from './printError';\nimport { getLocation } from '../language/location';\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport function GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations = void 0;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return getLocation(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(getLocation(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      value: extensions || originalError && originalError.extensions\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return printError(this);\n    }\n  }\n});","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { Source } from './source';\nimport { syntaxError } from '../error';\nimport { createLexer, TokenKind, getTokenDesc } from './lexer';\nimport { Kind } from './kinds';\nimport { DirectiveLocation } from './directiveLocation';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\nexport function parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError('Must provide Source. Received: ' + String(sourceObj));\n  }\n\n  var lexer = createLexer(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\nfunction parseName(lexer) {\n  var token = expect(lexer, TokenKind.NAME);\n  return {\n    kind: Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SOF);\n  var definitions = [];\n\n  do {\n    definitions.push(parseDefinition(lexer));\n  } while (!skip(lexer, TokenKind.EOF));\n\n  return {\n    kind: Kind.DOCUMENT,\n    definitions: definitions,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'extend':\n      case 'directive':\n        // Note: The schema definition language is an experimental addition.\n        return parseTypeSystemDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    // Note: The schema definition language is an experimental addition.\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, TokenKind.BRACE_L)) {\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name = void 0;\n\n  if (peek(lexer, TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue?\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.DOLLAR);\n  return {\n    kind: Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.SELECTION_SET,\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias = void 0;\n  var name = void 0;\n\n  if (skip(lexer, TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SPREAD);\n\n  if (peek(lexer, TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var typeCondition = void 0;\n\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n\n  return {\n    kind: Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.STRING:\n    case TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: Kind.STRING,\n    value: token.value,\n    block: token.kind === TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nexport function parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: Kind.LIST,\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.BRACE_L);\n  var fields = [];\n\n  while (!skip(lexer, TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n\n  return {\n    kind: Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.AT);\n  return {\n    kind: Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\n\nexport function parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type = void 0;\n\n  if (skip(lexer, TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, TokenKind.BRACKET_R);\n    type = {\n      kind: Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (skip(lexer, TokenKind.BANG)) {\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\n * NamedType : Name\n */\n\nexport function parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - TypeExtension\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'extend':\n        return parseTypeExtension(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\n  return {\n    kind: Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (lexer.token.value === 'implements') {\n    lexer.advance(); // Optional leading ampersand\n\n    skip(lexer, TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue = void 0;\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\n}\n/**\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, TokenKind.PIPE));\n\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return {\n    start: this.start,\n    end: this.end\n  };\n};\n/**\n * Determines if the next token is of a given kind\n */\n\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\n\n\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n\n  if (match) {\n    lexer.advance();\n  }\n\n  return match;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, 'Expected ' + kind + ', found ' + getTokenDesc(token));\n}\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\n\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, 'Expected \"' + value + '\", found ' + getTokenDesc(token));\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return syntaxError(lexer.source, token.start, 'Unexpected ' + getTokenDesc(token));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}","import { Observable } from './zenObservable';\nexport * from './zenObservable';\nexport default Observable;","import zenObservable from 'zen-observable';\nexport var Observable = zenObservable;","var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { getOperationName } from 'apollo-utilities';\nimport Observable from 'zen-observable-ts';\nimport { print } from 'graphql/language/printer';\nexport function validateOperation(operation) {\n  var OPERATION_FIELDS = ['query', 'operationName', 'variables', 'extensions', 'context'];\n\n  for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n    var key = _a[_i];\n\n    if (OPERATION_FIELDS.indexOf(key) < 0) {\n      throw new Error(\"illegal argument: \" + key);\n    }\n  }\n\n  return operation;\n}\n\nvar LinkError =\n/** @class */\nfunction (_super) {\n  __extends(LinkError, _super);\n\n  function LinkError(message, link) {\n    var _this = _super.call(this, message) || this;\n\n    _this.link = link;\n    return _this;\n  }\n\n  return LinkError;\n}(Error);\n\nexport { LinkError };\nexport function isTerminating(link) {\n  return link.request.length <= 1;\n}\nexport function toPromise(observable) {\n  var completed = false;\n  return new Promise(function (resolve, reject) {\n    observable.subscribe({\n      next: function next(data) {\n        if (completed) {\n          console.warn(\"Promise Wrapper does not support multiple results from Observable\");\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject\n    });\n  });\n} // backwards compat\n\nexport var makePromise = toPromise;\nexport function fromPromise(promise) {\n  return new Observable(function (observer) {\n    promise.then(function (value) {\n      observer.next(value);\n      observer.complete();\n    }).catch(observer.error.bind(observer));\n  });\n}\nexport function fromError(errorValue) {\n  return new Observable(function (observer) {\n    observer.error(errorValue);\n  });\n}\nexport function transformOperation(operation) {\n  var transformedOperation = {\n    variables: operation.variables || {},\n    extensions: operation.extensions || {},\n    operationName: operation.operationName,\n    query: operation.query\n  }; // best guess at an operation name\n\n  if (!transformedOperation.operationName) {\n    transformedOperation.operationName = typeof transformedOperation.query !== 'string' ? getOperationName(transformedOperation.query) : '';\n  }\n\n  return transformedOperation;\n}\nexport function createOperation(starting, operation) {\n  var context = __assign({}, starting);\n\n  var setContext = function setContext(next) {\n    if (typeof next === 'function') {\n      context = __assign({}, context, next(context));\n    } else {\n      context = __assign({}, context, next);\n    }\n  };\n\n  var getContext = function getContext() {\n    return __assign({}, context);\n  };\n\n  Object.defineProperty(operation, 'setContext', {\n    enumerable: false,\n    value: setContext\n  });\n  Object.defineProperty(operation, 'getContext', {\n    enumerable: false,\n    value: getContext\n  });\n  Object.defineProperty(operation, 'toKey', {\n    enumerable: false,\n    value: function value() {\n      return getKey(operation);\n    }\n  });\n  return operation;\n}\nexport function getKey(operation) {\n  // XXX we're assuming here that variables will be serialized in the same order.\n  // that might not always be true\n  return print(operation.query) + \"|\" + JSON.stringify(operation.variables) + \"|\" + operation.operationName;\n}","import Observable from 'zen-observable-ts';\nimport { validateOperation, isTerminating, LinkError, transformOperation, createOperation } from './linkUtils';\n\nvar passthrough = function passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n};\n\nvar toLink = function toLink(handler) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n};\n\nexport var empty = function empty() {\n  return new ApolloLink(function (op, forward) {\n    return Observable.of();\n  });\n};\nexport var from = function from(links) {\n  if (links.length === 0) return empty();\n  return links.map(toLink).reduce(function (x, y) {\n    return x.concat(y);\n  });\n};\nexport var split = function split(test, left, right) {\n  if (right === void 0) {\n    right = new ApolloLink(passthrough);\n  }\n\n  var leftLink = toLink(left);\n  var rightLink = toLink(right);\n\n  if (isTerminating(leftLink) && isTerminating(rightLink)) {\n    return new ApolloLink(function (operation) {\n      return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n    });\n  } else {\n    return new ApolloLink(function (operation, forward) {\n      return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n    });\n  }\n}; // join two Links together\n\nexport var concat = function concat(first, second) {\n  var firstLink = toLink(first);\n\n  if (isTerminating(firstLink)) {\n    console.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n    return firstLink;\n  }\n\n  var nextLink = toLink(second);\n\n  if (isTerminating(nextLink)) {\n    return new ApolloLink(function (operation) {\n      return firstLink.request(operation, function (op) {\n        return nextLink.request(op) || Observable.of();\n      }) || Observable.of();\n    });\n  } else {\n    return new ApolloLink(function (operation, forward) {\n      return firstLink.request(operation, function (op) {\n        return nextLink.request(op, forward) || Observable.of();\n      }) || Observable.of();\n    });\n  }\n};\n\nvar ApolloLink =\n/** @class */\nfunction () {\n  function ApolloLink(request) {\n    if (request) this.request = request;\n  }\n\n  ApolloLink.prototype.split = function (test, left, right) {\n    if (right === void 0) {\n      right = new ApolloLink(passthrough);\n    }\n\n    return this.concat(split(test, left, right));\n  };\n\n  ApolloLink.prototype.concat = function (next) {\n    return concat(this, next);\n  };\n\n  ApolloLink.prototype.request = function (operation, forward) {\n    throw new Error('request is not implemented');\n  };\n\n  ApolloLink.empty = empty;\n  ApolloLink.from = from;\n  ApolloLink.split = split;\n  ApolloLink.execute = execute;\n  return ApolloLink;\n}();\n\nexport { ApolloLink };\nexport function execute(link, operation) {\n  return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n}","export * from './link';\nexport { createOperation, makePromise, toPromise, fromPromise, fromError } from './linkUtils';\nimport Observable from 'zen-observable-ts';\nexport { Observable };","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */"],"sourceRoot":""}